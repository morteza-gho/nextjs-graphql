//use npm run api-gen for update this file
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '': {
    get: operations['AppController_getHello'];
  };
  '/timezone': {
    get: operations['AppController_getTimeZone'];
  };
  '/notifications': {
    get: operations['NotificationsController_getNotifications'];
  };
  '/notifications/read/all': {
    patch: operations['NotificationsController_markAllNotificationsRead'];
  };
  '/notifications/read/{id}': {
    patch: operations['NotificationsController_markNotificationRead'];
  };
  '/users/info': {
    get: operations['UsersController_getInfo'];
  };
  '/users/password/update': {
    patch: operations['UsersController_updatePassword'];
  };
  '/users/delete-account/request': {
    post: operations['UsersController_requestDeleteAccount'];
  };
  '/users/delete-account/verify': {
    delete: operations['UsersController_verifyDeleteAccount'];
  };
  '/users/receive-marketing-email': {
    patch: operations['UsersController_updateIsReceivedMarketingEmail'];
  };
  '/users/devices': {
    get: operations['UsersController_getDevices'];
  };
  '/users/device': {
    post: operations['UsersController_postDevice'];
  };
  '/users/document/{id}': {
    get: operations['UsersController_getDocument'];
  };
  '/users/{id}/profile-picture': {
    get: operations['UsersController_getUserProfilePicture'];
  };
  '/users/profile-picture': {
    get: operations['UsersController_getSelfProfilePicture'];
  };
  '/users/account/link': {
    get: operations['UserAccountLinkingController_getLinkedAccount'];
    post: operations['UserAccountLinkingController_linkTwoAccounts'];
  };
  '/users/account/remove/link': {
    post: operations['UserAccountLinkingController_removeLinkOfAccount'];
  };
  '/tutors/profile-picture': {
    patch: operations['TutorsController_updateProfilePicture'];
  };
  '/tutors': {
    patch: operations['TutorsController_updateTutor'];
  };
  '/tutors/bio': {
    get: operations['TutorsController_getStatus'];
    patch: operations['TutorsController_setStatus'];
  };
  '/tutors/{tutorId}/info': {
    get: operations['TutorsController_getTutorDetail'];
  };
  '/tutors/info': {
    get: operations['TutorsController_getTutorDetails'];
  };
  '/tutors/home': {
    get: operations['TutorsController_fetchHome'];
  };
  '/tutors/change-email': {
    post: operations['TutorsController_saveNewEmail'];
  };
  '/tutor/diary': {
    get: operations['TutorsDiaryController_getLessonDiaryPagination'];
  };
  '/tutor/diary/lesson-diary': {
    get: operations['TutorsDiaryController_getTutorLessonDiaryPagination'];
  };
  '/tutor/diary/expired-diary': {
    get: operations['TutorsDiaryController_getTutorExpiredDiaryPagination'];
  };
  '/tutor/diary/{did}/details': {
    get: operations['TutorsDiaryController_getLessonDiaryDetail'];
  };
  '/tutor/diary/{did}/status': {
    patch: operations['TutorsDiaryController_updateTutorDiaryStatus'];
  };
  '/tutor/diary/{did}/availability': {
    get: operations['TutorsDiaryController_getTutorDiaryAvailability'];
    patch: operations['TutorsDiaryController_updateTutorDiaryDetail'];
  };
  '/tutor/diary/{diaryId}/pause': {
    patch: operations['TutorsDiaryController_pauseTutorDiary'];
  };
  '/tutor/diary/{diaryId}/active': {
    patch: operations['TutorsDiaryController_activeTutorDiary'];
  };
  '/tutor/diary/{diaryId}': {
    delete: operations['TutorsDiaryController_deleteTutorDiary'];
  };
  '/tutor/diary/{id}/diary': {
    get: operations['TutorsDiaryController_getDiaryForEdit'];
    put: operations['TutorsDiaryController_editTutorDiary'];
  };
  '/tutor/lesson/{id}/accept': {
    post: operations['TutorLessonController_acceptLesson'];
  };
  '/tutor/lesson/{id}/cancel': {
    post: operations['TutorLessonController_cancelLesson'];
  };
  '/tutor/lesson/{id}/decline': {
    post: operations['TutorLessonController_declineLesson'];
  };
  '/tutor/lesson/completed/{id}/details': {
    get: operations['TutorLessonController_getLessonDetailCompleted'];
  };
  '/tutor/lesson/completed/{id}/price-summary': {
    get: operations['TutorLessonController_getLessonPriceSummary'];
  };
  '/tutor/lesson/completed/{id}/chats': {
    get: operations['TutorLessonController_getLessonChatMessages'];
  };
  '/tutor/lesson/completed/{id}/files': {
    get: operations['TutorLessonController_getLessonChatFiles'];
  };
  '/tutor/lesson/completed/{id}/reviews': {
    get: operations['TutorLessonController_getTutorLessonReviews'];
  };
  '/tutor/school/{schoolId}/tutor-agreement': {
    get: operations['TutorSchoolController_getTutorAgreement'];
  };
  '/tutor/school/{schoolId}/decline': {
    post: operations['TutorSchoolController_declineTutorAgreement'];
  };
  '/tutor/school/{schoolId}/accept': {
    post: operations['TutorSchoolController_acceptTutorAgreement'];
  };
  '/tutor/school/{schoolId}/cancel': {
    post: operations['TutorSchoolController_cancelTutorAgreement'];
  };
  '/tutor/school/{schoolId}/profile': {
    get: operations['TutorSchoolController_getApprovedProfileInfo'];
  };
  '/tutors/online': {
    get: operations['TutorsOnlineController_getStatus'];
  };
  '/tutors/online/set-online': {
    post: operations['TutorsOnlineController_setStatusOnline'];
  };
  '/tutors/online/update-online': {
    post: operations['TutorsOnlineController_updateStatusOnline'];
  };
  '/tutors/online/set-offline': {
    post: operations['TutorsOnlineController_setStatusOffline'];
  };
  '/tutors/prices': {
    get: operations['TutorsPricesController_getPrices'];
    put: operations['TutorsPricesController_setPrices'];
  };
  '/tutor/agreement/approval': {
    get: operations['TutorAgreementController_getApprovalAgreements'];
  };
  '/tutor/agreement/reviewed': {
    get: operations['TutorAgreementController_getReviewedAgreements'];
  };
  '/tutor/agreement/approved': {
    get: operations['TutorAgreementController_getApprovedAgreements'];
  };
  '/tutors/documents': {
    get: operations['TutorsDocumentsController_getDocument'];
  };
  '/tutors/documents/status': {
    get: operations['TutorsDocumentsController_getDocumentStatus'];
  };
  '/tutors/documents/view-approved': {
    post: operations['TutorsDocumentsController_viewApproved'];
  };
  '/tutors/documents/upload/dfe': {
    post: operations['TutorsDocumentsController_uploadDfe'];
  };
  '/tutors/documents/dfe': {
    patch: operations['TutorsDocumentsController_uploadDfePut'];
  };
  '/tutors/documents/upload/dbs': {
    post: operations['TutorsDocumentsController_uploadDbs'];
  };
  '/tutors/documents/dbs': {
    patch: operations['TutorsDocumentsController_uploadDbsPut'];
  };
  '/tutors/documents/upload/proof-of-id': {
    post: operations['TutorsDocumentsController_uploadProofOfId'];
  };
  '/tutors/qualifications': {
    get: operations['TutorsQualificationsController_get'];
    post: operations['TutorsQualificationsController_add'];
  };
  '/tutors/qualifications/bulk': {
    put: operations['TutorsQualificationsController_update'];
    post: operations['TutorsQualificationsController_addBulk'];
  };
  '/tutors/qualifications/{qualificationId}': {
    delete: operations['TutorsQualificationsController_delete'];
  };
  '/admins/statistics': {
    get: operations['AdminsController_getHomeMetaData'];
  };
  '/admins/upload': {
    post: operations['AdminsController_upload'];
  };
  '/admins/user/{id}/profile-picture': {
    get: operations['AdminsController_getUserProfilePicture'];
  };
  '/admin/user': {
    get: operations['AdminsUsersController_getUserList'];
  };
  '/admin/job/add': {
    post: operations['AdminsUsersController_addJob'];
  };
  '/admin/jobs': {
    get: operations['AdminsUsersController_getJob'];
  };
  '/admin/user/{id}': {
    get: operations['AdminsUsersController_getUser'];
    patch: operations['AdminsUsersController_editUser'];
  };
  '/admin/resend-invite-user/{id}': {
    patch: operations['AdminsUsersController_resendInviteUser'];
  };
  '/admin/disable-user/{id}': {
    patch: operations['AdminsUsersController_disableUser'];
  };
  '/admin/activate-user/{id}': {
    patch: operations['AdminsUsersController_activeUser'];
  };
  '/admin/remove-user/{id}': {
    patch: operations['AdminsUsersController_removeUser'];
  };
  '/admin/search-user-meta': {
    get: operations['AdminsUsersController_getUserSearchMeta'];
  };
  '/admin/add-user-meta': {
    get: operations['AdminsUsersController_getUserAddMeta'];
  };
  '/admin': {
    get: operations['AdminsUsersController_getUsersByStatus'];
  };
  '/admin/verify-new-admin': {
    post: operations['AdminsUsersController_verifyNewAdmin'];
  };
  '/admin/update-status/{id}': {
    patch: operations['AdminsUsersController_updateStatus'];
  };
  '/admin/add-parent': {
    post: operations['AdminsUsersController_addParent'];
  };
  '/admin/verify-new-parent': {
    post: operations['AdminsUsersController_verifyNewParent'];
  };
  '/admin/knektu-user/{id}': {
    get: operations['AdminsUsersController_getKnektuUserDetail'];
  };
  '/admin/knektu-users/pending': {
    get: operations['AdminsUsersController_getPendingKnektuUser'];
  };
  '/admin/knektu-users/active': {
    get: operations['AdminsUsersController_getActiveKnektuUser'];
  };
  '/admin/knektu-users/disabled': {
    get: operations['AdminsUsersController_getRemovedKnektuUser'];
  };
  '/admin/add-user': {
    post: operations['AdminsUsersController_addUser'];
  };
  '/admins/roles/adminRoles': {
    get: operations['AdminsRolesController_getAllAdminRoles'];
  };
  '/admins/roles': {
    get: operations['AdminsRolesController_getAllRoles'];
  };
  '/admins/roles/admin-permissions': {
    get: operations['AdminsRolesController_getAllAdminPermissions'];
  };
  '/admins/roles/{roleId}': {
    get: operations['AdminsRolesController_getAllRoleById'];
    delete: operations['AdminsRolesController_deleteRoleById'];
    patch: operations['AdminsRolesController_updateRoleById'];
  };
  '/admins/roles/add-admin-role': {
    post: operations['AdminsRolesController_addRole'];
  };
  '/admin/tutor/{id}/lesson': {
    get: operations['AdminTutorLessonController_searchLessonPagination'];
  };
  '/admin/tutor/{id}/schools-approvals': {
    get: operations['AdminTutorSchoolController_getSchoolsApprovals'];
  };
  '/admin/teacher': {
    get: operations['AdminTeacherController_getTeachersPagination'];
  };
  '/admin/teacher/{teacherUserId}': {
    get: operations['AdminTeacherController_getTeacher'];
  };
  '/admin/pupil/{pupilUserId}': {
    get: operations['AdminPupilController_getPupilDetails'];
  };
  '/admin/pupil/{pupilUserId}/parents': {
    get: operations['AdminPupilController_getParentsOfPupil'];
  };
  '/admin/tutor': {
    get: operations['AdminTutorController_getPendingTutors'];
  };
  '/admin/tutor/{id}/profile': {
    get: operations['AdminTutorController_getProfileInfo'];
  };
  '/admin/tutor/{id}/qualifications': {
    get: operations['AdminTutorController_getQualification'];
  };
  '/admin/tutor/{id}/documents': {
    get: operations['AdminTutorController_documentList'];
  };
  '/admin/tutor/documents/accept': {
    put: operations['AdminTutorController_acceptDocumentOfTutor'];
  };
  '/admin/tutor/documents/reject': {
    put: operations['AdminTutorController_rejectDocumentOfTutors'];
  };
  '/admin/tutor/{tId}/profile-image/{pId}/accept': {
    put: operations['AdminTutorController_acceptProfileImageOfTutors'];
  };
  '/admin/tutor/{tId}/profile-image/{pId}/reject': {
    put: operations['AdminTutorController_rejectProfileImageOfTutors'];
  };
  '/admin/tutor/{id}/rejected': {
    post: operations['AdminTutorController_rejectTeacher'];
  };
  '/admin/tutor/{id}/suspend': {
    post: operations['AdminTutorController_suspendTeacher'];
  };
  '/admin/tutor/{id}/approved': {
    post: operations['AdminTutorController_approveTeacher'];
  };
  '/admin/school/{id}/staff': {
    get: operations['AdminSchoolController_getSchoolStaffPagination'];
  };
  '/admin/school/active': {
    get: operations['AdminSchoolController_getActiveSchoolPagination'];
  };
  '/admin/school/disabled': {
    get: operations['AdminSchoolController_getDisableSchoolPagination'];
  };
  '/admin/school/{id}/status': {
    get: operations['AdminSchoolController_getSchoolStatus'];
  };
  '/admin/school/{id}/disable': {
    patch: operations['AdminSchoolController_disableStatusSchool'];
  };
  '/admin/school/{id}/active': {
    patch: operations['AdminSchoolController_activeStatusSchool'];
  };
  '/admin/school/{id}/fund': {
    get: operations['AdminSchoolController_getSchoolFund'];
  };
  '/admin/school/{id}': {
    get: operations['AdminSchoolController_getSchoolName'];
  };
  '/admin/school/{schoolId}/allocations': {
    get: operations['AdminSchoolController_getAllSchoolAllocations'];
  };
  '/admin/school/{schoolId}/allocations/cohorts': {
    get: operations['AdminSchoolController_getSchoolCohortsAllocations'];
  };
  '/admin/school/{schoolId}/tutor/agreement/approval': {
    get: operations['AdminSchoolController_getTutorApprovals'];
  };
  '/admin/school/{schoolId}/tutor/agreement': {
    get: operations['AdminSchoolController_getTutorAgreementPagination'];
  };
  '/admin/school/{schoolId}/tutor/all': {
    get: operations['AdminSchoolController_getAllTutors'];
  };
  '/admin/school/{schoolId}/tutor/{id}/full': {
    get: operations['AdminSchoolController_getFullProfileDetails'];
  };
  '/admin/school/{schoolId}/tutor/{id}/agreement/status': {
    get: operations['AdminSchoolController_getAgreementStatus'];
  };
  '/admin/school/tutor/{tutorUserId}/tutor-review': {
    get: operations['AdminSchoolController_getTutorReview'];
  };
  '/admin/school/tutor/{id}/review': {
    get: operations['AdminSchoolController_getTutorReviewSummary'];
  };
  '/admin/school/{schoolId}/tutor/{id}/agreement': {
    get: operations['AdminSchoolController_getAllAgreements'];
  };
  '/admin/school/{schoolId}/tutor/{tutorUserId}/price/summary': {
    get: operations['AdminSchoolController_priceSummary'];
  };
  '/admin/school/{schoolId}/lessons': {
    get: operations['AdminSchoolController_getLessons'];
  };
  '/admin/school/{schoolId}/statistics': {
    get: operations['AdminSchoolController_getSchoolStatistic'];
  };
  '/admin/lesson': {
    get: operations['AdminLessonController_getAdminLessonPagination'];
  };
  '/admin/lesson/{id}': {
    get: operations['AdminLessonController_getLessonDetail'];
  };
  '/admin/lesson/completed/{id}/details': {
    get: operations['AdminLessonController_getLessonDetailCompleted'];
  };
  '/admin/lesson/completed/{id}/price-summary': {
    get: operations['AdminLessonController_getLessonPriceSummary'];
  };
  '/admin/lesson/completed/{id}/chats': {
    get: operations['AdminLessonController_getLessonChatMessages'];
  };
  '/admin/lesson/completed/{id}/files': {
    get: operations['AdminLessonController_getLessonChatFiles'];
  };
  '/admin/lesson/completed/{id}/reviews': {
    get: operations['AdminLessonController_getTutorLessonReviews'];
  };
  '/admin/cohort': {
    get: operations['AdminCohortController_getCohortPagination'];
  };
  '/admin/cohort/{id}': {
    get: operations['AdminCohortController_getCohortById'];
  };
  '/admin/cohort/{cid}/lessons': {
    get: operations['AdminCohortController_getCohortLesson'];
  };
  '/admin/cohort/{id}/pupils': {
    get: operations['AdminCohortController_getCohortPupilsPagination'];
  };
  '/admin/school/{schoolId}/cohort': {
    get: operations['AdminSchoolCohortController_getCohorts'];
  };
  '/admin/school/{schoolId}/cohort/{cohortId}': {
    get: operations['AdminSchoolCohortController_getCohortById'];
  };
  '/admin/school/{schoolId}/cohort/{cohortId}/lessons': {
    get: operations['AdminSchoolCohortController_getCohortLesson'];
  };
  '/admin/school/cohort/lessons/{lessonId}': {
    get: operations['AdminSchoolCohortController_getCohortLessonDetail'];
  };
  '/admin/school/{schoolId}/cohort/{cohortId}/pupils': {
    get: operations['AdminSchoolCohortController_getCohortPupilsPagination'];
  };
  '/admin/school/{schoolId}/cohort/{cohortId}/pupils/registered': {
    get: operations['AdminSchoolCohortController_getPupilsName'];
  };
  '/admin/school/{schoolId}/pupil/uploaded': {
    get: operations['AdminSchoolPupilController_getUploadedPupil'];
  };
  '/admin/school/{schoolId}/pupil/pending': {
    get: operations['AdminSchoolPupilController_getPendingPupil'];
  };
  '/admin/school/{schoolId}/pupil/active': {
    get: operations['AdminSchoolPupilController_getActivePupil'];
  };
  '/admin/school/{schoolId}/pupil/disabled': {
    get: operations['AdminSchoolPupilController_getDisabledPupil'];
  };
  '/admin/school/{schoolId}/pupil/{pupilId}/status': {
    get: operations['AdminSchoolPupilController_getSchoolPupilStatus'];
  };
  '/admin/school/{schoolId}/pupil/{pupilId}/details': {
    get: operations['AdminSchoolPupilController_getPupilForEdit'];
  };
  '/admin/school/{schoolId}/tutor/{tutorUserId}/diary': {
    get: operations['AdminSchoolTutorController_getDiaries'];
  };
  '/admin/school/{schoolId}/teacher/{teacherUserId}': {
    get: operations['AdminSchoolTeacherController_getTeacher'];
  };
  '/admin/school/{schoolId}/teacher/{teacherUserId}/detail': {
    get: operations['AdminSchoolTeacherController_getTeacherDetail'];
  };
  '/admin/school/{schoolId}/teacher': {
    get: operations['AdminSchoolTeacherController_getTeacherPagination'];
  };
  '/admin/school/{schoolId}/roles': {
    get: operations['AdminSchoolRoleController_getAllRolesInSchool'];
  };
  '/admin/school/{schoolId}/role/lead': {
    get: operations['AdminSchoolRoleController_allCohortLeads'];
  };
  '/admin/school/{schoolId}/staff': {
    get: operations['AdminSchoolStaffController_getSchoolStaffPagination'];
  };
  '/admin/school/{schoolId}/staff/{staffUserId}/details': {
    get: operations['AdminSchoolStaffController_getCohortById'];
  };
  '/admin/school/{schoolId}/parent/uploaded': {
    get: operations['AdminSchoolParentController_getUploadedParents'];
  };
  '/admin/school/{schoolId}/parent/pending': {
    get: operations['AdminSchoolParentController_getPendingParents'];
  };
  '/admin/school/{schoolId}/parent/active': {
    get: operations['AdminSchoolParentController_getActiveParents'];
  };
  '/admin/school/{schoolId}/parent/disabled': {
    get: operations['AdminSchoolParentController_getDisabledParents'];
  };
  '/admin/school/parent/{parentId}/details': {
    get: operations['AdminSchoolParentController_getDetails'];
  };
  '/admin/school/cohort/pupil/{id}/parents': {
    get: operations['AdminSchoolCohortPupilController_getRegisteredPupilParents'];
  };
  '/admin/school/{schoolId}/cohort/pupil/{pid}/lesson': {
    get: operations['AdminSchoolCohortPupilController_getPupilLesson'];
  };
  '/admin/school/{schoolId}/cohort/pupil/{pid}/details': {
    get: operations['AdminSchoolCohortPupilController_getPupilForEdit'];
  };
  '/admin/school/{schoolId}/lesson/completed/{lessonId}/details': {
    get: operations['AdminSchoolLessonController_getLessonDetailCompleted'];
  };
  '/admin/school/{schoolId}/lesson/completed/{lessonId}/price-summary': {
    get: operations['AdminSchoolLessonController_getLessonPriceSummary'];
  };
  '/admin/school/{schoolId}/lesson/completed/{lessonId}/chats': {
    get: operations['AdminSchoolLessonController_getLessonChatMessages'];
  };
  '/admin/school/{schoolId}/lesson/completed/{lessonId}/files': {
    get: operations['AdminSchoolLessonController_getLessonChatFiles'];
  };
  '/admin/school/{schoolId}/lesson/completed/{lessonId}/reviews': {
    get: operations['AdminSchoolLessonController_getTutorLessonReviews'];
  };
  '/admin/cohort/pupil/{pid}/details': {
    get: operations['AdminCohortPupilController_getPupilForEdit'];
  };
  '/admin/cohort/pupil/{pid}/lesson': {
    get: operations['AdminCohortPupilController_getPupilLesson'];
  };
  '/admin/cohort/pupil/{id}/parents': {
    get: operations['AdminCohortPupilController_getRegisteredPupilParents'];
  };
  '/admin/user/{userId}/teacher/detail': {
    get: operations['AdminUserTeacherController_getTeacherDetail'];
  };
  '/admin/user/{userId}/teacher/parents': {
    get: operations['AdminUserTeacherController_getParentsOfTeacher'];
  };
  '/admin/user/{userId}/teacher/parent/{parentId}/detail': {
    get: operations['AdminUserTeacherController_getDetails'];
  };
  '/admin/user/{userId}/teacher/cohorts': {
    get: operations['AdminUserTeacherController_getCohortsOfTeacher'];
  };
  '/admin/user/{userId}/teacher/lessons': {
    get: operations['AdminUserTeacherController_getLessonsOfTeacher'];
  };
  '/admin/user/{userId}/teacher/lessons/{lessonId}': {
    get: operations['AdminUserTeacherController_getTeacherLessonDetail'];
  };
  '/admin/user/{userId}/teacher/lesson/completed/{lessonId}/details': {
    get: operations['AdminUserTeacherController_getLessonDetailCompleted'];
  };
  '/admin/user/{userId}/teacher/lesson/completed/{lessonId}/price-summary': {
    get: operations['AdminUserTeacherController_getLessonPriceSummary'];
  };
  '/admin/user/{userId}/teacher/lesson/completed/{lessonId}/chats': {
    get: operations['AdminUserTeacherController_getLessonChatMessages'];
  };
  '/admin/user/{userId}/teacher/lesson/completed/{lessonId}/files': {
    get: operations['AdminUserTeacherController_getLessonChatFiles'];
  };
  '/admin/user/{userId}/teacher/lesson/completed/{lessonId}/reviews': {
    get: operations['AdminUserTeacherController_getTutorLessonReviews'];
  };
  '/admin/user/{userId}/teacher/lesson/{lessonId}/whiteboard': {
    get: operations['AdminUserTeacherController_getLessonWhiteboards'];
  };
  '/admin/user/{userId}/teacher/pupil/uploaded': {
    get: operations['AdminUserTeacherController_getUploadedPupil'];
  };
  '/admin/user/{userId}/teacher/pupil/pending': {
    get: operations['AdminUserTeacherController_getPendingPupil'];
  };
  '/admin/user/{userId}/teacher/pupil/active': {
    get: operations['AdminUserTeacherController_getActivePupil'];
  };
  '/admin/user/{userId}/teacher/pupil/disabled': {
    get: operations['AdminUserTeacherController_getDisabledPupil'];
  };
  '/admin/user/{userId}/teacher/pupil/{pid}/details': {
    get: operations['AdminUserTeacherController_getPupilForEdit'];
  };
  '/admin/user/{userId}/teacher/pupil/{pupilId}/status': {
    get: operations['AdminUserTeacherController_getSchoolPupilStatus'];
  };
  '/admin/user/{userId}/teacher/pupil/{pid}/lesson': {
    get: operations['AdminUserTeacherController_getPupilLesson'];
  };
  '/admin/user/teacher/lessons/{lessonId}': {
    get: operations['AdminUserTeacherController_getLessonDetail'];
  };
  '/admin/user/{userId}/teacher/cohorts/{cohortId}': {
    get: operations['AdminUserTeacherController_getCohortById'];
  };
  '/admin/user/{userId}/teacher/cohort/{cohortId}/lessons': {
    get: operations['AdminUserTeacherController_getCohortLesson'];
  };
  '/admin/user/teacher/cohort/lessons/{lessonId}': {
    get: operations['AdminUserTeacherController_getCohortLessonDetail'];
  };
  '/admin/user/{userId}/teacher/cohort/{cohortId}/pupils': {
    get: operations['AdminUserTeacherController_getCohortPupilsPagination'];
  };
  '/admin/user/{userId}/teacher/cohort/pupil/{pid}/details': {
    get: operations['AdminUserTeacherController_getPupilDetails'];
  };
  '/admin/user/{userId}/teacher/cohort/pupil/{pid}/lesson': {
    get: operations['AdminUserTeacherController_getPupilsLesson'];
  };
  '/admin/user/cohort/pupil/{pupil}/parents': {
    get: operations['AdminUserTeacherController_getRegisteredPupilParents'];
  };
  '/admin/user/{userId}/pupil/lessons': {
    get: operations['AdminUserPupilController_getLessonsOfPupil'];
  };
  '/admin/user/{userId}/pupil/lessons/{lessonId}': {
    get: operations['AdminUserPupilController_getLessonRequestedDetail'];
  };
  '/admin/user/{userId}/parent/details': {
    get: operations['AdminUserParentController_getDetails'];
  };
  '/admin/legals': {
    post: operations['AdminLegalController_addLegal'];
  };
  '/admin/legals/{type}': {
    get: operations['AdminLegalController_getPaginationTermOfServices'];
  };
  '/admin/legals/{legalId}/details': {
    get: operations['AdminLegalController_getLegal'];
  };
  '/admin/legals/{legalId}/update': {
    patch: operations['AdminLegalController_updateLegalById'];
  };
  '/admin/legals/{legalId}/published': {
    patch: operations['AdminLegalController_makePublishedById'];
  };
  '/admin/legals/{type}/version': {
    get: operations['AdminLegalController_getVersionForCreate'];
  };
  '/admin/legals/{type}/update/version': {
    get: operations['AdminLegalController_getVersionForUpdate'];
  };
  '/schools/organization/type': {
    get: operations['SchoolsController_getOrganizationType'];
  };
  '/schools': {
    get: operations['SchoolsController_getSchools'];
    patch: operations['SchoolsController_updateSchool'];
  };
  '/schools/{id}/details': {
    get: operations['SchoolsController_getSchoolDetails'];
  };
  '/schools/info': {
    get: operations['SchoolsController_getSchoolInfo'];
  };
  '/schools/assignUserRoles': {
    post: operations['SchoolsController_assignUserRoles'];
  };
  '/schools/staff/teaching': {
    get: operations['SchoolsController_getTeachingStaff'];
  };
  '/schools/staff/cohort-lead': {
    get: operations['SchoolsController_getCohortLead'];
  };
  '/schools/roles': {
    post: operations['SchoolsController_assignRole'];
  };
  '/schools/pupils': {
    get: operations['SchoolsController_getUsers'];
  };
  '/schools/staffs': {
    get: operations['SchoolsController_getStaffs'];
  };
  '/schools/teachers': {
    get: operations['SchoolsController_getTeacher'];
  };
  '/schools/setup/later': {
    post: operations['SchoolsController_assignUserRolesLater'];
  };
  '/schools/setup': {
    get: operations['SchoolsController_getProfileSetup'];
  };
  '/schools/teacher/{teacherUserId}/detail': {
    get: operations['SchoolsController_getTeacherDetail'];
  };
  '/schools/{id}/picture': {
    get: operations['SchoolsController_getSchoolPicture'];
  };
  '/schools/change-info-owner': {
    patch: operations['SchoolsController_changeOwnerInfo'];
  };
  '/schools/picture': {
    patch: operations['SchoolsController_updateProfilePicture'];
  };
  '/schools/admins': {
    get: operations['AdmSchoolController_schoolPagination'];
  };
  '/schools/admins/{schoolId}': {
    get: operations['AdmSchoolController_schoolProfile'];
  };
  '/schools/admins/confirmation/{schoolId}': {
    get: operations['AdmSchoolController_schoolConfirmationStatus'];
  };
  '/school/tutor/{id}/review': {
    get: operations['SchoolTutorController_getTutorReviewSummary'];
  };
  '/school/tutor/{id}/full': {
    get: operations['SchoolTutorController_getFullProfileDetails'];
  };
  '/school/tutor/{id}/diary': {
    get: operations['SchoolTutorController_getDiaries'];
  };
  '/school/tutor/approved': {
    get: operations['SchoolTutorController_getApprovedTutors'];
  };
  '/school/tutor/reviewed': {
    get: operations['SchoolTutorController_getReviewedTutors'];
  };
  '/school/tutor/{id}/agreement/status': {
    get: operations['SchoolTutorController_getAgreementStatus'];
  };
  '/school/tutor/all': {
    get: operations['SchoolTutorController_getAllTutors'];
  };
  '/school/tutor/{id}/agreement': {
    get: operations['SchoolTutorController_getAllAgreements'];
    patch: operations['SchoolTutorController_updateTutorAgreement'];
  };
  '/school/tutor/{tutorUserId}/tutor-review': {
    get: operations['SchoolTutorController_getTutorReview'];
  };
  '/school/tutor/{id}/agreement/approve': {
    post: operations['SchoolTutorController_approveTutorAgreement'];
  };
  '/school/tutor/{id}/agreement/delist': {
    patch: operations['SchoolTutorController_delistTutor'];
  };
  '/school/tutor/{id}/agreement/relist': {
    patch: operations['SchoolTutorController_relistTutor'];
  };
  '/school/tutor/{id}/agreement/cancel': {
    patch: operations['SchoolTutorController_cancelTutorAgreement'];
  };
  '/school/tutor/{id}/agreement/review': {
    patch: operations['SchoolTutorController_reviewTutorAgreement'];
  };
  '/school/tutor/{id}/price/summary': {
    get: operations['SchoolTutorController_priceSummary'];
  };
  '/schools/cohort/{cid}/pupil/{pid}/details': {
    get: operations['CohortPupilController_getPupilDetails'];
  };
  '/schools/cohort/pupil/{id}/parents': {
    get: operations['CohortPupilController_getRegisteredPupilParents'];
  };
  '/schools/cohort/pupil/{pid}/lesson': {
    get: operations['CohortPupilController_getPupilLesson'];
  };
  '/schools/cohort/pupil/{pid}/disable': {
    post: operations['CohortPupilController_disablePupil'];
  };
  '/schools/cohort/pupil/{pid}/active': {
    post: operations['CohortPupilController_activePupil'];
  };
  '/schools/cohort/pupil/{pid}/details': {
    get: operations['CohortPupilController_getPupilForEdit'];
  };
  '/schools/cohort/pupil/{pid}/update': {
    post: operations['CohortPupilController_editPupil'];
  };
  '/school/pupil/{pid}/lesson': {
    get: operations['SchoolPupilController_getPupilLessons'];
  };
  '/school/pupil/{pid}/status': {
    get: operations['SchoolPupilController_getSchoolPupilStatus'];
  };
  '/school/pupil/{pid}/disable': {
    patch: operations['SchoolPupilController_disableStatusPupil'];
  };
  '/school/pupil/{id}/reactive': {
    patch: operations['SchoolPupilController_reactiveStatusPupil'];
  };
  '/school/pupil/{pid}/lesson/{lid}': {
    get: operations['SchoolPupilController_getPupilLessonDetail'];
  };
  '/school/pupil/individual-pupil': {
    post: operations['SchoolPupilController_createIndividualPupil'];
  };
  '/school/pupil/uploaded': {
    get: operations['SchoolPupilController_getUploadedPupil'];
  };
  '/school/pupil/pending': {
    get: operations['SchoolPupilController_getPendingPupil'];
  };
  '/school/pupil/active': {
    get: operations['SchoolPupilController_getActivePupil'];
  };
  '/school/pupil/disabled': {
    get: operations['SchoolPupilController_getDisabledPupil'];
  };
  '/school/pupil/pupils': {
    get: operations['SchoolPupilController_getPupilsName'];
  };
  '/school/pupil/{id}': {
    patch: operations['SchoolPupilController_updatePupil'];
  };
  '/school/staff': {
    get: operations['SchoolStaffController_getSchoolStaffPagination'];
  };
  '/school/staff/{id}/details': {
    get: operations['SchoolStaffController_getCohortById'];
  };
  '/school/staff/{id}/disable': {
    patch: operations['SchoolStaffController_disableStatusSchool'];
  };
  '/school/staff/{id}/active': {
    post: operations['SchoolStaffController_reactiveStatusSchool'];
  };
  '/school/staff/{staffUserId}/change-info': {
    patch: operations['SchoolStaffController_changeStaffInfo'];
  };
  '/schools/cohort': {
    get: operations['SchoolCohortController_getCohorts'];
    post: operations['SchoolCohortController_newCohort'];
  };
  '/schools/cohort/{id}': {
    get: operations['SchoolCohortController_getCohortById'];
    put: operations['SchoolCohortController_updateCohort'];
    delete: operations['SchoolCohortController_deleteCohort'];
  };
  '/schools/cohort/{id}/pupils': {
    get: operations['SchoolCohortController_getCohortPupilsPagination'];
    patch: operations['SchoolCohortController_addPupilsToCohort'];
  };
  '/schools/cohort/{id}/add-pupils': {
    get: operations['SchoolCohortController_allPupilsByCohortId'];
  };
  '/schools/cohort/{id}/pupils/all': {
    get: operations['SchoolCohortController_getAllPupils'];
  };
  '/schools/cohort/{id}/pupils/registered': {
    get: operations['SchoolCohortController_getPupilsName'];
  };
  '/schools/cohort/{id}/lead': {
    get: operations['SchoolCohortController_getLeadByCohortId'];
  };
  '/schools/cohort/allocate-fund/{id}': {
    put: operations['SchoolCohortController_allocateFundToCohort'];
  };
  '/schools/cohort/deallocate-fund/{id}': {
    put: operations['SchoolCohortController_deallocateFundToCohort'];
  };
  '/schools/cohort/{id}/funding': {
    get: operations['SchoolCohortController_getCohortFundingSum'];
  };
  '/schools/parent/pupils': {
    get: operations['SchoolParentController_getAllPupils'];
  };
  '/schools/parent': {
    get: operations['SchoolParentController_getAllParents'];
  };
  '/schools/parent/uploaded': {
    get: operations['SchoolParentController_getUploadedParents'];
  };
  '/schools/parent/pending': {
    get: operations['SchoolParentController_getPendingParents'];
  };
  '/schools/parent/active': {
    get: operations['SchoolParentController_getActiveParents'];
  };
  '/schools/parent/disabled': {
    get: operations['SchoolParentController_getDisabledParents'];
  };
  '/schools/parent/add': {
    post: operations['SchoolParentController_addParent'];
  };
  '/schools/parent/{pupilId}/primary-parent': {
    get: operations['SchoolParentController_checkPrimaryParent'];
  };
  '/schools/parent/{parentId}/details': {
    get: operations['SchoolParentController_getDetails'];
  };
  '/schools/parent/{id}': {
    patch: operations['SchoolParentController_editParentInfo'];
  };
  '/schools/parent/uploaded-parent': {
    get: operations['SchoolParentController_getUploadedParent'];
  };
  '/schools/parent/invites': {
    post: operations['SchoolParentController_schoolInviteParent'];
  };
  '/teacher/pupil/pupils': {
    get: operations['TeacherPupilController_getPupilsName'];
  };
  '/teacher/pupil': {
    get: operations['TeacherPupilController_getPupilPagination'];
  };
  '/teacher/pupil/{id}/lesson': {
    get: operations['TeacherPupilController_getPupilLesson'];
  };
  '/teacher/pupil/{id}/status': {
    get: operations['TeacherPupilController_getPupilStatus'];
  };
  '/school/wallet/cohorts': {
    get: operations['SchoolWalletController_getAllCohorts'];
  };
  '/school/wallet/fund/available': {
    get: operations['SchoolWalletController_getFundAvailable'];
  };
  '/school/wallet/cohort/{id}/fund/add': {
    post: operations['SchoolWalletController_addFundToCohort'];
  };
  '/school/wallet/allocations': {
    get: operations['SchoolWalletController_getAllSchoolAllocations'];
  };
  '/school/wallet/card/pay': {
    post: operations['SchoolWalletController_cardPayRequest'];
  };
  '/school/wallet/allocations/cohorts': {
    get: operations['SchoolWalletController_getSchoolCohortsAllocations'];
  };
  '/school/wallet/card/list': {
    get: operations['SchoolWalletController_getCardList'];
  };
  '/school/wallet/card/setup': {
    get: operations['SchoolWalletController_cardSetup'];
  };
  '/schools/lesson': {
    get: operations['SchoolLessonController_getLessons'];
  };
  '/schools/lesson/{lid}': {
    get: operations['SchoolLessonController_getLesson'];
  };
  '/schools/lesson/{lid}/detail': {
    get: operations['SchoolLessonController_getLessonDetail'];
  };
  '/schools/lesson/{lid}/edit': {
    patch: operations['SchoolLessonController_editLessonInfo'];
  };
  '/schools/lesson/completed/{id}/details': {
    get: operations['SchoolLessonController_getLessonDetailCompleted'];
  };
  '/schools/lesson/completed/{id}/price-summary': {
    get: operations['SchoolLessonController_getLessonPriceSummary'];
  };
  '/schools/lesson/completed/{id}/chats': {
    get: operations['SchoolLessonController_getLessonChatMessages'];
  };
  '/schools/lesson/completed/{id}/files': {
    get: operations['SchoolLessonController_getLessonChatFiles'];
  };
  '/schools/lesson/completed/{id}/reviews': {
    get: operations['SchoolLessonController_getTutorLessonReviews'];
  };
  '/schools/lesson/{lessonId}/tutor/all': {
    get: operations['SchoolLessonController_getAllTutorsByLessonId'];
  };
  '/schools/lesson/{lId}/cancel/pupil/{pId}/decline': {
    post: operations['SchoolLessonController_declineRequestCancelLesson'];
  };
  '/schools/lesson/{lId}/cancel/pupil/{pId}/approve': {
    post: operations['SchoolLessonController_approveRequestCancelLesson'];
  };
  '/school/teacher': {
    get: operations['SchoolTeacherController_getTeacherPagination'];
  };
  '/school/teacher/teachers': {
    get: operations['SchoolTeacherController_getAllTeachers'];
  };
  '/school/teacher/{tchId}/disable': {
    post: operations['SchoolTeacherController_disableTeacher'];
  };
  '/school/teacher/{tchId}/active': {
    patch: operations['SchoolTeacherController_activeTeacher'];
  };
  '/school/teacher/{id}': {
    get: operations['SchoolTeacherController_getTeacher'];
    patch: operations['SchoolTeacherController_updateTeacher'];
  };
  '/school/teacher/{teacherUserId}/cohorts': {
    get: operations['SchoolTeacherController_getCohortsOfTeacher'];
    patch: operations['SchoolTeacherController_updateLeadsOfCohorts'];
  };
  '/school/statistic': {
    get: operations['SchoolStatisticController_getSchoolStatistic'];
  };
  '/schools/cohort/funding-type/get-all': {
    get: operations['SchoolFundingTypeController_getFundingTypes'];
  };
  '/schools/cohort/funding-type': {
    post: operations['SchoolFundingTypeController_newCohort'];
  };
  '/school/staff/upload-csv': {
    post: operations['SchoolStaffInviteController_uploadCSVStaffs'];
  };
  '/school/staff/individual': {
    post: operations['SchoolStaffInviteController_uploadIndividualStaff'];
  };
  '/school/staff/invites': {
    get: operations['SchoolStaffInviteController_getSchoolStaff'];
    post: operations['SchoolStaffInviteController_schoolInviteStaffs'];
  };
  '/school/staff/reinvites': {
    get: operations['SchoolStaffInviteController_getInvitedStaff'];
    post: operations['SchoolStaffInviteController_schoolReinviteStaff'];
  };
  '/school/staff/complete-register': {
    post: operations['SchoolStaffInviteController_completeInvitation'];
  };
  '/schools/cohort/{cid}/lessons': {
    get: operations['SchoolCohortLessonController_getCohortLesson'];
  };
  '/schools/cohort/lesson/{id}': {
    get: operations['SchoolCohortLessonController_getCohortLessonDetail'];
  };
  '/schools/cohort/create-lesson': {
    post: operations['SchoolCohortLessonController_createLesson'];
  };
  '/schools/cohort/{lessonId}/{tutorUserId}/create-lesson': {
    post: operations['SchoolCohortLessonController_createNewLessonFromOldLesson'];
  };
  '/schools/cohort/cohort-fund/{cohortId}': {
    get: operations['SchoolCohortLessonController_getCohortFund'];
  };
  '/schools/cohort/check-availability': {
    post: operations['SchoolCohortLessonController_checkAvailability'];
  };
  '/schools/cohort/cancel-lesson/{lessonId}': {
    post: operations['SchoolCohortLessonController_cancelLesson'];
  };
  '/teacher/cohort/{id}/lesson': {
    get: operations['TeacherCohortLessonController_getCohortLessons'];
  };
  '/school/teacher/upload-csv': {
    post: operations['SchoolTeacherInviteController_uploadCsvTeacher'];
  };
  '/school/teacher/individual': {
    post: operations['SchoolTeacherInviteController_uploadIndividualTeacher'];
  };
  '/school/teacher/invites/uploaded': {
    get: operations['SchoolTeacherInviteController_getSchoolTeachersUploaded'];
  };
  '/school/teacher/invites': {
    post: operations['SchoolTeacherInviteController_schoolInviteTeacher'];
  };
  '/school/teacher/invites/pending': {
    get: operations['SchoolTeacherInviteController_getSchoolTeachersPending'];
  };
  '/school/teacher/reinvites': {
    get: operations['SchoolTeacherInviteController_getInvitedStaff'];
    post: operations['SchoolTeacherInviteController_schoolResendInviteTeacher'];
  };
  '/school/teacher/complete-register': {
    post: operations['SchoolTeacherInviteController_completeInvitation'];
  };
  '/school/tutor/agreement': {
    get: operations['SchoolTutorAgreementController_getTutorAgreementPagination'];
  };
  '/school/tutor/agreement/review': {
    post: operations['SchoolTutorAgreementController_saveTutorReviewProcess'];
  };
  '/school/tutor/agreement/{id}/detail': {
    get: operations['SchoolTutorAgreementController_getAgreementDetail'];
  };
  '/school/tutor/agreement/approval': {
    get: operations['SchoolTutorAgreementController_getTutorApprovals'];
    post: operations['SchoolTutorAgreementController_createTutorApproval'];
  };
  '/school/tutor/agreement/cancel-request': {
    post: operations['SchoolTutorAgreementController_cancelAgreementTutor'];
  };
  '/school/pupil/upload-csv': {
    post: operations['SchoolPupilParentInviteController_uploadCSVPupils'];
  };
  '/school/pupil/invites': {
    get: operations['SchoolPupilParentInviteController_getSchoolPupils'];
    post: operations['SchoolPupilParentInviteController_schoolInvitePupils'];
  };
  '/school/pupil/reinvites': {
    get: operations['SchoolPupilParentInviteController_getInvitedPupil'];
    post: operations['SchoolPupilParentInviteController_schoolReInvitePupil'];
  };
  '/school/pupil/complete-register': {
    post: operations['SchoolPupilParentInviteController_pupilCompleteInvitation'];
  };
  '/school/parent/invite': {
    get: operations['SchoolPupilParentInviteController_getSchoolParents'];
  };
  '/school/parent/invites': {
    post: operations['SchoolPupilParentInviteController_schoolInviteParent'];
  };
  '/school/parent/reinvites': {
    get: operations['SchoolPupilParentInviteController_getInvitedParent'];
    post: operations['SchoolPupilParentInviteController_schoolReinviteParents'];
  };
  '/school/parent/complete-register': {
    post: operations['SchoolPupilParentInviteController_parentCompleteInvitation'];
  };
  '/chat/school-tutor': {
    post: operations['ChatMessagesController_createNewMessageSchoolTutor'];
  };
  '/chat/tutor-school': {
    post: operations['ChatMessagesController_createNewMessageTutorSchool'];
  };
  '/chat/teacher-tutor': {
    post: operations['ChatMessagesController_createNewMessageTeacherTutor'];
  };
  '/chat/tutor-teacher': {
    post: operations['ChatMessagesController_createNewMessageTutorTeacher'];
  };
  '/chat/lesson/{id}': {
    get: operations['ChatMessagesController_getAllLessonChats'];
  };
  '/chat/agreement/{id}': {
    get: operations['ChatMessagesController_getAllAgreementChats'];
  };
  '/chat/school/{id}': {
    get: operations['ChatMessagesController_getAllUserBetweenChats'];
  };
  '/chat/attachment/{id}': {
    get: operations['ChatMessagesController_getAttachmentFile'];
  };
  '/school/role/permissions': {
    get: operations['SchoolRolesController_getAllPermissions'];
  };
  '/school/role': {
    get: operations['SchoolRolesController_getAllRolesInSchool'];
    post: operations['SchoolRolesController_newRole'];
  };
  '/school/role/{id}/user/add': {
    post: operations['SchoolRolesController_addUserToSchoolRole'];
  };
  '/school/role/lead': {
    get: operations['SchoolRolesController_allCohortLeads'];
  };
  '/school/role/lead/add': {
    post: operations['SchoolRolesController_addTeacherAsCohortLead'];
  };
  '/school/role/{roleId}': {
    get: operations['SchoolRolesController_getRoleById'];
    delete: operations['SchoolRolesController_deleteRoleById'];
    patch: operations['SchoolRolesController_updateRoleById'];
  };
  '/school/role/{roleId}/user/{userId}': {
    delete: operations['SchoolRolesController_deleteUserToSchoolRole'];
  };
  '/lesson/{id}/flag/{state}': {
    patch: operations['LessonController_flagLesson'];
  };
  '/lesson': {
    get: operations['LessonController_getLessons'];
  };
  '/lesson/initialize/{version}': {
    get: operations['LessonController_initializeLesson'];
  };
  '/admin/lesson/{id}/details': {
    get: operations['AdmLessonController_getLessonDetails'];
  };
  '/student/lesson/{id}/details': {
    get: operations['StdLessonController_getLessonDetails'];
  };
  '/student/lesson': {
    get: operations['StdLessonController_getAllLessons'];
  };
  '/student/lesson/{id}/token': {
    get: operations['StdLessonController_getAgoraToken'];
  };
  '/student/lesson/{id}/token/refresh': {
    post: operations['StdLessonController_refreshAgoraToken'];
  };
  '/student/lesson/{id}/start': {
    post: operations['StdLessonController_startLesson'];
  };
  '/student/lesson/{id}/leave': {
    post: operations['StdLessonController_leaveLesson'];
  };
  '/student/lesson/{id}/tutor/review': {
    post: operations['StdLessonController_addCommentForTutor'];
  };
  '/tutor/lesson/list': {
    get: operations['TtrLessonController_getAllPaginationLesson'];
  };
  '/tutor/lesson/{id}': {
    get: operations['TtrLessonController_getTutorLessonDetails'];
  };
  '/tutor/lesson/{id}/token': {
    get: operations['TtrLessonController_getAgoraToken'];
  };
  '/tutor/lesson/{id}/token/refresh': {
    post: operations['TtrLessonController_refreshAgoraToken'];
  };
  '/student/find-tutor/available-now': {
    get: operations['StdFindTutorController_getFindTutorAvailableNow'];
  };
  '/lesson/request/chat/{id}/lead-tutor': {
    get: operations['RequestLessonChatController_getAllMessagesLeadTutor'];
  };
  '/lesson/attachment': {
    get: operations['LessonAttachmentController_getAllAttachments'];
    patch: operations['LessonAttachmentController_attachResourceAndLesson'];
  };
  '/lesson/attachment/{id}': {
    get: operations['LessonAttachmentController_getAttachmentFile'];
  };
  '/lesson/attachment/link/add': {
    post: operations['LessonAttachmentController_addLink'];
  };
  '/lesson/attachment/file/add': {
    post: operations['LessonAttachmentController_addFile'];
  };
  '/lesson/attachment/resource/reuse': {
    post: operations['LessonAttachmentController_reuseResource'];
  };
  '/finances/payments/students/get-balance': {
    get: operations['PaymentsStudentsController_getBalance'];
  };
  '/finances/payments/students/get-topup-history': {
    get: operations['PaymentsStudentsController_get'];
  };
  '/finances/payments/students/get-create-card-setup': {
    get: operations['PaymentsStudentsController_getCreateCardSetup'];
  };
  '/finances/payments/students/get-card-list': {
    get: operations['PaymentsStudentsController_getCardList'];
  };
  '/finances/payments/students/delete-a-card': {
    post: operations['PaymentsStudentsController_deleteACard'];
  };
  '/finances/payments/students/card-pay-request': {
    post: operations['PaymentsStudentsController_cardPayRequest'];
  };
  '/finances/payments/school/get-balance': {
    get: operations['PaymentsSchoolController_getBalance'];
  };
  '/finances/payments/school/get-topup-history': {
    get: operations['PaymentsSchoolController_get'];
  };
  '/finances/payments/school/get-bank-transfer-client-secret': {
    get: operations['PaymentsSchoolController_getBankTransferClientSecret'];
  };
  '/finances/payments/school/get-create-card-setup': {
    get: operations['PaymentsSchoolController_getCreateCardSetup'];
  };
  '/finances/payments/school/get-card-list': {
    get: operations['PaymentsSchoolController_getCardList'];
  };
  '/finances/payments/school/delete-a-card': {
    post: operations['PaymentsSchoolController_deleteACard'];
  };
  '/finances/payments/school/card-pay-request': {
    post: operations['PaymentsSchoolController_cardPayRequest'];
  };
  '/finances/payments/admin/add-credit-to-school': {
    post: operations['PaymentsAdminController_addCreditToSchool'];
  };
  '/finances/payments/admin/balance/school/{id}': {
    get: operations['PaymentsAdminController_getSchoolBalance'];
  };
  '/finances/payments/tutor/status': {
    get: operations['PaymentTutorController_getTutorPaymentStatus'];
  };
  '/finances/payments/tutor/get-stripe-account-info': {
    get: operations['PaymentTutorController_getStripeAccountInfo'];
  };
  '/finances/payments/tutor/connect-with-stripe': {
    get: operations['PaymentTutorController_getConnectWithStripeLink'];
  };
  '/finances/payments/tutor/get-stripe-login-link': {
    get: operations['PaymentTutorController_getStripeLoginLink'];
  };
  '/finances/payments/tutor/wallet-total': {
    get: operations['PaymentTutorController_getTutorWalletTotal'];
  };
  '/finances/payments/tutor/paid': {
    get: operations['PaymentTutorController_getTutorPaymentPaid'];
  };
  '/finances/payments/tutor/paid/{date}': {
    get: operations['PaymentTutorController_getTutorPaymentPaidDetail'];
  };
  '/finances/bank-transfer/hook/accept-payment': {
    post: operations['BankTransferHookController_acceptPayment'];
  };
  '/additional/key-stage-levels': {
    get: operations['AdditionalController_getKeyStageLevels'];
  };
  '/additional/key-stage-levels/filled': {
    get: operations['AdditionalController_getApprovedTutorsKeyStageLevels'];
  };
  '/additional/subjects': {
    get: operations['AdditionalController_getSubjects'];
  };
  '/additional/teaching-statuses': {
    get: operations['AdditionalController_getTeachingStatuses'];
  };
  '/additional/additional-needs': {
    get: operations['AdditionalController_getAdditionalNeeds'];
  };
  '/additional/organization-types': {
    get: operations['AdditionalController_getOrganizationTypes'];
  };
  '/additional/country-codes': {
    get: operations['AdditionalController_getCountryCodes'];
  };
  '/additional/person-titles': {
    get: operations['AdditionalController_getPersonTitles'];
  };
  '/students/details': {
    get: operations['StudentsController_getDetail'];
  };
  '/students/update-student': {
    post: operations['StudentsController_updateStudent'];
  };
  '/students/admins': {
    get: operations['StudentsAdminsController_listAdmin'];
  };
  '/students/admins/details/{studentId}': {
    get: operations['StudentsAdminsController_getDetail'];
  };
  '/students/admins/resend-invite-student/{id}': {
    patch: operations['StudentsAdminsController_resendInviteStudent'];
  };
  '/students/admins/disable-student/{studentId}': {
    patch: operations['StudentsAdminsController_disableStudent'];
  };
  '/students/admins/activate-student/{studentId}': {
    patch: operations['StudentsAdminsController_activeStudent'];
  };
  '/diaries/tutors': {
    get: operations['DiariesTutorsController_get'];
  };
  '/diaries/tutors/availability': {
    post: operations['DiariesTutorsController_createAvailability'];
  };
  '/diaries/tutors/group/single': {
    post: operations['DiariesTutorsController_createGroupSingle'];
  };
  '/diaries/tutors/group/series': {
    post: operations['DiariesTutorsController_createGroupSeries'];
  };
  '/teacher/home/lesson-requested': {
    get: operations['TeacherController_getTeacherLessonRequested'];
  };
  '/teacher/home/detail': {
    get: operations['TeacherController_getTeacherDetail'];
  };
  '/teacher/home/lesson-scheduled': {
    get: operations['TeacherController_getTeacherLessonScheduled'];
  };
  '/teacher/home/statistics': {
    get: operations['TeacherController_getStatistics'];
  };
  '/teacher/tutor/{id}/review': {
    get: operations['TeacherTutorController_getTutorReviewSummary'];
  };
  '/teacher/tutor/{id}/review/test': {
    get: operations['TeacherTutorController_getTutorReviewSummaryTest'];
  };
  '/teacher/tutor/{id}/tutor-review': {
    get: operations['TeacherTutorController_getTutorReview'];
  };
  '/teacher/tutor/{id}/full': {
    get: operations['TeacherTutorController_getFullProfileDetails'];
  };
  '/teacher/tutor/{id}/diary': {
    get: operations['TeacherTutorController_getDiaries'];
  };
  '/teacher/tutor/{id}/agreement': {
    get: operations['TeacherTutorController_getAllAgreements'];
  };
  '/teacher/tutor/approved': {
    get: operations['TeacherTutorController_getApprovedTutors'];
  };
  '/teacher/tutor/reviewed': {
    get: operations['TeacherTutorController_getReviewedTutors'];
  };
  '/teacher/tutor/all': {
    get: operations['TeacherTutorController_getAllTutors'];
  };
  '/teacher/tutor/{id}/price/summary': {
    get: operations['TeacherTutorController_priceSummary'];
  };
  '/teacher/lesson': {
    get: operations['TeacherLessonController_getTeacherLessons'];
  };
  '/teacher/lesson/{id}': {
    get: operations['TeacherLessonController_getLessonRequestedDetail'];
  };
  '/teacher/lesson/{id}/chats': {
    get: operations['TeacherLessonController_getLessonChats'];
  };
  '/teacher/lesson/{id}/cancel': {
    post: operations['TeacherLessonController_cancelRequest'];
  };
  '/teacher/lesson/{id}/edit': {
    put: operations['TeacherLessonController_editLessonInfo'];
  };
  '/teacher/lesson/create-lesson': {
    post: operations['TeacherLessonController_createLesson'];
  };
  '/teacher/lesson/{lessonId}/{tutorUserId}/create-lesson': {
    post: operations['TeacherLessonController_createNewLessonFromOldLesson'];
  };
  '/teacher/lesson/cohort-fund/{cohortId}': {
    get: operations['TeacherLessonController_getCohortFund'];
  };
  '/teacher/lesson/check-availability': {
    post: operations['TeacherLessonController_checkAvailability'];
  };
  '/teacher/lesson/completed/{id}/details': {
    get: operations['TeacherLessonController_getLessonDetailCompleted'];
  };
  '/teacher/lesson/completed/{id}/price-summary': {
    get: operations['TeacherLessonController_getLessonPriceSummary'];
  };
  '/teacher/lesson/completed/{id}/chats': {
    get: operations['TeacherLessonController_getLessonChatMessages'];
  };
  '/teacher/lesson/completed/{id}/files': {
    get: operations['TeacherLessonController_getLessonChatFiles'];
  };
  '/teacher/lesson/completed/{id}/reviews': {
    get: operations['TeacherLessonController_getTutorLessonReviews'];
  };
  '/teacher/lesson/{lessonId}/tutor/all': {
    get: operations['TeacherLessonController_getAllTutorsByLessonId'];
  };
  '/teacher/lesson/{lId}/cancel/pupil/{pId}/decline': {
    post: operations['TeacherLessonController_declinedRequestCancelLesson'];
  };
  '/teacher/lesson/{lId}/cancel/pupil/{pId}/approve': {
    post: operations['TeacherLessonController_approveRequestCancelLesson'];
  };
  '/teacher/cohort/{id}/details': {
    get: operations['TeacherCohortController_getCohortsDetails'];
  };
  '/teacher/cohort/{id}/pupils': {
    get: operations['TeacherCohortController_getPupilsOfCohort'];
    patch: operations['TeacherCohortController_addPupilsToCohort'];
  };
  '/teacher/cohort/{id}/funding': {
    get: operations['TeacherCohortController_getFundingOfCohort'];
  };
  '/teacher/cohort/approved': {
    get: operations['TeacherCohortController_getApprovedTutors'];
  };
  '/teacher/cohort/reviewed': {
    get: operations['TeacherCohortController_getReviewedTutors'];
  };
  '/teacher/cohort/{id}/lesson/completed': {
    get: operations['TeacherCohortController_getLesson'];
  };
  '/teacher/cohort/{id}/pupils/all': {
    get: operations['TeacherCohortController_getAllPupils'];
  };
  '/teacher/cohort/{id}/pupils/registered': {
    get: operations['TeacherCohortController_getPupilsName'];
  };
  '/teacher/cohort': {
    get: operations['TeacherCohortController_getTeacherCohorts'];
  };
  '/teacher/cohort/{cid}/pupil/{pid}/details': {
    get: operations['TeacherCohortController_getPupilDetails'];
  };
  '/teacher/cohort/{cid}/pupil/{pid}/lesson-requested': {
    get: operations['TeacherCohortController_getPupilRequestedLessons'];
  };
  '/teacher/cohort/{cid}/pupil/{pid}/lesson-completed': {
    get: operations['TeacherCohortController_getPupilCompletedLessons'];
  };
  '/teacher/cohort/{cid}/pupil/{pid}/lesson-scheduled': {
    get: operations['TeacherCohortController_getPupilScheduledLessons'];
  };
  '/teacher/cohort/pupil/{id}/parents': {
    get: operations['TeacherCohortController_getRegisteredPupilParents'];
  };
  '/teacher/cohort/parents': {
    get: operations['TeacherCohortController_getRegisteredParents'];
  };
  '/teacher/cohort/parent/{parentId}/details': {
    get: operations['TeacherCohortController_getDetails'];
  };
  '/teacher/statistic': {
    get: operations['TeacherStatisticController_getSchoolStatistic'];
  };
  '/legals/published': {
    get: operations['LegalsController_getLegalByTypeSummery'];
  };
  '/auth/login': {
    post: operations['AuthController_login'];
  };
  '/auth/signup/student': {
    post: operations['AuthController_signUpStudent'];
  };
  '/auth/signup/tutor': {
    post: operations['AuthController_signUpTutor'];
  };
  '/auth/verification-email/resend': {
    post: operations['AuthController_resendVerificationEmail'];
  };
  '/auth/verification-email/verify': {
    patch: operations['AuthController_verifyEmail'];
  };
  '/auth/verification-new-email/verify': {
    post: operations['AuthController_verifyNewEmail'];
  };
  '/auth/verification-email/update': {
    patch: operations['AuthController_updateEmail'];
  };
  '/auth/check-email-verified': {
    post: operations['AuthController_isEmailVerified'];
  };
  '/auth/password/forget': {
    get: operations['AuthController_verifyChangePasswordToken'];
    post: operations['AuthController_changePassword'];
  };
  '/auth/password/update': {
    patch: operations['AuthController_updatePassword'];
  };
  '/auth/complete-invitation': {
    post: operations['AuthController_completeInvitation'];
  };
  '/auth/admin/complete-invitation': {
    post: operations['AuthController_completeAdminInvitation'];
  };
  '/auth/signup/school': {
    post: operations['AuthController_signUpSchool'];
  };
  '/auth/new/password': {
    patch: operations['AuthController_newPassword'];
  };
  '/auth/logout/device': {
    post: operations['AuthController_logoutOneDevice'];
  };
  '/auth/logout/device/all': {
    post: operations['AuthController_logoutAllDevices'];
  };
  '/lesson-room/pupil/lesson/{id}': {
    get: operations['LessonRoomPupilController_getLessonDetails'];
  };
  '/lesson-room/pupil/lesson/{id}/access': {
    get: operations['LessonRoomPupilController_canAccessRoom'];
  };
  '/lesson-room/pupil/lesson/{id}/join': {
    get: operations['LessonRoomPupilController_joinClass'];
  };
  '/lesson-room/pupil/lesson/{id}/leave': {
    put: operations['LessonRoomPupilController_leaveClass'];
  };
  '/lesson-room/pupil/lesson/{id}/chats': {
    get: operations['LessonRoomPupilController_getLessonChatsHistory'];
  };
  '/lesson-room/pupil/lesson/{id}/files': {
    get: operations['LessonRoomPupilController_getLessonChatsFilesHistory'];
  };
  '/lesson-room/pupil/lesson/{id}/participants': {
    get: operations['LessonRoomPupilController_getLessonParticipants'];
  };
  '/lesson-room/pupil/lesson/{id}/file/add': {
    post: operations['LessonRoomPupilController_addFile'];
  };
  '/lesson-room/tutor/lesson/{id}': {
    get: operations['LessonRoomTutorController_getLessonDetails'];
  };
  '/lesson-room/tutor/lesson/{id}/access': {
    get: operations['LessonRoomTutorController_canAccessRoom'];
  };
  '/lesson-room/tutor/lesson/{id}/join': {
    get: operations['LessonRoomTutorController_joinClass'];
  };
  '/lesson-room/tutor/lesson/{id}/leave': {
    put: operations['LessonRoomTutorController_leaveClass'];
  };
  '/lesson-room/tutor/lesson/{id}/file/add': {
    post: operations['LessonRoomTutorController_addFile'];
  };
  '/lesson-room/tutor/lesson/{id}/chats': {
    get: operations['LessonRoomTutorController_getLessonChatsHistory'];
  };
  '/lesson-room/tutor/lesson/{id}/files': {
    get: operations['LessonRoomTutorController_getLessonChatFiles'];
  };
  '/lesson-room/tutor/lesson/{id}/participants': {
    get: operations['LessonRoomTutorController_getLessonParticipants'];
  };
  '/lesson-room/tutor/lesson/{id}/breakdown': {
    get: operations['LessonRoomTutorController_getLessonBreakdown'];
  };
  '/lesson-room/tutor/lesson/{id}/rate': {
    post: operations['LessonRoomTutorController_saveLessonBreakdown'];
  };
  '/lesson/{id}/whiteboard': {
    get: operations['LessonWhiteboardController_getLessonWhiteboards'];
    post: operations['LessonWhiteboardController_saveLessonWhiteboard'];
  };
  '/lesson/whiteboard/{id}': {
    get: operations['LessonWhiteboardController_getWhiteboardPicture'];
  };
  '/seeds/run-94da39e2-7814-47c8-9534-a2800b2874a6': {
    get: operations['SeedsController_getAllRoles'];
  };
  '/pupils/home': {
    get: operations['PupilsController_getHome'];
  };
  '/pupils/lesson': {
    get: operations['PupilsController_getLesson'];
  };
  '/pupils/lesson/{lessonId}': {
    get: operations['PupilsController_getLessonDetail'];
  };
  '/pupils/profile': {
    get: operations['PupilsController_getProfileDetails'];
  };
  '/pupils/lesson/{lessonId}/review': {
    get: operations['PupilsController_getLessonInfoForReview'];
  };
  '/pupils/review/{lessonId}': {
    post: operations['PupilsController_savePupilReview'];
  };
  '/pupils/lesson/{id}/details': {
    get: operations['PupilLessonController_getDetails'];
  };
  '/pupils/lesson/{id}/agreements': {
    get: operations['PupilLessonController_getAgreements'];
  };
  '/pupils/lesson/{id}/attachments': {
    get: operations['PupilLessonController_getAttachments'];
  };
  '/pupils/lesson/{id}/room/chats': {
    get: operations['PupilLessonController_getRoomChats'];
  };
  '/pupils/lesson/{id}/room/reviews': {
    get: operations['PupilLessonController_getLessonReview'];
  };
  '/pupils/lesson/{lessonId}/files': {
    get: operations['PupilLessonController_getLessonChatFile'];
  };
  '/pupils/lesson/{chatAttachmentId}/downloadChatAttachment': {
    get: operations['PupilLessonController_downloadChatAttachment'];
  };
  '/pupils/lesson/{attachmentManagerId}/downloadAttachmentManager': {
    get: operations['PupilLessonController_downloadAttachData'];
  };
  '/pupils/lesson/{id}/cancel': {
    post: operations['PupilLessonController_requestCancelLesson'];
  };
  '/parent/association': {
    get: operations['ParentalAssociationController_getAllAssociation'];
    post: operations['ParentalAssociationController_createNewAssociation'];
  };
  '/parent/pupil/link': {
    post: operations['PupilParentController_linkPupilAndParent'];
  };
  '/parent/pupil': {
    get: operations['PupilParentController_getAllParents'];
  };
  '/admin/audit': {
    get: operations['AdminAuditController_getAdminAudit'];
    post: operations['AdminAuditController_saveAudit'];
  };
}

export interface components {
  schemas: {
    NotificationOutputDto: {
      id: number;
      /** @enum {string} */
      eventType:
        | 'User_Registered'
        | 'USER_CHANGE_EMAIL'
        | 'User_Reset_password'
        | 'New_Chat_Message'
        | 'Pupil_Invited_Knektu'
        | 'Pupil_Lesson_Requested'
        | 'Pupil_Lesson_Scheduled'
        | 'Pupil_Lesson_Cancelled'
        | 'Pupil_Lesson_Edited'
        | 'Pupil_Added_Parent'
        | 'Pupil_Invited_Cohort'
        | 'Teacher_Lesson_Requested'
        | 'Teacher_Lesson_Booked'
        | 'Teacher_Lesson_Cancelled'
        | 'Teacher_Lesson_Completed'
        | 'Teacher_Lesson_Edited'
        | 'Teacher_Messages_Required'
        | 'Teacher_Messages_Scheduled'
        | 'Teacher_Cohort_Pupil_Added'
        | 'Admin_Tutor_Registration'
        | 'Admin_School_Registration'
        | 'Admin_Tutor_Document_Uploaded'
        | 'Admin_Tutor_Document_Approved'
        | 'Admin_Tutor_Rejected'
        | 'Admin_User_Invited'
        | 'School_Lesson_Requested'
        | 'School_Lesson_Booked'
        | 'School_Lesson_Cancelled'
        | 'School_Lesson_Completed'
        | 'School_Lesson_Edited'
        | 'School_Messages_Required'
        | 'School_Messages_scheduled'
        | 'School_Messages_Agreement'
        | 'School_User_Uploaded'
        | 'School_User_Removed'
        | 'School_User_Invited'
        | 'School_Cohort_Pupil_Added'
        | 'Tutor_Documents_Uploaded'
        | 'Tutor_Documents_Rejected'
        | 'Tutor_Documents_Approved'
        | 'Tutor_Documents_Expired'
        | 'Tutor_Lesson_Requested'
        | 'Tutor_Lesson_Scheduled'
        | 'Tutor_Lesson_Cancelled'
        | 'Tutor_Lesson_Edited'
        | 'Tutor_Lesson_Reminder'
        | 'Tutor_Message_Requested'
        | 'Tutor_Message_Scheduled'
        | 'Tutor_Message_Agreement';
      title: string;
      summary: string;
      link: string;
      extraData: string;
      /** Format: date-time */
      readAt: string;
      /** Format: date-time */
      createdAt: string;
    };
    MetaDto: {
      unreadCount: number;
      itemCount: number;
      totalItems: number;
      itemsPerPage: number;
      totalPages: number;
      currentPage: number;
    };
    PaginateNotificationOutputDto: {
      items: components['schemas']['NotificationOutputDto'][];
      meta: components['schemas']['MetaDto'];
    };
    PermissionDto: {
      id: number;
      title: string;
    };
    userRolePermissionsDto: {
      userId: number;
      roleId: number;
      permissionId: number;
      hasPermission: boolean;
      permission: components['schemas']['PermissionDto'];
    };
    RoleDto: {
      id: number;
      title: string;
      userRolePermissions: components['schemas']['userRolePermissionsDto'][];
    };
    UserDocumentOutputDto: {
      id: number;
      description: string;
      /** @enum {string} */
      documentType: 'DFE' | 'DBS' | 'PROOFOFID' | 'BIO' | 'PROFILE_PICTURE';
      isRemoved: boolean;
      /** @enum {string} */
      status: 'Waiting' | 'Approved' | 'Expired' | 'Consider' | 'Rejected' | 'Replaced';
    };
    SchoolTitleOutputDto: {
      id: number;
      title: string;
    };
    UserWithProfilePictureDto: {
      id: number;
      guid: string;
      roles: components['schemas']['RoleDto'][];
      email: string;
      phone: string;
      tempEmail: string;
      firstName: string;
      lastName: string;
      fullName: string;
      /** Format: date-time */
      birthedAt: string;
      /** Format: date-time */
      lastLoginAt: string;
      /** Format: date-time */
      lastFailureLoginAt: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      emailVerifiedAt: string;
      isEmailVerified: boolean;
      documents: components['schemas']['UserDocumentOutputDto'][];
      /** Format: date-time */
      viewTutorAdminStatusAt: string;
      /** @enum {string} */
      processStatus: 'Incomplete' | 'Awaiting_review' | 'Rejected' | 'Approved';
      /** @enum {string} */
      tutorAdminStatus: 'APPROVED' | 'REJECTED' | 'SUSPENDED' | 'PENDING';
      schoolSetup: boolean;
      school: components['schemas']['SchoolTitleOutputDto'];
    };
    UpdatePasswordInputDto: {
      password: string;
    };
    RequestDeleteAccountInputDto: {
      password: string;
    };
    RequestDeleteAccountOutputDto: {
      message: string;
    };
    UpdateReceivedMarketingEmailInputDto: {
      isReceivedMarketingEmail: boolean;
    };
    UserDeviceDto: {
      deviceToken: string;
      /** @enum {string} */
      deviceType: 'WEB' | 'ANDROID' | 'IOS';
    };
    AddDeviceInputDto: {
      deviceToken: string;
      /** @enum {string} */
      deviceType: 'WEB' | 'ANDROID' | 'IOS';
    };
    LinkAccountInputDto: {
      /** @description User Id */
      id: number;
    };
    HttpResponseDto: {
      status: number;
      message: string;
      data?: { [key: string]: unknown };
    };
    RoleOutputDto: {
      id: number;
      title: string;
      userRolePermissions: components['schemas']['userRolePermissionsDto'][];
    };
    LinkedAccountsOutputDto: {
      id: number;
      fullName: string;
      roles: components['schemas']['RoleOutputDto'][];
      email: string;
    };
    UpdateTutorDto: {
      firstName?: string;
      lastName?: string;
      /** Format: date-time */
      birthedAt?: string;
      teachingStatusId?: number;
      mainSubjectId?: number;
      schoolId?: number;
      additionalSubjectIds?: number[];
      keyStageLevelIds?: number[];
    };
    TutorBioOutputDto: {
      bio: string;
    };
    BioTutorInputDto: {
      bio: string;
    };
    KeyStageLevelOutputDto: {
      id: number;
      title: string;
    };
    UserKeyStageLevelOutputDto: {
      keyStageLevel: components['schemas']['KeyStageLevelOutputDto'];
    };
    SubjectDto: {
      id: number;
      title: string;
    };
    GetSchoolOutputDto: {
      id: number;
      title: string;
      email?: string;
      website?: string;
      telephone?: string;
    };
    TeachingStatusDto: {
      id: number;
      title: string;
      isSchoolRequired: boolean;
    };
    UserTempDataOutputDto: {
      id: number;
      value: string;
      /** @enum {string} */
      key: 'NEW_EMAIL';
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      expiredAt: string;
    };
    TutorDetailOutputDto: {
      id: number;
      firstName: string;
      lastName: string;
      email: string;
      /** Format: date-time */
      birthedAt: string;
      documents: components['schemas']['UserDocumentOutputDto'][];
      userKeyStageLevelTutorTeacher: components['schemas']['UserKeyStageLevelOutputDto'][];
      mainSubject: components['schemas']['SubjectDto'];
      school: components['schemas']['GetSchoolOutputDto'];
      teachingStatus: components['schemas']['TeachingStatusDto'];
      additionalSubjects: components['schemas']['SubjectDto'][];
      tempData?: components['schemas']['UserTempDataOutputDto'][];
      newEmail?: string;
    };
    SubjectTitleDto: {
      id: number;
      title: string;
    };
    UserProfileOutputDto: {
      id: number;
      fullName: string;
    };
    RegistrationStudentProfileOutputDto: {
      id: number;
      studentUser: components['schemas']['UserProfileOutputDto'];
    };
    SchoolProfileOutputDto: {
      id: number;
      title: string;
    };
    CohortSchoolOutputDto: {
      id: number;
      name: string;
      school: components['schemas']['SchoolProfileOutputDto'];
    };
    LessonHomeTutorOutputDto: {
      id: number;
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      subject?: components['schemas']['SubjectTitleDto'];
      registrations: components['schemas']['RegistrationStudentProfileOutputDto'][];
      /** Format: date-time */
      scheduleStartedAt: string;
      /** Format: date-time */
      createdAt: string;
      keyStageLevelId: number;
      duration: number;
      price: number;
      cohort?: components['schemas']['CohortSchoolOutputDto'];
      lessonChatCount?: number;
    };
    GetStatusOutputResponseDto: {
      isOnline: boolean;
      /** Format: date-time */
      expiredAt: string;
      onlineTimeInSeconds?: number;
    };
    TutorHomeOutputDto: {
      requestedLessons: components['schemas']['LessonHomeTutorOutputDto'][];
      scheduledLessons: components['schemas']['LessonHomeTutorOutputDto'][];
      tutorState: components['schemas']['GetStatusOutputResponseDto'];
    };
    NewEmailInputDto: {
      email: string;
    };
    TutorLessonOutputDto: {
      id: number;
      tutorLessonId: number;
      price: number;
      capacity: number;
      availability: number;
    };
    DiaryDetailDto: {
      id: number;
      durations: number;
      lesson: components['schemas']['TutorLessonOutputDto'];
    };
    TutorsLessonDiaryListOutputDto: {
      id: number;
      /** @enum {string} */
      type: 'AVAILABILITY' | 'SMALL_GROUP' | 'LARGE_GROUP';
      /** @enum {string} */
      groupType: 'SINGLE' | 'SERIES';
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      /** @enum {string} */
      repeatType: 'CUSTOM' | 'DAILY' | 'WEEKLY';
      durations: number;
      active: boolean;
      diaryDetails: components['schemas']['DiaryDetailDto'][];
    };
    PaginationMeta: {
      itemCount: number;
      totalItems: number;
      itemsPerPage: number;
      totalPages: number;
      currentPage: number;
    };
    SearchTutorLessonDiaryOutputPaginationDto: {
      items: components['schemas']['TutorsLessonDiaryListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    LessonDiaryListOutputDto: {
      id: number;
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      startTime: string;
      endTime: string;
      /** @enum {string} */
      repeatType: 'CUSTOM' | 'DAILY' | 'WEEKLY';
      active: boolean;
      /** @enum {string} */
      status: 'Active' | 'Paused';
      durations: number;
      numberOfBookedDiaryDetail: number;
      numberOfRemainedDiaryDetail: number;
      numberOfDistinctLesson: number;
      numberOfDiaryDetailAsDuration: number;
      /** @enum {string} */
      type: 'AVAILABILITY' | 'SMALL_GROUP' | 'LARGE_GROUP';
    };
    SearchLessonDiaryOutputPaginationDto: {
      items: components['schemas']['LessonDiaryListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    DiaryDetailLessonOutputDto: {
      id: number;
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      /** @enum {string} */
      repeatType: 'CUSTOM' | 'DAILY' | 'WEEKLY';
      /** @enum {string} */
      status: 'Active' | 'Paused';
      totalLesson?: number;
      durations: number;
      startTime: string;
      endTime: string;
    };
    TutorDiaryUpdateStatusDto: {
      /** @enum {string} */
      diaryStatus: 'Active' | 'Paused';
    };
    TutorDiarySuccessMessageDto: {
      message: string;
    };
    TutorDiaryDetailOutputDto: {
      id: number;
      lessonId: number;
      /** Format: date-time */
      date: string;
      startTime: string;
      endTime: string;
      durations: number;
      weekDay: number;
      lessonTitle: string;
      lessonDescription: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    TutorUpdateDiaryAvailabilityDto: {
      /** @description If the user deleted that, send this field with a 0 value */
      startTime: string;
      /**
       * test
       * @description If the user deleted that, send this field with a 0 value
       */
      endTime: string;
      id: number;
    };
    TutorUpdateDiaryAvailabilityInputDto: {
      availability: components['schemas']['TutorUpdateDiaryAvailabilityDto'][];
    };
    TutorDiaryForEdit: {
      id: number;
      /** Format: date-time */
      startDate?: string;
      startTime: string;
      endTime: string;
      /** @enum {string} */
      repeatType?: 'CUSTOM' | 'DAILY' | 'WEEKLY';
      /** Format: date-time */
      endDate?: string;
    };
    DiaryDetailsAvailabilityInputDto: {
      /** Format: date-time */
      date: string;
    };
    DiariesTutorsCreateAvailabilityInputDto: {
      /** @enum {string} */
      repeatType?: 'CUSTOM' | 'DAILY' | 'WEEKLY';
      /** @enum {string} */
      type?: 'AVAILABILITY' | 'SMALL_GROUP' | 'LARGE_GROUP';
      /** Format: date-time */
      endDate?: string;
      /** Format: date-time */
      startDate: string;
      startTime: string;
      endTime: string;
      activeAvailableNowMode: boolean;
      /** @enum {string} */
      status: 'Active' | 'Paused';
      diaryDetails?: components['schemas']['DiaryDetailsAvailabilityInputDto'][];
    };
    LessonResponseOutputDto: {
      message: string;
    };
    LessonReasonDeclinedDto: {
      reason: string;
    };
    UserFullNameOutputDto: {
      id: number;
      fullName?: string;
    };
    CohortNameOutputDto: {
      id: number;
      name: string;
      lead?: components['schemas']['UserFullNameOutputDto'];
      school?: components['schemas']['SchoolTitleOutputDto'];
    };
    StudentRegistrationOutputDto: {
      studentUser: components['schemas']['UserFullNameOutputDto'];
    };
    LessonAgreementOutputDto: {
      curriculumContentAgreed?: boolean;
      curriculumContentText?: string;
      knowledgeGapRequirementsAgreed?: boolean;
      knowledgeGapRequirementsText?: string;
      setTestAgreed?: boolean;
      setTestText?: string;
      setHomeWorksAgreed?: boolean;
      setHomeWorksText?: string;
      additionalCommentsAgreed?: boolean;
      additionalCommentsText?: string;
    };
    AttachedDataDto: {
      id: number;
      title: string;
      link: string;
      fileName?: string;
      /** @enum {string} */
      attachmentType: 'File' | 'Link';
      /** @enum {string} */
      attachmentCategory: 'CurriculumContents' | 'KnowledgeGapRequirements' | 'SetHomework' | 'SetTest';
    };
    AttachmentManagerOutputDto: {
      id: number;
      uid: string;
      attachedData: components['schemas']['AttachedDataDto'];
    };
    TutorCompletedLessonDetailOutputDto: {
      id: number;
      tutorUser: components['schemas']['UserFullNameOutputDto'];
      cohort: components['schemas']['CohortNameOutputDto'];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectTitleDto'];
      keyStageLevel: components['schemas']['KeyStageLevelOutputDto'];
      /** Format: date-time */
      scheduleStartedAt: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      realStartedAt: string;
      /** Format: date-time */
      realFinishedAt: string;
      duration: number;
      price: number;
      pupilsCount?: number;
      registrations: components['schemas']['StudentRegistrationOutputDto'][];
      messageToTutor?: string;
      agreement?: components['schemas']['LessonAgreementOutputDto'];
      attachmentManagers: components['schemas']['AttachmentManagerOutputDto'][];
    };
    TutorLessonPriceSummary: {
      /** Format: date-time */
      startTime: string;
      duration: number;
      realDuration: number;
      lessonCost: number;
      knektuCharge: number;
      totalEarning: number;
    };
    AttachmentsChatOutputDto: {
      id: number;
      mimetype: string;
      format: string;
      fileName: string;
    };
    LessonChatMessageOutputDto: {
      id: number;
      message: string;
      /** @enum {string} */
      whoSentMsg: 'Tutor' | 'Cohort-lead' | 'School' | 'Pupil';
      seen: boolean;
      sendUser: components['schemas']['UserProfileOutputDto'];
      recvUser: components['schemas']['UserProfileOutputDto'];
      attachments: components['schemas']['AttachmentsChatOutputDto'][];
      /** Format: date-time */
      msgSeenAt: string;
      /** Format: date-time */
      createdAt: string;
    };
    LessonChatFilesOutputDto: {
      id: number;
      /** @enum {string} */
      whoSentMsg: 'Tutor' | 'Cohort-lead' | 'School' | 'Pupil';
      attachments: components['schemas']['AttachmentsChatOutputDto'][];
      seen: boolean;
      sendUser: components['schemas']['UserProfileOutputDto'];
      recvUser: components['schemas']['UserProfileOutputDto'];
      /** Format: date-time */
      msgSeenAt: string;
      /** Format: date-time */
      createdAt: string;
    };
    TutorLessonReviewsOutputDto: {
      id: number;
      comment: string;
      tutorStars: number;
      qualityStars: number;
      studentUser: components['schemas']['UserProfileOutputDto'];
    };
    LessonReviewsOutputDto: {
      count: number;
      average: number;
      reviews: components['schemas']['AdminLessonReviewsOutputDto'][];
    };
    LessonChatOutputDto: {
      id: number;
      message: string;
      /** @enum {string} */
      whoSentMsg: 'Tutor' | 'Cohort-lead' | 'School' | 'Pupil';
      attachments: components['schemas']['AttachmentsChatOutputDto'][];
      seen: boolean;
      sendUser: components['schemas']['UserProfileOutputDto'];
      recvUser: components['schemas']['UserProfileOutputDto'];
      /** Format: date-time */
      msgSeenAt: string;
      /** Format: date-time */
      createdAt: string;
    };
    SchoolInfoOutputDto: {
      id: number;
      title: string;
      picture: string;
      userAuthorityDetail: components['schemas']['UserFullNameOutputDto'];
    };
    TutorSchoolAgreementOutputDto: {
      id: number;
      pricing30Min: number;
      pricing60Min: number;
      curriculumContentAgreed: boolean;
      curriculumContentText: string;
      knowledgeGapRequirementsAgreed: boolean;
      knowledgeGapRequirementsText: string;
      setTestAgreed: boolean;
      setTestText: string;
      setHomeWorksAgreed: boolean;
      setHomeWorksText: string;
      additionalCommentsAgreed: boolean;
      additionalCommentsText: string;
      /** @enum {string} */
      status: 'In Process' | 'Reviewed' | 'Approved' | 'Delisted';
      /** @enum {string} */
      requestStatus: 'Created' | 'Pending' | 'Declined' | 'Canceled' | 'Completed' | 'Accepted';
      lessonChats: components['schemas']['LessonChatOutputDto'][];
      school: components['schemas']['SchoolInfoOutputDto'];
    };
    TutorSchoolAgreementInfoOutputDto: {
      /** Format: date-time */
      tutorAgreementApprovedAt: string;
      schoolTitle: string;
      schoolAddress: string;
      schoolOwner: string;
      schoolPicture: string;
      pricing30Min: number;
      pricing60Min: number;
      curriculumContentAgreed: boolean;
      curriculumContentText: string;
      knowledgeGapRequirementsAgreed: boolean;
      knowledgeGapRequirementsText: string;
      setTestAgreed: boolean;
      setTestText: string;
      setHomeWorksAgreed: boolean;
      setHomeWorksText: string;
      additionalCommentsAgreed: boolean;
      additionalCommentsText: string;
      lessonCompleted: number;
      hoursTaught: number;
      pupilsTaught: number;
      repeatedPupils: number;
    };
    TutorsOnlineDto: {
      minutes: number;
    };
    TutorOnlineOutputStatusDto: {
      status: boolean;
    };
    PriceRatesDto: {
      availableNow: number;
      oneToOne30min: number;
      oneToOne60min: number;
      smallGroup30min: number;
      smallGroup60min: number;
      largeGroup30min: number;
      largeGroup60min: number;
      school30min: number;
      school60min: number;
    };
    SchoolOutputDto: {
      title: string;
      county: string;
      town: string;
    };
    RequesterOutputDto: {
      fullName: string;
      school: components['schemas']['SchoolOutputDto'];
    };
    TutorApprovalOutputDto: {
      id: number;
      schoolId: number;
      requesterUser: components['schemas']['RequesterOutputDto'];
      /** @enum {string} */
      tutorSideStatus?:
        | 'Awaiting'
        | 'Approve Requirement'
        | 'Declined requirements'
        | 'Canceled'
        | 'Completed'
        | 'Accepted';
      chatCount?: number;
      /** Format: date-time */
      requestAt: string;
    };
    SearchTutorApprovalOutputPaginationDto: {
      items: components['schemas']['TutorApprovalOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    TutorReviewedOutputDto: {
      id: number;
      schoolId: number;
      requesterUser: components['schemas']['RequesterOutputDto'];
      completedLessons: number;
      /** Format: date-time */
      reviewedAt: string;
    };
    SearchTutorReviewedOutputPaginationDto: {
      items: components['schemas']['TutorReviewedOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    TutorApprovedOutputDto: {
      id: number;
      schoolId: number;
      requesterUser: components['schemas']['RequesterOutputDto'];
      completedLessons: number;
      /** @enum {string} */
      tutorSideStatus?:
        | 'Awaiting'
        | 'Approve Requirement'
        | 'Declined requirements'
        | 'Canceled'
        | 'Completed'
        | 'Accepted';
      chatCount?: number;
      /** Format: date-time */
      approvedAt: string;
    };
    SearchTutorApprovedOutputPaginationDto: {
      items: components['schemas']['TutorApprovedOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    TutorDocumentsOutputDto: {
      id: number;
      /** @enum {string} */
      documentType: 'DFE' | 'DBS' | 'PROOFOFID' | 'BIO' | 'PROFILE_PICTURE';
      /** @enum {string} */
      status: 'Waiting' | 'Approved' | 'Expired' | 'Consider' | 'Rejected' | 'Replaced';
      /** @enum {string} */
      rejectedReason: 'WRONG' | 'UNCLEAR' | 'FAKE' | 'ETC';
      rejectedDescription: string;
      /** Format: date-time */
      reviewedAt: string;
      extraData: { [key: string]: unknown };
      reviewedBy: components['schemas']['UserFullNameOutputDto'];
    };
    DocumentSimpleStates: {
      id: number;
      /** @enum {string} */
      documentType: 'DFE' | 'DBS' | 'PROOFOFID' | 'BIO' | 'PROFILE_PICTURE';
      /** @enum {string} */
      status: 'Waiting' | 'Approved' | 'Expired' | 'Consider' | 'Rejected' | 'Replaced';
    };
    QualificationSimpleStates: {
      id: number;
      /** @enum {string} */
      state: 'Waiting' | 'Approved' | 'Expired' | 'Consider' | 'Rejected' | 'Replaced';
    };
    DocumentStatusOutputDto: {
      documents: components['schemas']['DocumentSimpleStates'][];
      qualifications: components['schemas']['QualificationSimpleStates'][];
      /** @enum {string} */
      status: 'APPROVED' | 'REJECTED' | 'SUSPENDED' | 'PENDING';
      /** @enum {string} */
      process: 'Incomplete' | 'Awaiting_review' | 'Rejected' | 'Approved';
    };
    TutorDocumentDfePutDto: {
      dfeNumber?: string;
    };
    TutorDocumentOutputStatus: {
      status: boolean;
    };
    TutorDocumentDbsPutDto: {
      dbsReferenceNumber?: string;
      /** Format: date-time */
      dbsExpiredAt?: string;
    };
    TutorQualificationOutputDto: {
      id: number;
      institution: string;
      qualification: string;
      level: string;
      order: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    TutorQualificationInputDto: {
      order?: number;
      institution: string;
      qualification: string;
      level: string;
    };
    TutorQualificationBulkInputDto: {
      items: components['schemas']['TutorQualificationInputDto'][];
    };
    TutorQualificationBulkOutputDto: {
      message: string;
    };
    TutorQualificationUpdateDto: {
      id?: number;
      order?: number;
      institution: string;
      qualification: string;
      level: string;
    };
    TutorQualificationBulkUpdateDto: {
      items: components['schemas']['TutorQualificationUpdateDto'][];
    };
    AdminsHomeMetaDataOutputDto: {
      pendingTutors: number;
      allTutors: number;
      allStudents: number;
      allSchools: number;
      completedLessons: number;
      missedLessons: number;
      liveLessons: number;
      bookedLessons: number;
      totalTimeCompleted: string;
    };
    AdminsUploadedFileOutputDto: {
      /** @default null */
      path: string;
      /** @default null */
      url: string;
      /** @default null */
      filename: string;
      /** @default null */
      originalname: string;
      /** @default null */
      mimetype: string;
      /** @default null */
      size: number;
    };
    AdminUserRolePermissionsDto: {
      permission: components['schemas']['PermissionDto'];
    };
    AdminViewRoleOutputDto: {
      id: number;
      title: string;
      userRolePermissions: components['schemas']['AdminUserRolePermissionsDto'][];
    };
    AdminUserListOutputDto: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      firstName: string;
      lastName: string;
      school: components['schemas']['SchoolTitleOutputDto'];
      email: string;
      roles: components['schemas']['AdminViewRoleOutputDto'][];
    };
    SearchAdminUserOutputPaginationDto: {
      items: components['schemas']['AdminUserListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    AddJobInputDto: {
      title: string;
    };
    JobOutputDto: {
      id: number;
      title: string;
    };
    AdminUserOutputDto: {
      id: number;
      firstName: string;
      lastName: string;
      email: string;
      /** Format: date-time */
      createdAt: string;
    };
    AdminUserRoles: {
      id: { [key: string]: unknown };
      title: string;
    };
    AdminUserSearchMeta: {
      roles: components['schemas']['AdminUserRoles'][];
    };
    AdminUserAddMeta: {
      roles: components['schemas']['AdminUserRoles'][];
    };
    KeyStageLevelDto: {
      id: number;
      title: string;
    };
    AdditionalNeedDto: {
      id: number;
      title: string;
      acrohnym: string;
    };
    UserDto: {
      id: number;
      guid: string;
      roles: components['schemas']['RoleDto'][];
      email: string;
      phone: string;
      tempEmail: string;
      firstName: string;
      lastName: string;
      fullName: string;
      /** Format: date-time */
      birthedAt: string;
      /** Format: date-time */
      lastLoginAt: string;
      /** Format: date-time */
      lastFailureLoginAt: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      emailVerifiedAt: string;
      isEmailVerified: boolean;
    };
    StudentsDto: {
      id: number;
      isReceiveFreeSchoolMeals: boolean;
      keyStageLevel: components['schemas']['KeyStageLevelDto'];
      additionalNeeds: components['schemas']['AdditionalNeedDto'][];
      user: components['schemas']['UserDto'];
    };
    GetUserInfoOutputDto: {
      id: number;
      guid: string;
      roles: components['schemas']['RoleDto'][];
      email: string;
      phone: string;
      tempEmail: string;
      firstName: string;
      lastName: string;
      fullName: string;
      /** Format: date-time */
      birthedAt: string;
      /** Format: date-time */
      lastLoginAt: string;
      /** Format: date-time */
      lastFailureLoginAt: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      emailVerifiedAt: string;
      isEmailVerified: boolean;
      documents: components['schemas']['UserDocumentOutputDto'][];
      /** Format: date-time */
      viewTutorAdminStatusAt: string;
      /** @enum {string} */
      processStatus: 'Incomplete' | 'Awaiting_review' | 'Rejected' | 'Approved';
      /** @enum {string} */
      tutorAdminStatus: 'APPROVED' | 'REJECTED' | 'SUSPENDED' | 'PENDING';
      schoolSetup: boolean;
      school: components['schemas']['SchoolTitleOutputDto'];
      studentId: number;
      tutorId: number;
      student: components['schemas']['StudentsDto'];
      isAllDocumentsApproved: boolean;
      isApproved: boolean;
    };
    UserSummaryOutputPaginationDto: {
      items: components['schemas']['GetUserInfoOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    VerifyNewUserDto: {
      token: string;
      password: string;
    };
    UpdateStatusDto: {
      /** @default 10 */
      limit: number;
      /** @default 1 */
      page: number;
      sort?: string;
      /** @enum {string} */
      order?: 'ASC' | 'DESC';
      /** @description search */
      search?: string;
      isActive: boolean;
    };
    AddParentInputDto: {
      firstName: string;
      lastName: string;
      email: string;
    };
    RoleTitleDto: {
      id: number;
      title: string;
    };
    AuditDto: {
      description: string;
      /** Format: date-time */
      createdAt: string;
    };
    AdminUserDetailOutputDto: {
      id: number;
      fullName: string;
      firstName: string;
      lastName: string;
      email: string;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      roles: components['schemas']['RoleTitleDto'][];
      audits: components['schemas']['AuditDto'][];
      job: components['schemas']['JobOutputDto'];
    };
    UserRoleOutputDto: {
      title: string;
    };
    KnektuUserListOutputDto: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      fullName: string;
      email: string;
      roles: components['schemas']['UserRoleOutputDto'][];
      job: components['schemas']['JobOutputDto'];
    };
    SearchKnektuUserOutputPaginationDto: {
      items: components['schemas']['KnektuUserListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    AddUserInputDto: {
      firstName: string;
      lastName: string;
      email: string;
      roles: number[];
      jobId: number;
    };
    UpdateUserInputDto: {
      firstName: string;
      lastName: string;
      email: string;
      roles: number[];
      jobId: number;
    };
    CreateRoleDto: {
      title: string;
      permissionIds: number[];
    };
    UpdateRoleDto: {
      title: string;
      permissionIds: number[];
    };
    AdminTutorLessonListOutputDto: {
      id: number;
      tutorLessonId: number;
      /** Format: date-time */
      scheduleStartedAt: string;
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject?: components['schemas']['SubjectTitleDto'];
      duration: number;
      registrations: components['schemas']['StudentRegistrationOutputDto'][];
      price: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
    };
    SearchTutorLessonOutputPaginationDto: {
      items: components['schemas']['TutorLessonListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    SchoolTitleTownOutputDto: {
      id: number;
      title: string;
      town: string;
    };
    AdminTutorSchoolsApprovalsListOutputDto: {
      id: number;
      /** Format: date-time */
      requestAt: string;
      /** Format: date-time */
      reviewedAt: string;
      /** Format: date-time */
      approvedAt: string;
      /** Format: date-time */
      createdAt: string;
      school: components['schemas']['SchoolTitleTownOutputDto'];
      requesterUser: components['schemas']['UserFullNameOutputDto'];
    };
    SearchTutorSchoolsApprovalsOutputPaginationDto: {
      items: components['schemas']['AdminTutorSchoolsApprovalsListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    AdminTeachersListPaginationDto: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      firstName: string;
      lastName: string;
      school: components['schemas']['SchoolTitleOutputDto'];
      email: string;
      cohorts: components['schemas']['CohortNameOutputDto'][];
      mainSubject: components['schemas']['SubjectTitleDto'];
    };
    SearchAdminTeachersListOutputPaginationDto: {
      items: components['schemas']['AdminTeachersListPaginationDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    AdminTeacherInfoOutputDto: {
      id: number;
      firstName: string;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      lastName: string;
      email: string;
      phone: string;
      /** Format: date-time */
      birthedAt: string;
      additionalSubjects: components['schemas']['SubjectTitleDto'][];
      userKeyStageLevelTutorTeacher: components['schemas']['UserKeyStageLevelOutputDto'][];
      cohorts: components['schemas']['CohortNameOutputDto'][];
    };
    UserAdditionalNeedDto: {
      id: number;
      additionalNeed: components['schemas']['AdditionalNeedDto'];
    };
    UserKeyStageLevelDto: {
      id: number;
      keyStageLevel: components['schemas']['KeyStageLevelDto'];
    };
    CohortDto: {
      id: number;
      name: string;
    };
    AdminPupilInfoOutputDto: {
      id: number;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      firstName: string;
      lastName: string;
      email: string;
      /** Format: date-time */
      createdAt: string;
      school: components['schemas']['SchoolTitleOutputDto'];
      userAdditionalNeedStudentPupil: components['schemas']['UserAdditionalNeedDto'][];
      userKeyStageLevelStudentPupil: components['schemas']['UserKeyStageLevelDto'][];
      cohortsPupil: components['schemas']['CohortDto'][];
      additionalSubjects: components['schemas']['SubjectDto'][];
      /** Format: date-time */
      birthedAt: string;
      freeSchoolMeal: boolean;
    };
    ParentShortOutputDto: {
      id: number;
      fullName: string;
      email: string;
      phone: string;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      parentAddressLine1: string;
      parentAddressLine2?: string;
      parentContactCity?: string;
      parentContactPostcode?: string;
      pupilsCount?: number;
    };
    PupilParentDetailsDto: {
      id: number;
      parent: components['schemas']['ParentShortOutputDto'];
      /** @enum {string} */
      association: 'Primary' | 'Secondary';
    };
    AdminTutorDocumentStateOutputDto: {
      id: number;
      /** @enum {string} */
      documentType: 'DFE' | 'DBS' | 'PROOFOFID' | 'BIO' | 'PROFILE_PICTURE';
      /** @enum {string} */
      status: 'Waiting' | 'Approved' | 'Expired' | 'Consider' | 'Rejected' | 'Replaced';
      /** Format: date-time */
      reviewedAt: string;
      rejectedDescription: string;
      /** @enum {string} */
      rejectedReason: 'WRONG' | 'UNCLEAR' | 'FAKE' | 'ETC';
      reviewedBy: components['schemas']['UserFullNameOutputDto'];
    };
    AdminTutorListOutputDto: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      fullName: string;
      mainSubject: components['schemas']['SubjectTitleDto'];
      additionalSubjects: components['schemas']['SubjectTitleDto'][];
      userKeyStageLevelTutorTeacher: components['schemas']['UserKeyStageLevelOutputDto'][];
      tutorQualifications: components['schemas']['TutorQualificationOutputDto'][];
      documents: components['schemas']['AdminTutorDocumentStateOutputDto'][];
      /** @enum {string} */
      processStatus: 'Incomplete' | 'Awaiting_review' | 'Rejected' | 'Approved';
      /** Format: date-time */
      tutorAdminApprovedAt: string;
      tutorAdminChangeStatusBy: components['schemas']['UserFullNameOutputDto'];
      tutorAdminRejectedDescription: string;
    };
    AdminTutorOutputPaginationDto: {
      items: components['schemas']['AdminTutorListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    TutorPriceRateOutputDto: {
      school60min: number;
      school30min: number;
      availableNow: number;
      oneToOne30min: number;
      oneToOne60min: number;
      smallGroup30min: number;
      smallGroup60min: number;
      largeGroup30min: number;
      largeGroup60min: number;
    };
    UserDocumentRejectedOutputDto: {
      id: number;
      description: string;
      /** @enum {string} */
      documentType: 'DFE' | 'DBS' | 'PROOFOFID' | 'BIO' | 'PROFILE_PICTURE';
      /** @enum {string} */
      status: 'Waiting' | 'Approved' | 'Expired' | 'Consider' | 'Rejected' | 'Replaced';
      rejectedDescription: string;
      /** @enum {string} */
      rejectedReason: 'WRONG' | 'UNCLEAR' | 'FAKE' | 'ETC';
      /** Format: date-time */
      reviewedAt: string;
      reviewedBy: components['schemas']['UserFullNameOutputDto'];
    };
    UserTutorProfileInfoOutputDto: {
      id: number;
      email: string;
      /** Format: date-time */
      birthedAt: string;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      /** @enum {string} */
      tutorAdminStatus: 'APPROVED' | 'REJECTED' | 'SUSPENDED' | 'PENDING';
      tutorAdminRejectedDescription: string;
      /** @enum {string} */
      tutorAdminRejectedReason: 'FAKE_DOCUMENT' | 'INCORRECT_INFORMATION' | 'ETC';
      fullName: string;
      mainSubject: components['schemas']['SubjectDto'];
      school: components['schemas']['GetSchoolOutputDto'];
      teachingStatus: components['schemas']['TeachingStatusDto'];
      priceRate: components['schemas']['TutorPriceRateOutputDto'];
      additionalSubjects: components['schemas']['SubjectDto'][];
      userKeyStageLevelTutorTeacher: components['schemas']['UserKeyStageLevelOutputDto'][];
      documents: components['schemas']['UserDocumentRejectedOutputDto'][];
    };
    TutorAcceptDocumentDto: {
      tutorUserId: number;
      /** @enum {string} */
      type: 'DFE' | 'DBS' | 'PROOFOFID' | 'BIO' | 'PROFILE_PICTURE';
    };
    TutorRejectDocumentDto: {
      rejectedDescription?: string;
      tutorUserId: number;
      /** @enum {string} */
      type: 'DFE' | 'DBS' | 'PROOFOFID' | 'BIO' | 'PROFILE_PICTURE';
      /** @enum {string} */
      rejectedReason: 'WRONG' | 'UNCLEAR' | 'FAKE' | 'ETC';
    };
    UserDocumentRejectDto: {
      rejectedDescription?: string;
      /** @enum {string} */
      rejectedReason: 'WRONG' | 'UNCLEAR' | 'FAKE' | 'ETC';
    };
    TutorRejectDto: {
      rejectedDescription?: string;
      /** @enum {string} */
      rejectedReason: 'FAKE_DOCUMENT' | 'INCORRECT_INFORMATION' | 'ETC';
    };
    RoleTitleOutputDto: {
      id: number;
      title: string;
    };
    SchoolStaffListOutputDto: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      firstName: string;
      lastName: string;
      school?: components['schemas']['SchoolTitleOutputDto'];
      email: string;
      /** Format: date-time */
      birthedAt: string;
      roles: components['schemas']['RoleTitleOutputDto'][];
    };
    SearchSchoolStaffOutputPaginationDto: {
      items: components['schemas']['SchoolStaffListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    SchoolsOutputDto: {
      id: number;
      title: string;
      fullName: string;
      ownerEmail: string;
      /** Format: date-time */
      createdAt: string;
      pupilCount: number;
      tutorCount: number;
      staffCount: number;
      cohortCount: number;
      lessonCompletedCount: number;
      totalSpend: number;
    };
    SchoolsOutputPaginationDto: {
      items: components['schemas']['SchoolsOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    SchoolStatusOutputDto: {
      id: number;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE';
    };
    SchoolTopupHistoryOutputDto: {
      id: number;
      amount: number;
      /** @enum {string} */
      type:
        | 'STUDENT_SELF_FUNDING_TOPUP'
        | 'STUDENT_TOPUP_BANK_TRANSFER'
        | 'STUDENT_LESSON_FEE_PAY_SELF_FUNDING'
        | 'STUDENT_LESSON_FEE_BACK_SELF_FUNDING'
        | 'TUTOR_LESSON_EARN'
        | 'TUTOR_WITHDRAW'
        | 'SCHOOL_TOPUP_CARD'
        | 'SCHOOL_TOPUP_BANK_TRANSFER'
        | 'SCHOOL_TOPUP_BY_ADMIN'
        | 'SCHOOL_ALLOCATE_TO_COHORT'
        | 'SCHOOL_TOPUP_BY_COHORT'
        | 'SCHOOL_COHORT_TOPUP'
        | 'SCHOOL_COHORT_DECREASE'
        | 'SCHOOL_COHORT_PAY_LESSON'
        | 'SCHOOL_COHORT_LESSON_FEE_BACK'
        | 'SYSTEM_LESSON_SHARE';
      stripePaymentStatus: string;
      stripeCardEndedWith: string;
      stripePaymentId: string;
      stripePaymentMethodId: string;
      /** Format: date-time */
      createdAt: string;
    };
    SchoolTopupHistoryPaginationOutputDto: {
      items: components['schemas']['SchoolTopupHistoryOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    CohortLeadSchoolTitleOutputDto: {
      id: number;
      name: string;
      lead: components['schemas']['UserFullNameOutputDto'];
      school: components['schemas']['SchoolTitleOutputDto'];
    };
    FundingTypeOutputDto: {
      id: number;
      name: string;
    };
    SchoolCohortAllocationsOutputDto: {
      id: number;
      amount: number;
      user: components['schemas']['UserFullNameOutputDto'];
      cohort: components['schemas']['CohortLeadSchoolTitleOutputDto'];
      fundingType: components['schemas']['FundingTypeOutputDto'];
      /** Format: date-time */
      createdAt: string;
    };
    PaginateSchoolCohortAllocationsOutputDto: {
      items: components['schemas']['SchoolCohortAllocationsOutputDto'][];
      meta: components['schemas']['MetaDto'];
    };
    ReviewSummaryTutorOutputDto: {
      id: number;
      averageStars: number;
      schoolsApproved: number;
      schoolsReviewed: number;
    };
    TutorAgreementOutputDto: {
      id: number;
      fullName: string;
      mainSubject: components['schemas']['SubjectTitleDto'];
      userKeyStageLevelTutorTeacher: components['schemas']['UserKeyStageLevelOutputDto'][];
      summary: components['schemas']['ReviewSummaryTutorOutputDto'];
    };
    SchoolTutorAgreementListOutput: {
      id: number;
      tutorUser: components['schemas']['TutorAgreementOutputDto'];
      pricing30Min: number;
      pricing60Min: number;
      /** @enum {string} */
      status: 'In Process' | 'Reviewed' | 'Approved' | 'Delisted';
    };
    SearchSchoolTutorAgreementOutputPaginationDto: {
      items: components['schemas']['SchoolTutorAgreementListOutput'][];
      meta: components['schemas']['PaginationMeta'];
    };
    AgreementPricingOutputDto: {
      id: number;
      pricing30Min: number;
      pricing60Min: number;
      /** @enum {string} */
      status: 'In Process' | 'Reviewed' | 'Approved' | 'Delisted';
      /** @enum {string} */
      requestStatus: 'Created' | 'Pending' | 'Declined' | 'Canceled' | 'Completed' | 'Accepted';
    };
    PriceRateDto: {
      school30min?: number;
      school60min?: number;
    };
    FindTutorsOutputDto: {
      id: number;
      fullName: string;
      mainSubject: components['schemas']['SubjectTitleDto'];
      additionalSubjects: components['schemas']['SubjectTitleDto'][];
      userKeyStageLevelTutorTeacher: components['schemas']['UserKeyStageLevelOutputDto'][];
      documents: components['schemas']['UserDocumentOutputDto'][];
      summary: components['schemas']['ReviewSummaryTutorOutputDto'];
      agreements: components['schemas']['AgreementPricingOutputDto'][];
      priceRate: components['schemas']['PriceRateDto'];
    };
    TutorProfileFullUserDto: {
      fullName: string;
      minCost: number;
      /** @enum {string} */
      tutorAdminStatus: 'APPROVED' | 'REJECTED' | 'SUSPENDED' | 'PENDING';
      profilePicture: string;
      maxCost: number;
      bio: string;
      /** Format: date-time */
      expiredAt: string;
      keyStageLevels: components['schemas']['KeyStageLevelDto'][];
      subjects: components['schemas']['SubjectDto'][];
    };
    TutorProfileFullQualificationDto: {
      institution: string;
      qualification: string;
      level: string;
      id: number;
    };
    TutorProfileFullDiaryDto: {
      id: number;
      diaryId: number;
      lessonId: number;
      /** Format: date-time */
      date: string;
      startTime: string;
      endTime: string;
      durations: number;
      weekDay: number;
    };
    TutorProfileFullOutputDto: {
      user: components['schemas']['TutorProfileFullUserDto'];
      qualifications: components['schemas']['TutorProfileFullQualificationDto'][];
      diaries: components['schemas']['TutorProfileFullDiaryDto'][];
      tutorAgreement: components['schemas']['AgreementPricingOutputDto'];
    };
    TopReviewsDto: {
      id: number;
      comment: string;
      userId: number;
      fullName: string;
      lessonId: number;
      tutorUserId: number;
      stars: number;
    };
    SummaryReviewsDto: {
      totalReviews: number;
      totalAverage: number;
    };
    TutorReviewOutputDto: {
      topReviews: components['schemas']['TopReviewsDto'][];
      summary: components['schemas']['SummaryReviewsDto'];
    };
    ReviewSummaryOutputDto: {
      id: number;
      averageStars: number;
      reviewersCount: number;
      hoursTaught: number;
      repeatedStudents: number;
      replyInHours: number;
      schoolsApproved: number;
      schoolsReviewed: number;
    };
    AgreementOutputDto: {
      id: number;
      pricing30Min: number;
      pricing60Min: number;
      /** @enum {string} */
      status: 'In Process' | 'Reviewed' | 'Approved' | 'Delisted';
      /** @enum {string} */
      requestStatus: 'Created' | 'Pending' | 'Declined' | 'Canceled' | 'Completed' | 'Accepted';
      curriculumContentAgreed: boolean;
      curriculumContentText: string;
      knowledgeGapRequirementsAgreed: boolean;
      knowledgeGapRequirementsText: string;
      setTestAgreed: boolean;
      setTestText: string;
      setHomeWorksAgreed: boolean;
      setHomeWorksText: string;
      additionalCommentsAgreed: boolean;
      additionalCommentsText: string;
    };
    PriceSummaryOutputDto: {
      duration: number;
      userAccounts: number;
      userAccountCharges: number;
      tutorPrice: number;
      KnektuCharge: number;
      totalPrice: number;
    };
    CohortLeadOutputDto: {
      id: number;
      name: string;
      lead: components['schemas']['UserFullNameOutputDto'];
    };
    SchoolLessonListOutput: {
      id: number;
      tutorLessonId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      scheduleStartedAt: string;
      cohort: components['schemas']['CohortLeadOutputDto'];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      registrations: components['schemas']['StudentRegistrationOutputDto'][];
      subject: components['schemas']['SubjectTitleDto'];
      duration: number;
      tutorUser: components['schemas']['UserProfileOutputDto'];
      price: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      /** @enum {string} */
      lessonState: 'REQUESTED' | 'SCHEDULED' | 'COMPLETED';
      lessonChatCount?: number;
    };
    SearchSchoolLessonsCohortOutputPaginationDto: {
      items: components['schemas']['SchoolLessonListOutput'][];
      meta: components['schemas']['PaginationMeta'];
    };
    LessonsGroupedByDate: {
      completedAt: string;
      lessons: number;
    };
    StatisticOutputDto: {
      chart: components['schemas']['LessonsGroupedByDate'][];
      cohorts: number;
      pupils: number;
      lessonsCompleted: number;
      lessonsMissed: number;
    };
    AdminLessonListOutputDto: {
      id: number;
      tutorLessonId: number;
      /** Format: date-time */
      scheduleStartedAt: string;
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectTitleDto'];
      duration: number;
      price: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      tutorUser: components['schemas']['UserFullNameOutputDto'];
      cohort: components['schemas']['CohortLeadSchoolTitleOutputDto'];
      registrations: components['schemas']['StudentRegistrationOutputDto'][];
    };
    AdminLessonOutputPaginationDto: {
      items: components['schemas']['AdminLessonListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    UserFullNameAdditionalNeedOutputDto: {
      id: number;
      fullName?: string;
      userAdditionalNeedStudentPupil: components['schemas']['UserAdditionalNeedDto'][];
    };
    RegistrationStudentPupilAdditionalOutputDto: {
      studentUser: components['schemas']['UserFullNameAdditionalNeedOutputDto'];
      /** @enum {string} */
      PupilDeclinedStatus?: 'Pending' | 'Accepted' | 'Rejected' | 'Canceled';
      /** Format: date-time */
      pupilDeclinedAt?: string;
      reasonDeclined?: string;
    };
    AdminLessonDetailOutputDto: {
      id: number;
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      /** @enum {string} */
      lessonState: 'REQUESTED' | 'SCHEDULED' | 'COMPLETED';
      duration: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      price: number;
      /** Format: date-time */
      canceledAt?: string;
      canceledBy: components['schemas']['UserFullNameOutputDto'];
      keyStageLevel: components['schemas']['KeyStageLevelOutputDto'];
      canceledReason: string;
      tutorUser: components['schemas']['UserFullNameOutputDto'];
      subject: components['schemas']['SubjectTitleDto'];
      lessonChats: components['schemas']['LessonChatOutputDto'][];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      realStartedAt: string;
      /** Format: date-time */
      realFinishedAt: string;
      /** Format: date-time */
      scheduleStartedAt?: string;
      /** Format: date-time */
      scheduleFinishedAt?: string;
      attachmentManagers: components['schemas']['AttachmentManagerOutputDto'][];
      registrations: components['schemas']['RegistrationStudentPupilAdditionalOutputDto'][];
    };
    AdminCompletedLessonDetailOutputDto: {
      id: number;
      tutorUser: components['schemas']['UserFullNameOutputDto'];
      cohort: components['schemas']['CohortNameOutputDto'];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectTitleDto'];
      keyStageLevel: components['schemas']['KeyStageLevelOutputDto'];
      /** Format: date-time */
      scheduleStartedAt: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      realStartedAt: string;
      /** Format: date-time */
      realFinishedAt: string;
      duration: number;
      price: number;
      pupilsCount?: number;
      registrations: components['schemas']['StudentRegistrationOutputDto'][];
      messageToTutor?: string;
      attachmentManagers: components['schemas']['AttachmentManagerOutputDto'][];
    };
    AdminLessonPriceSummary: {
      /** Format: date-time */
      startTime: string;
      duration: number;
      realDuration: number;
      userAccounts: number;
      userAccountCharges: number;
      tutorPrice: number;
      KnektuCharge: number;
      totalPrice: number;
    };
    AdminLessonReviewsOutputDto: {
      id: number;
      comment: string;
      tutorStars: number;
      qualityStars: number;
      studentUser: components['schemas']['UserProfileOutputDto'];
    };
    CohortPupilDto: {
      id: number;
      fullName: string;
    };
    CohortFundingTotalOutputDto: {
      cohortBalanceTotal: number;
      cohortBalanceAvailable: number;
    };
    AdminCohortsOutputDto: {
      id: number;
      name: string;
      /** Format: date-time */
      createdAt: string;
      lead: components['schemas']['UserFullNameOutputDto'];
      school: components['schemas']['SchoolTitleOutputDto'];
      pupilsCount?: number;
      subjects: components['schemas']['SubjectTitleDto'][];
      keyStageLevels: components['schemas']['KeyStageLevelOutputDto'][];
      pupils: components['schemas']['CohortPupilDto'][];
      funding: components['schemas']['CohortFundingTotalOutputDto'];
    };
    SearchAdminCohortOutputPaginationDto: {
      items: components['schemas']['AdminCohortsOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    CohortSubjectDto: {
      id: number;
      title: string;
    };
    CohortKeyStageDto: {
      id: number;
      title: string;
    };
    CohortFundingOutputDto: {
      fundingTypeId: number;
      fundingName: string;
      amount: number;
    };
    CohortLeadDto: {
      id: number;
      fullName: string;
    };
    CohortSingleOutputDto: {
      id: number;
      name: string;
      createdAt: { [key: string]: unknown };
      subjects: components['schemas']['CohortSubjectDto'][];
      keyStageLevels: components['schemas']['CohortKeyStageDto'][];
      pupils: components['schemas']['CohortPupilDto'][];
      fundingDetails: components['schemas']['CohortFundingOutputDto'][];
      fundingTotal: components['schemas']['CohortFundingTotalOutputDto'];
      lead: components['schemas']['CohortLeadDto'];
    };
    SchoolCohortPupilsListOutputDto: {
      id: number;
      fullName: string;
      email: string;
      /** @default 0 */
      amountUsed: number;
      /** Format: date-time */
      createdAt: string;
      /** @default 0 */
      lessonRequested: number;
      /** @default 0 */
      lessonScheduled: number;
      /** @default 0 */
      lessonCompleted: number;
      /** @default 0 */
      lessonMissed: number;
    };
    SearchCohortPupilsOutputPaginationDto: {
      items: components['schemas']['SchoolCohortPupilsListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    SchoolCohortsOutputDto: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      name: string;
      lead: components['schemas']['UserFullNameOutputDto'];
      pupils: components['schemas']['UserFullNameOutputDto'][];
      subjects: components['schemas']['SubjectTitleDto'][];
      keyStageLevels: components['schemas']['KeyStageLevelOutputDto'][];
      funding: components['schemas']['CohortFundingTotalOutputDto'];
    };
    SearchSchoolCohortOutputPaginationDto: {
      items: components['schemas']['SchoolCohortsOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    CohortNameWithPupilsOutputDto: {
      id: number;
      name: string;
    };
    CohortLessonChat: {
      message: string;
      /** @enum {string} */
      whoSentMsg: 'Tutor' | 'Cohort-lead' | 'School' | 'Pupil';
      attachments: components['schemas']['AttachmentsChatOutputDto'][];
      seen: boolean;
      sendUser: components['schemas']['UserProfileOutputDto'];
      recvUser: components['schemas']['UserProfileOutputDto'];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      msgSeenAt: string;
    };
    LessonDiaryDetailOutputDto: {
      diaryId: number;
    };
    CohortLessonDetailDto: {
      id: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      /** @enum {string} */
      lessonState: 'REQUESTED' | 'SCHEDULED' | 'COMPLETED';
      tutorLessonId: number;
      fundingTypeId: number;
      tutorUser: components['schemas']['UserProfileOutputDto'];
      user: components['schemas']['UserFullNameOutputDto'];
      cohort: components['schemas']['CohortNameWithPupilsOutputDto'];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectTitleDto'];
      keyStageLevel: components['schemas']['KeyStageLevelDto'];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      scheduleStartedAt: string;
      duration: number;
      price: number;
      lessonChats: components['schemas']['CohortLessonChat'][];
      registrations: components['schemas']['StudentRegistrationOutputDto'][];
      attachmentManagers: components['schemas']['AttachmentManagerOutputDto'][];
      agreement: components['schemas']['LessonAgreementOutputDto'];
      canceledBy: components['schemas']['UserProfileOutputDto'];
      /** Format: date-time */
      canceledAt: string;
      canceledReason: string;
      diaryDetails: components['schemas']['LessonDiaryDetailOutputDto'][];
    };
    RegisteredPupilsInCohortDto: {
      id: number;
      fullName: string;
    };
    PupilsOutputDto: {
      id: number;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      firstName: string;
      lastName: string;
      email: string;
      /** Format: date-time */
      createdAt: string;
      userAdditionalNeedStudentPupil: components['schemas']['UserAdditionalNeedDto'][];
      userKeyStageLevelStudentPupil: components['schemas']['UserKeyStageLevelDto'][];
      cohortsPupil: components['schemas']['CohortDto'][];
      additionalSubjects: components['schemas']['SubjectDto'][];
    };
    PupilsPaginationOutputDto: {
      items: components['schemas']['PupilsOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    SchoolPupilStatusDto: {
      id: number;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
    };
    PupilsOutputForEditDto: {
      id: number;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      firstName: string;
      lastName: string;
      email: string;
      /** Format: date-time */
      createdAt: string;
      userAdditionalNeedStudentPupil: components['schemas']['UserAdditionalNeedDto'][];
      userKeyStageLevelStudentPupil: components['schemas']['UserKeyStageLevelDto'][];
      cohortsPupil: components['schemas']['CohortDto'][];
      additionalSubjects: components['schemas']['SubjectDto'][];
      /** Format: date-time */
      birthedAt: string;
      freeSchoolMeal: boolean;
      tempData?: components['schemas']['UserTempDataOutputDto'][];
      newEmail?: string;
    };
    SchoolTeacherInfoOutputDto: {
      id: number;
      firstName: string;
      lastName: string;
      email: string;
      /** Format: date-time */
      birthedAt: string;
      additionalSubjects: components['schemas']['SubjectTitleDto'][];
      userKeyStageLevelTutorTeacher: components['schemas']['UserKeyStageLevelOutputDto'][];
      cohorts: components['schemas']['CohortNameOutputDto'][];
      tempData?: components['schemas']['UserTempDataOutputDto'][];
      newEmail?: string;
    };
    TeacherDetailOutputDto: {
      id: number;
      fullName: string;
      email: string;
      phone: string;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      /** Format: date-time */
      birthedAt: string;
      cohorts: components['schemas']['CohortNameOutputDto'][];
      additionalSubjects: components['schemas']['SubjectDto'][];
      userKeyStageLevelTutorTeacher: components['schemas']['UserKeyStageLevelOutputDto'][];
    };
    SchoolTeacherListOutputDto: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      firstName: string;
      lastName: string;
      email: string;
      roles: components['schemas']['RoleTitleOutputDto'][];
      cohorts: components['schemas']['CohortNameOutputDto'][];
      additionalSubjects: components['schemas']['SubjectTitleDto'][];
      userKeyStageLevelTutorTeacher: components['schemas']['UserKeyStageLevelOutputDto'][];
    };
    SearchSchoolTeacherOutputPaginationDto: {
      items: components['schemas']['SchoolTeacherListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    PermissionTitleOutputDto: {
      id: number;
      title: string;
    };
    UserRolePermissionOutputDto: {
      id: number;
      permission: components['schemas']['PermissionTitleOutputDto'];
    };
    SchoolRolesOutputDto: {
      id: number;
      title: string;
      userRolePermissions: components['schemas']['UserRolePermissionOutputDto'][];
      users: components['schemas']['UserFullNameOutputDto'][];
    };
    AssignedRolesOutputDto: {
      id: number;
      fullName: string;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      cohorts: components['schemas']['CohortNameOutputDto'][];
    };
    SchoolStaffInfoDto: {
      id: number;
      fullName: string;
      firstName: string;
      lastName: string;
      email: string;
      phone: string;
      /** Format: date-time */
      birthedAt: string;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      tempData?: components['schemas']['UserTempDataOutputDto'][];
      newEmail?: string;
    };
    MyPupilOutputDto: {
      pupil: components['schemas']['UserFullNameOutputDto'];
    };
    ParentOutputDto: {
      id: number;
      firstName: string;
      lastName: string;
      /** Format: date-time */
      createdAt: string;
      email: string;
      phone: string;
      myPupils: components['schemas']['MyPupilOutputDto'][];
    };
    PaginateParentOutputDto: {
      items: components['schemas']['ParentOutputDto'][];
      meta: components['schemas']['MetaDto'];
    };
    AdditionalNeedOutputDto: {
      title: string;
      acrohnym: string;
    };
    UserAdditionalNeedStudentPupil: {
      additionalNeed: components['schemas']['AdditionalNeedOutputDto'];
    };
    ParentsOfPupilOutputDto: {
      parent: components['schemas']['UserFullNameOutputDto'];
      /** @enum {string} */
      association: 'Primary' | 'Secondary';
    };
    MetaDataPupilOutputDto: {
      /** @enum {string} */
      key?: 'FreeSchoolMeal';
      /** @enum {string} */
      value?: 'true' | 'false';
    };
    PupilWithOtherParentsOutputDto: {
      id: number;
      fullName: string;
      email: string;
      /** Format: date-time */
      birthedAt: string;
      userKeyStageLevelStudentPupil: components['schemas']['UserKeyStageLevelOutputDto'][];
      userAdditionalNeedStudentPupil: components['schemas']['UserAdditionalNeedStudentPupil'][];
      myParents: components['schemas']['ParentsOfPupilOutputDto'][];
      metaData: components['schemas']['MetaDataPupilOutputDto'][];
    };
    PupilsInfoOutputDto: {
      pupil: components['schemas']['PupilWithOtherParentsOutputDto'];
    };
    ParentDetailOutputDto: {
      id: number;
      firstName: string;
      lastName: string;
      fullName: string;
      email: string;
      phone: string;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      parentAddressLine1: string;
      parentAddressLine2?: string;
      parentContactCity?: string;
      parentContactPostcode?: string;
      myPupils: components['schemas']['PupilsInfoOutputDto'][];
      tempData?: components['schemas']['UserTempDataOutputDto'][];
      newEmail?: string;
    };
    SchoolLessonListPupilOutput: {
      id: number;
      tutorLessonId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      scheduleStartedAt: string;
      cohort: components['schemas']['CohortLeadOutputDto'];
      registrations: components['schemas']['StudentRegistrationOutputDto'][];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      lessonChatCount: number;
      subject: components['schemas']['SubjectTitleDto'];
      duration: number;
      tutorUser: components['schemas']['UserFullNameOutputDto'];
      price: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      /** @enum {string} */
      lessonState: 'REQUESTED' | 'SCHEDULED' | 'COMPLETED';
    };
    SearchSchoolLessonOutputPaginationDto: {
      items: components['schemas']['SchoolLessonListPupilOutput'][];
      meta: components['schemas']['PaginationMeta'];
    };
    SchoolCompletedLessonDetailOutputDto: {
      id: number;
      tutorUser: components['schemas']['UserFullNameOutputDto'];
      cohort: components['schemas']['CohortNameOutputDto'];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectTitleDto'];
      keyStageLevel: components['schemas']['KeyStageLevelOutputDto'];
      /** Format: date-time */
      scheduleStartedAt: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      realStartedAt: string;
      /** Format: date-time */
      realFinishedAt: string;
      duration: number;
      price: number;
      pupilsCount?: number;
      registrations: components['schemas']['StudentRegistrationOutputDto'][];
      messageToTutor?: string;
      agreement?: components['schemas']['LessonAgreementOutputDto'];
      attachmentManagers: components['schemas']['AttachmentManagerOutputDto'][];
    };
    SchoolLessonPriceSummary: {
      duration: number;
      userAccounts: number;
      userAccountCharges: number;
      tutorPrice: number;
      KnektuCharge: number;
      totalPrice: number;
      /** Format: date-time */
      startTime: string;
      realDuration: number;
    };
    SchoolsLessonReviewsOutputDto: {
      count: number;
      average: number;
      reviews: components['schemas']['TutorLessonReviewsOutputDto'][];
    };
    ParentWithPupilsOutputDto: {
      id: number;
      firstName: string;
      lastName: string;
      /** Format: date-time */
      createdAt: string;
      email: string;
      phone: string;
      myPupils: components['schemas']['UserFullNameOutputDto'][];
    };
    PaginataionParentOutputDto: {
      items: components['schemas']['ParentWithPupilsOutputDto'][];
      meta: components['schemas']['MetaDto'];
    };
    LessonWhiteboardOutputDto: {
      id: number;
      title: string;
      description?: string;
      fileName: string;
      mimeType: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    TeacherLessonListOutput: {
      id: number;
      tutorLessonId: number;
      /** Format: date-time */
      scheduleStartedAt: string;
      cohort: components['schemas']['CohortNameOutputDto'];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectTitleDto'];
      duration: number;
      registrations: components['schemas']['StudentRegistrationOutputDto'][];
      tutorUser: components['schemas']['UserFullNameOutputDto'];
      price: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      lessonChatCount?: number;
    };
    SearchTeacherLessonsOutputPaginationDto: {
      items: components['schemas']['TeacherLessonListOutput'][];
      meta: components['schemas']['PaginationMeta'];
    };
    AgreementDto: {
      curriculumContentAgreed: boolean;
      curriculumContentText: string;
      knowledgeGapRequirementsAgreed: boolean;
      knowledgeGapRequirementsText: string;
      setTestAgreed: boolean;
      setTestText: string;
      setHomeWorksAgreed: boolean;
      setHomeWorksText: string;
      additionalCommentsAgreed: boolean;
      additionalCommentsText: string;
    };
    TutorUsersDto: {
      id: number;
      fullName?: string;
      documents: components['schemas']['UserDocumentOutputDto'][];
      agreements: components['schemas']['AgreementDto'][];
    };
    LessonChatDto: {
      /** @enum {string} */
      whoSentMsg: 'Tutor' | 'Cohort-lead' | 'School' | 'Pupil';
      attachments: components['schemas']['AttachmentsChatOutputDto'][];
      seen: boolean;
      sendUser: components['schemas']['UserFullNameOutputDto'];
      recvUser: components['schemas']['UserFullNameOutputDto'];
      message: string;
      /** Format: date-time */
      msgSeenAt: string;
      /** Format: date-time */
      createdAt: string;
    };
    TeacherLessonRequestedDetailOutputDto: {
      id: number;
      fundingTypeId: number;
      tutorUser: components['schemas']['TutorUsersDto'];
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      /** @enum {string} */
      lessonState: 'REQUESTED' | 'SCHEDULED' | 'COMPLETED';
      cohort: components['schemas']['CohortNameOutputDto'];
      registrations: components['schemas']['RegistrationStudentPupilAdditionalOutputDto'][];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectTitleDto'];
      keyStageLevel: components['schemas']['KeyStageLevelOutputDto'];
      /** Format: date-time */
      scheduleStartedAt: string;
      duration: number;
      price: number;
      lessonChats: components['schemas']['LessonChatDto'][];
      attachmentManagers: components['schemas']['AttachmentManagerOutputDto'][];
      agreement: components['schemas']['LessonAgreementOutputDto'];
      canceledBy: components['schemas']['UserProfileOutputDto'];
      /** Format: date-time */
      canceledAt: string;
      canceledReason: string;
      diaryDetails: components['schemas']['LessonDiaryDetailOutputDto'][];
    };
    PupilWithMoreInfoOutputDto: {
      id: number;
      fullName: string;
      email: string;
      /** Format: date-time */
      birthedAt: string;
      userKeyStageLevelStudentPupil: components['schemas']['UserKeyStageLevelOutputDto'][];
      userAdditionalNeedStudentPupil: components['schemas']['UserAdditionalNeedStudentPupil'][];
      school: components['schemas']['SchoolTitleOutputDto'];
      cohortsPupil?: components['schemas']['CohortNameOutputDto'][];
      metaData: components['schemas']['MetaDataPupilOutputDto'][];
    };
    PupilsOfParentInfoOutputDto: {
      pupil: components['schemas']['PupilWithMoreInfoOutputDto'];
    };
    AdminUserParentDetailOutputDto: {
      id: number;
      firstName: string;
      lastName: string;
      fullName: string;
      email: string;
      phone: string;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      parentAddressLine1: string;
      parentAddressLine2?: string;
      parentContactCity?: string;
      parentContactPostcode?: string;
      myPupils: components['schemas']['PupilsOfParentInfoOutputDto'][];
    };
    AddLegalInputDto: {
      text: string;
      /** @enum {string} */
      type: 'ABOUT_US' | 'TERMS_AND_CONDITIONS' | 'TERM_OF_SERVICES' | 'PRIVACY_POLICY' | 'GDPR' | 'FAQ';
    };
    LegalOutputDto: {
      status: boolean;
      legalId: number;
    };
    CreatedUserDto: {
      fullName: string;
    };
    LegalFullOutputDto: {
      id: number;
      title: string;
      /** @enum {string} */
      type: 'ABOUT_US' | 'TERMS_AND_CONDITIONS' | 'TERM_OF_SERVICES' | 'PRIVACY_POLICY' | 'GDPR' | 'FAQ';
      text: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @enum {string} */
      status: 'Draft' | 'Published' | 'Expired';
      version: string;
      createdAdmin: components['schemas']['CreatedUserDto'];
    };
    LegalOutputPaginationDto: {
      items: components['schemas']['LegalFullOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    UpdateLegalInputDto: {
      text?: string;
    };
    VersionLegalOutputDto: {
      version: string;
    };
    GetSchoolPaginationOutputDto: {
      items: components['schemas']['GetSchoolOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    GetSchoolDetailsOutputDto: {
      title: string;
      email: string;
      telephone: string;
      website: string;
    };
    UserOutputDto: {
      id: number;
      title: string;
      email: string;
      phone: string;
      firstName: string;
      lastName: string;
      fullName: string;
    };
    UserConfirmOutputDto: {
      id: number;
      fullName: string;
    };
    SearchSchoolOutputDto: {
      id: number;
      title: string;
      isApproved: boolean;
      isAuthorityApproved: boolean;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE';
      headTeacherName: string;
      numberOfStudents: number;
      telephone: string;
      email: string;
      website: string;
      specialEducationNumber: string;
      userDetail: components['schemas']['UserOutputDto'];
      userAuthorityDetail: components['schemas']['UserOutputDto'];
      userConfirmationAuthority: components['schemas']['UserConfirmOutputDto'];
      /** Format: date-time */
      userConfirmationAuthorityAt: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    GetSchoolInfoAdminOutputDto: {
      school: components['schemas']['SearchSchoolOutputDto'];
      email: string;
      firstName: string;
      lastName: string;
      phone: string;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      roles: components['schemas']['RoleTitleDto'][];
    };
    SchoolUserDto: {
      userId: number;
    };
    SchoolUserRole: {
      /** @enum {string} */
      roleName?: 'SCHOOL' | 'SCHOOL_OPERATION' | 'SCHOOL_TEACHING_STAFF' | 'SCHOOL_COHORT_LEAD';
      userList: components['schemas']['SchoolUserDto'][];
    };
    SchoolUserRoleInputDto: {
      schoolUserRoles: components['schemas']['SchoolUserRole'][];
    };
    ResponseDto: {
      result: boolean;
      data?: { [key: string]: unknown };
    };
    StaffOutputDto: {
      id: number;
      fullName: string;
    };
    AssignRoleDto: {
      userId: number;
      roleId: number;
    };
    SchoolUsersOutputDto: {
      id: number;
      fullName: string;
      email: string;
      /** Format: date-time */
      emailVerifiedAt: string;
    };
    SchoolSetupLaterDto: {
      /** @enum {string} */
      profileSetupSchool:
        | 'uploadPupilsParents'
        | 'uploadTeachers'
        | 'uploadStaffs'
        | 'inviteUploadedPupils'
        | 'inviteUploadedParents'
        | 'inviteUploadedTeachers'
        | 'inviteUploadedStaffs'
        | 'assignRoles'
        | 'createCohort'
        | 'addFund';
    };
    SchoolProfileSetupOutputDto: {
      id: number;
      key: string;
      value: string;
    };
    ChangeInfoOwnerInputDto: {
      email?: string;
      firstName?: string;
      lastName?: string;
      phone?: string;
    };
    SchoolUpdateDto: {
      title?: string;
      email?: string;
      website?: string;
      telephone?: string;
      specialEducationNumber?: string;
    };
    SchoolOutputPaginationDto: {
      items: components['schemas']['SearchSchoolOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    SchoolStatisticsDto: {
      cohortCount: number;
      studentCount: number;
      completedLessonCount: number;
      missedLessonCount: number;
    };
    SchoolProfileDto: {
      school: components['schemas']['SearchSchoolOutputDto'];
      statistics: components['schemas']['SchoolStatisticsDto'];
    };
    SchoolConfirmationOutputDto: {
      id: number;
      isApproved: boolean;
      title: string;
      userConfirmationAuthority: components['schemas']['UserConfirmOutputDto'];
      /** Format: date-time */
      userConfirmationAuthorityAt: string;
      userConfirmationDetail: components['schemas']['UserConfirmOutputDto'];
      /** Format: date-time */
      userConfirmationDetailAt: string;
      userConfirmationWebsite: components['schemas']['UserConfirmOutputDto'];
      /** Format: date-time */
      userConfirmationWebsiteAt: string;
      userConfirmationSenNumber: components['schemas']['UserConfirmOutputDto'];
      /** Format: date-time */
      userConfirmationSenNumberAt: string;
    };
    SchTutorApprovalUpdateDto: {
      pricing30Min?: number;
      pricing60Min?: number;
      curriculumContentAgreed?: boolean;
      curriculumContentText?: string;
      knowledgeGapRequirementsAgreed?: boolean;
      setTestAgreed?: boolean;
      setTestText?: string;
      setHomeWorksAgreed?: boolean;
      setHomeWorksText?: string;
      additionalCommentsAgreed?: boolean;
      additionalCommentsText?: string;
      knowledgeGapRequirementsText: string;
    };
    CohortsPupilOutputDto: {
      name: string;
    };
    PupilDetailsUserOutputDto: {
      email: string;
      status: string;
      userKeyStageLevelStudentPupil: components['schemas']['UserKeyStageLevelOutputDto'][];
      userAdditionalNeedStudentPupil: components['schemas']['UserAdditionalNeedStudentPupil'][];
      cohortsPupil: components['schemas']['CohortsPupilOutputDto'][];
      metaData: components['schemas']['MetaDataPupilOutputDto'][];
      tempData: components['schemas']['UserTempDataOutputDto'][];
      id: number;
      fullName: string;
    };
    PupilDetailsDto: {
      pupil: components['schemas']['PupilDetailsUserOutputDto'];
    };
    HttpResponseOutputDto: {
      message: string;
    };
    PupilEditInputDto: {
      keyStageLevels?: number[];
      additionalNeeds?: number[];
      cohortsPupil?: number[];
      firstName: string;
      lastName: string;
      /** Format: date-time */
      birthedAt: string;
      freeSchoolMeal: boolean;
    };
    LessonChatMessage: {
      message: string;
    };
    SchoolLessonsPupilOutputDto: {
      id: number;
      /** Format: date-time */
      scheduleStartedAt: string;
      /** Format: date-time */
      createdAt: string;
      cohort: components['schemas']['CohortNameOutputDto'];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectTitleDto'];
      duration: number;
      tutorUser: components['schemas']['UserFullNameOutputDto'];
      registrations: components['schemas']['StudentRegistrationOutputDto'][];
      price: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      lessonChats: components['schemas']['LessonChatMessage'][];
      lessonChatCount: number;
    };
    SearchPupilLessonsOutputPaginationDto: {
      items: components['schemas']['SchoolLessonsPupilOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    SchoolPupilLessonDetailOutputDto: {
      id: number;
      tutorUser: components['schemas']['UserProfileOutputDto'];
      cohort: components['schemas']['CohortNameOutputDto'];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      subject: components['schemas']['SubjectTitleDto'];
      keyStageLevel: components['schemas']['KeyStageLevelOutputDto'];
      registrations: components['schemas']['StudentRegistrationOutputDto'][];
      /** Format: date-time */
      scheduleStartedAt: string;
      duration: number;
      price: number;
      lessonChats: components['schemas']['LessonChatOutputDto'][];
      attachmentManagers: components['schemas']['AttachmentManagerOutputDto'][];
      agreement: components['schemas']['LessonAgreementOutputDto'];
      user: components['schemas']['UserFullNameOutputDto'];
    };
    IndividualPupilParentInputDto: {
      parentId?: number;
      firstName?: string;
      lastName?: string;
      email?: string;
      telephone?: string;
      contactAddressLine1?: string;
      contactAddressLine2?: string;
      contactCity?: string;
      contactPostcode?: string;
      /** @enum {string} */
      associationType: 'Primary' | 'Secondary';
    };
    IndividualPupilInputDto: {
      keyStageLevels?: number[];
      additionalNeeds?: number[];
      firstName: string;
      lastName: string;
      email: string;
      /** Format: date-time */
      birthedAt: string;
      freeSchoolMeal: boolean;
      parents: components['schemas']['IndividualPupilParentInputDto'][];
    };
    IndividualPupilOutputDto: {
      id: number;
      firstName: string;
      lastName: string;
    };
    PupilsInSchoolOutputDto: {
      id: number;
      fullName: string;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
    };
    SchoolUpdatePupil: {
      email?: string;
      firstName?: string;
      lastName?: string;
      /** Format: date-time */
      birthedAt?: string;
      schoolMeals?: boolean;
      keyStageIds?: number[];
      additionalSubjectIds?: number[];
      additionalNeedIds?: number[];
      cohortIds?: number[];
    };
    ChangeInfoStaffInputDto: {
      email?: string;
      firstName?: string;
      lastName?: string;
      /** Format: date-time */
      dateOfBirth?: string;
    };
    CreateCohortDto: {
      /** @description Cohort name (title) */
      name: string;
      /** @description Subjects' Ids */
      subjects: number[];
      /** @description KeyStage levels' Ids */
      keyStageLevels: number[];
      /** @description Pupils' Ids */
      pupils: number[];
      /** @description Lead's Id */
      lead: number;
    };
    PupilsDto: {
      /** @description Pupils' Ids */
      pupils: number[];
    };
    PupilOutputDto: {
      id: number;
      fullName: string;
    };
    PupilsInCohortDto: {
      pupils: components['schemas']['UserFullNameOutputDto'][];
    };
    NotRegisteredPupilsInCohortDto: {
      pupils: components['schemas']['UserFullNameOutputDto'][];
    };
    PupilsInSchoolAndCohortDto: {
      inCohort: components['schemas']['PupilsInCohortDto'];
      inSchool: components['schemas']['NotRegisteredPupilsInCohortDto'];
    };
    LeadOutputDto: {
      id: number;
      fullName: string;
    };
    UpdateCohortDto: {
      /** @description Cohort name (title) */
      name: string;
      /** @description Subjects' Ids */
      subjects: number[];
      /** @description KeyStage levels' Ids */
      keyStageLevels: number[];
      /** @description Pupils' Ids */
      pupils: number[];
      /** @description Lead's Id */
      lead: number;
    };
    AllocateFundToCohortDto: {
      /** @description amount */
      amount: number;
      /** @description Funding Type's Id */
      fundingType: number;
    };
    DeallocateFundFromCohortDto: {
      /** @description amount */
      amount: number;
      fundingTypeId: number;
    };
    CohortFundingSumDto: {
      amount: number;
    };
    SchoolPupilOutputDto: {
      id: number;
      fullName: string;
    };
    SchoolParentOutputDto: {
      id: number;
      fullName: string;
    };
    ParentInfoDto: {
      firstName?: string;
      lastName?: string;
      email?: string;
      phone?: string;
      parentAddressLine1?: string;
      parentAddressLine2?: string;
      parentContactCity?: string;
      parentContactPostcode?: string;
    };
    PupilsIdsInputDto: {
      id: number;
      /** @enum {string} */
      association: 'Primary' | 'Secondary';
    };
    PupilsInputDto: {
      keyStageLevels?: number[];
      additionalNeeds?: number[];
      firstName: string;
      lastName: string;
      email?: string;
      /** Format: date-time */
      birthedAt: string;
      freeSchoolMeal: boolean;
      /** @enum {string} */
      association: 'Primary' | 'Secondary';
    };
    ParentInputDto: {
      /** @description Parent info */
      parent: components['schemas']['ParentInfoDto'];
      pupilIds?: components['schemas']['PupilsIdsInputDto'][];
      pupils?: components['schemas']['PupilsInputDto'][];
    };
    ParentIdDto: {
      parentId: number;
    };
    SchoolInviteParentsDto: {
      parentIds?: components['schemas']['ParentIdDto'][];
    };
    PupilListOutputDto: {
      id: number;
      firstName: string;
      lastName: string;
      email: string;
      userKeyStageLevelStudentPupil: components['schemas']['UserKeyStageLevelOutputDto'][];
      userAdditionalNeedStudentPupil: components['schemas']['UserAdditionalNeedDto'][];
      cohortsPupil: components['schemas']['CohortNameOutputDto'][];
    };
    SearchPupilOutputPaginationDto: {
      items: components['schemas']['PupilListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    PupilStatusOutputDto: {
      id: number;
      fullName: string;
      email: string;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      userKeyStageLevelStudentPupil: components['schemas']['UserKeyStageLevelOutputDto'][];
      userAdditionalNeedStudentPupil: components['schemas']['UserAdditionalNeedDto'][];
      cohortsPupil?: components['schemas']['CohortNameOutputDto'][];
    };
    CohortsLeadOutputDto: {
      id: number;
      lead: components['schemas']['UserFullNameOutputDto'];
      name: string;
    };
    CohortTopUpInputDto: {
      fundingTypeId: number;
      amount: number;
    };
    CardPayRequestDto: {
      amount: number;
      paymentMethodId: string;
    };
    StripePaymentRequestOutputDto: {
      paymentIntentClientSecret: string;
      requiresAction: boolean;
      success: boolean;
      paymentData: {
        paymentId?: string;
        paymentStatus?: string;
        paymentMethodId?: string;
        cardEndedWith?: string;
      };
      error: string;
    };
    CardOutputDto: {
      id: string;
      last4: string;
    };
    StripeGetCreateCardSetupOutputDto: {
      clientSecret: string;
      customerId: string;
      ephemeralKey: string;
    };
    SchoolPupilLessonOutputDto: {
      id: number;
      cohort: components['schemas']['CohortNameOutputDto'];
      subject: components['schemas']['SubjectTitleDto'];
      keyStageLevel: components['schemas']['KeyStageLevelOutputDto'];
    };
    SchoolPupilLessonDetailsOutputDto: {
      id: number;
      tutorUser: components['schemas']['TutorUsersDto'];
      cohort: components['schemas']['CohortNameOutputDto'];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      subject: components['schemas']['SubjectTitleDto'];
      keyStageLevel: components['schemas']['KeyStageLevelOutputDto'];
      registrations: components['schemas']['RegistrationStudentPupilAdditionalOutputDto'][];
      /** Format: date-time */
      scheduleStartedAt: string;
      duration: number;
      price: number;
      lessonChats: components['schemas']['LessonChatOutputDto'][];
      attachmentManagers: components['schemas']['AttachmentManagerOutputDto'][];
      agreement: components['schemas']['LessonAgreementOutputDto'];
      canceledBy: components['schemas']['UserProfileOutputDto'];
      /** Format: date-time */
      canceledAt: string;
      canceledReason: string;
      diaryDetails: components['schemas']['LessonDiaryDetailOutputDto'][];
      user: components['schemas']['UserFullNameOutputDto'];
    };
    LessonAgreementEditInputDto: {
      curriculumContentAgreed: boolean;
      curriculumContentText: string;
      knowledgeGapRequirementsAgreed: boolean;
      knowledgeGapRequirementsText: string;
      setTestAgreed: boolean;
      setTestText: string;
      setHomeWorksAgreed: boolean;
      setHomeWorksText: string;
      additionalCommentsAgreed: boolean;
      additionalCommentsText: string;
    };
    EditLessonDto: {
      agreements?: components['schemas']['LessonAgreementEditInputDto'];
      pupilIds: number[];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      fundingTypeId: number;
      /** Format: date-time */
      date: string;
      startTime: string;
      /** @enum {number} */
      duration: 30 | 60;
      diaryId: number;
      attachments: string[];
    };
    SchoolTeacherOutputDto: {
      id: number;
      fullName: string;
    };
    SchoolUpdateTeacherDto: {
      firstName?: string;
      lastName?: string;
      email?: string;
      /** Format: date-time */
      birthedAt?: string;
      additionalNeedIds?: number[];
      additionalSubjectIds?: number[];
      keyStageLevelIds?: number[];
      cohortIds?: number[];
    };
    CohortsDto: {
      cohorts: components['schemas']['CohortNameOutputDto'][];
    };
    CohortsInSchoolAndTeacherDto: {
      inTeacher: components['schemas']['CohortsDto'];
      inSchool: components['schemas']['CohortsDto'];
    };
    SchoolLeadCohortUpdateDto: {
      cohortIds: number[];
    };
    CreateFundingTypeDto: {
      /** @description FundingType name (title) */
      name: string;
    };
    StaffErrorRowOutputDto: {
      rowId: number;
      errors: string[];
    };
    StaffUploadCSVOutputDto: {
      success: string;
      error: components['schemas']['StaffErrorRowOutputDto'][];
    };
    UploadIndividualStaffDto: {
      /** @description must send with dd/MM/yyyy format */
      dateOfBirth: string;
      firstName: string;
      lastName: string;
      email: string;
    };
    SchoolStaffOutputDto: {
      id: number;
      fullName: string;
    };
    StaffIdDto: {
      staffId: number;
    };
    SchoolInviteStaffsDto: {
      staffIds?: components['schemas']['StaffIdDto'][];
    };
    SchoolFullNameUserOutputDto: {
      id: number;
      fullName: string;
    };
    SchoolReinviteStaffDto: {
      staffIds: number[];
    };
    CompleteInvitationStaffDto: {
      password: string;
    };
    CompleteInvitationTeacherOutputDto: {
      message: string;
    };
    LessonAgreementInputDto: {
      curriculumContentAgreed?: boolean;
      curriculumContentText?: string;
      knowledgeGapRequirementsAgreed?: boolean;
      knowledgeGapRequirementsText?: string;
      setTestAgreed?: boolean;
      setTestText?: string;
      setHomeWorksAgreed?: boolean;
      setHomeWorksText?: string;
      additionalCommentsAgreed?: boolean;
      additionalCommentsText?: string;
    };
    CreateLessonDto: {
      tutorUserId: number;
      fundingTypeId: number;
      diaryId: number;
      cohortId: number;
      subjectId: number;
      keyStageLevelId: number;
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      pupilIds: number[];
      /** Format: date-time */
      date: string;
      startTime: string;
      /** @enum {number} */
      duration: 30 | 60;
      attachments?: string[];
      messageToTutor: string;
      agreements?: components['schemas']['LessonAgreementInputDto'];
    };
    CreateLessonOutputDto: {
      id: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      duration: number;
      /** Format: date-time */
      scheduleStartedAt: string;
      /** Format: date-time */
      scheduleFinishedAt: string;
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectTitleDto'];
    };
    CohortFundingDetailsDto: {
      fundingTypeId: number;
      fundingName: string;
      amount: number;
    };
    CheckAvailabilityInputDto: {
      /** Format: date-time */
      date: string;
      startTime?: string;
      tutorUserId: number;
      duration: number;
    };
    DiaryDetailsDto: {
      id: number;
      /** Format: date-time */
      date: string;
      startTime: string;
      endTime: string;
      durations: number;
      lessonTitle: string;
      lessonDescription: string;
      diaryId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CheckAvailabilityOutputDto: {
      id: number;
      diaryDetails: components['schemas']['DiaryDetailsDto'][];
    };
    SchoolReasonDeclinedDto: {
      reason?: string;
    };
    TeacherCohortLessonListOutput: {
      id: number;
      tutorLessonId: number;
      /** Format: date-time */
      scheduleStartedAt: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectTitleDto'];
      cohort: components['schemas']['CohortNameOutputDto'];
      duration: number;
      registrations: components['schemas']['StudentRegistrationOutputDto'][];
      tutorUser: components['schemas']['UserFullNameOutputDto'];
      price: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      lessonChatCount?: number;
    };
    SearchTeacherLessonsCohortOutputPaginationDto: {
      items: components['schemas']['TeacherCohortLessonListOutput'][];
      meta: components['schemas']['PaginationMeta'];
    };
    TeacherErrorRowOutputDto: {
      rowId: number;
      errors: string[];
    };
    TeacherUploadCSVOutputDto: {
      success: string;
      error: components['schemas']['TeacherErrorRowOutputDto'][];
    };
    UploadIndividualTeacherDto: {
      firstName: string;
      lastName: string;
      email: string;
      /** Format: date-time */
      dateOfBirth: string;
      subjectsId: number[];
      keyStagesId: number[];
    };
    TeacherIdDto: {
      teacherId: number;
    };
    SchoolInviteTeachersDto: {
      teacherIds?: components['schemas']['TeacherIdDto'][];
    };
    ResendInviteTeacher: {
      teacherId: number;
    };
    SchoolResendInvitesTeacher: {
      teacherIds: components['schemas']['ResendInviteTeacher'][];
    };
    CompleteInvitationTeacherDto: {
      password: string;
    };
    SchoolSaveTutorReviewProcessDto: {
      tutorUserId: number;
    };
    LessonChatAgreementOutputDto: {
      message: string;
      /** @enum {string} */
      whoSentMsg: 'Tutor' | 'Cohort-lead' | 'School' | 'Pupil';
      attachments: components['schemas']['AttachmentsChatOutputDto'][];
      seen: boolean;
      sendUser: components['schemas']['UserFullNameOutputDto'];
      recvUser: components['schemas']['UserFullNameOutputDto'];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      msgSeenAt: string;
    };
    AgreementDetailOutputDto: {
      id: number;
      pricing30Min: number;
      pricing60Min: number;
      curriculumContentAgreed: boolean;
      curriculumContentText: string;
      knowledgeGapRequirementsAgreed: boolean;
      knowledgeGapRequirementsText: string;
      setTestAgreed: boolean;
      setTestText: string;
      setHomeWorksAgreed: boolean;
      setHomeWorksText: string;
      additionalCommentsAgreed: boolean;
      additionalCommentsText: string;
      /** @enum {string} */
      status: 'In Process' | 'Reviewed' | 'Approved' | 'Delisted';
      tutorUser: components['schemas']['UserProfileOutputDto'];
      lessonChats: components['schemas']['LessonChatAgreementOutputDto'][];
    };
    TutorPriceRateSchoolOutputDto: {
      school60min: number;
      school30min: number;
    };
    TutorAgreementDetailOutputDto: {
      lessonChatAgreement: components['schemas']['AgreementDetailOutputDto'];
      tutorPriceRates: components['schemas']['TutorPriceRateSchoolOutputDto'];
    };
    SchTutorApprovalDto: {
      pricing30Min: number;
      pricing60Min: number;
      tutorUserId: number;
      curriculumContentAgreed: boolean;
      curriculumContentText: string;
      knowledgeGapRequirementsAgreed: boolean;
      knowledgeGapRequirementsText: string;
      setTestAgreed: boolean;
      setTestText: string;
      setHomeWorksAgreed: boolean;
      setHomeWorksText: string;
      additionalCommentsAgreed: boolean;
      additionalCommentsText: string;
    };
    PupilParentErrorRowOutputDto: {
      rowId: number;
      errors: string[];
    };
    PupilParentUploadCSVOutputDto: {
      success: string;
      error: components['schemas']['PupilParentErrorRowOutputDto'][];
    };
    SchoolUploadedOutputDto: {
      id: number;
      fullName: string;
    };
    PupilIdDto: {
      pupilId: number;
    };
    SchoolInvitePupilsDto: {
      pupilIds?: components['schemas']['PupilIdDto'][];
    };
    SchoolReinvitePupilsDto: {
      pupilIds: number[];
    };
    CompleteInvitationPupilParentDto: {
      password: string;
    };
    CompleteInvitationPupilOutputDto: {
      message: string;
    };
    SchoolReinviteParentsDto: {
      parentIds: number[];
    };
    CreateTutorChatDto: {
      'files[]': string[];
      tutorUserId?: number;
      message?: string;
      tutorAgreementId?: number;
      lessonId?: number;
    };
    ChatCreatedOutputDto: {
      message: string;
      data: {
        id?: number;
      };
    };
    CreateTutorSchoolChatDto: {
      'files[]': string[];
      schoolId?: number;
      message?: string;
      lessonId?: number;
      tutorAgreementId?: number;
    };
    CreateTutorTeacherChatDto: {
      'files[]': string[];
      schoolId?: number;
      message?: string;
      lessonId?: number;
      tutorAgreementId?: number;
    };
    PermissionOutputDto: {
      id: number;
      title: string;
    };
    NewSchoolRoleInputDto: {
      /** @description Permission Ids */
      permissions: number[];
      title: string;
    };
    UserAddToRoleInputDto: {
      userId: number;
    };
    subjectListDto: {
      id: number;
      title: string;
    };
    RegistrationListDto: {
      studentUser: components['schemas']['UserFullNameOutputDto'];
    };
    ChatBeforeListDto: {
      message: string;
      /** @enum {string} */
      whoSentMsg: 'Tutor' | 'Cohort-lead' | 'School' | 'Pupil';
    };
    TutorLessonListOutputDto: {
      id: number;
      user: components['schemas']['UserFullNameOutputDto'];
      cohort: components['schemas']['CohortLeadOutputDto'];
      /** Format: date-time */
      scheduleStartedAt: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['subjectListDto'];
      duration: number;
      registrations: components['schemas']['RegistrationListDto'][];
      lessonChatCount: number;
      price: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      chatBefore: components['schemas']['ChatBeforeListDto'][];
    };
    TutorDto: {
      id: number;
      fullName: string;
      documents: components['schemas']['UserDocumentOutputDto'][];
      /** Format: date-time */
      lastLoginAt: string;
    };
    CohortDetailDto: {
      id: number;
      name: string;
    };
    RegistrationDto: {
      studentUser: components['schemas']['UserFullNameOutputDto'];
      /** @enum {string} */
      PupilDeclinedStatus: 'Pending' | 'Accepted' | 'Rejected' | 'Canceled';
      /** Format: date-time */
      pupilDeclinedAt: string;
      reasonDeclined: string;
    };
    PupilKeyStageLevelDto: {
      id: number;
      title: string;
    };
    PupilLessonDetailsOutputDto: {
      id: number;
      tutorLessonId: number;
      price: number;
      tutorUser: components['schemas']['TutorDto'];
      agreement: components['schemas']['LessonAgreementOutputDto'];
      cohort: components['schemas']['CohortDetailDto'];
      registrations: components['schemas']['RegistrationDto'][];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectDto'];
      keyStageLevel: components['schemas']['PupilKeyStageLevelDto'];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      scheduleStartedAt: string;
      duration: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      attachmentManagers: components['schemas']['AttachmentManagerOutputDto'][];
      user: components['schemas']['UserFullNameOutputDto'];
    };
    LessonDetailOutputDto: {
      id: number;
      tutorId: number;
      tutorUserId: number;
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      duration: number;
      description: string;
      capacity: number;
      availability: number;
      /** Format: date-time */
      realStartedAt: string;
      /** Format: date-time */
      realFinishedAt: string;
      /** Format: date-time */
      scheduleStartedAt: string;
      /** Format: date-time */
      scheduleFinishedAt: string;
      channelGUID: string;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      subjectId: number;
      keyStageLevelId: number;
      price: number;
    };
    TutorReviewDto: {
      comment: string;
      tutorStars: number;
      qualityStars: number;
    };
    StudentProfileAdditionalNeedOutputDto: {
      id: number;
      fullName: string;
      documents: components['schemas']['UserDocumentOutputDto'][];
      userAdditionalNeedStudentPupil: components['schemas']['UserAdditionalNeedDto'][];
    };
    PartialLessonRegistrationDto: {
      studentUser: components['schemas']['StudentProfileAdditionalNeedOutputDto'];
    };
    CohortLeadSchoolOutputDto: {
      id: number;
      name: string;
      lead: components['schemas']['UserFullNameOutputDto'];
      school: components['schemas']['SchoolProfileOutputDto'];
    };
    TutorLessonDetailsOutputDto: {
      tutorUser: components['schemas']['UserFullNameOutputDto'];
      id: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      /** @enum {string} */
      lessonState: 'REQUESTED' | 'SCHEDULED' | 'COMPLETED';
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      keyStageLevel: components['schemas']['KeyStageLevelDto'];
      subject: components['schemas']['SubjectTitleDto'];
      registrations: components['schemas']['PartialLessonRegistrationDto'][];
      cohort: components['schemas']['CohortLeadSchoolOutputDto'];
      /** Format: date-time */
      scheduleStartedAt: string;
      duration: number;
      price: number;
      lessonChats: components['schemas']['LessonChatOutputDto'][];
      attachmentManagers: components['schemas']['AttachmentManagerOutputDto'][];
      agreement: components['schemas']['LessonAgreementOutputDto'];
      canceledBy: components['schemas']['UserProfileOutputDto'];
      /** Format: date-time */
      canceledAt: string;
      canceledReason: string;
    };
    FindTutorAvailableNowProcedureListOutputDto: {
      tutorUserId: number;
      tutorId: number;
      title: string;
      fullName: string;
      roles: string;
      profilePicture: string;
      rate: number;
      costPerMinute: number;
      /** Format: date-time */
      expiredAt: string;
      keyStageLevels: components['schemas']['KeyStageLevelDto'][];
      subjects: components['schemas']['SubjectDto'][];
      isFavorite: boolean;
    };
    FindTutorAvailableNowProcedureListPaginationDto: {
      items: components['schemas']['FindTutorAvailableNowProcedureListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    ReqLessonChatOutputDto: {
      id: number;
      message: string;
      /** @enum {string} */
      whoSentMsg: 'Tutor' | 'Cohort-lead' | 'School' | 'Pupil';
      seen: boolean;
      /** Format: date-time */
      msgSeenAt: string;
    };
    AttachedDataOutputDto: {
      id: number;
      uid: string;
      title: string;
      link?: string;
      fileName?: string;
      /** @enum {string} */
      attachmentType: 'File' | 'Link';
      /** @enum {string} */
      attachmentCategory: 'CurriculumContents' | 'KnowledgeGapRequirements' | 'SetHomework' | 'SetTest';
    };
    AddLinkAttachedDataDto: {
      /** @description Cohort Id */
      cohort?: number;
      title: string;
      link: string;
      /** @enum {string} */
      attachmentCategory: 'CurriculumContents' | 'KnowledgeGapRequirements' | 'SetHomework' | 'SetTest';
    };
    UploadedResourceDto: {
      /** @description Cohort Id */
      cohort?: number;
      /** @description School Id */
      school?: number;
      attachedData: string;
    };
    AttachmentReferencesDto: {
      /** @description Attached data uuid */
      references: string[];
      /** @description Lesson Id */
      lesson: number;
    };
    StudentBalanceDto: {
      selfFunding: number;
    };
    StudentTopupHistoryOutputDto: {
      id: number;
      amount: number;
      /** @enum {string} */
      type:
        | 'STUDENT_SELF_FUNDING_TOPUP'
        | 'STUDENT_TOPUP_BANK_TRANSFER'
        | 'STUDENT_LESSON_FEE_PAY_SELF_FUNDING'
        | 'STUDENT_LESSON_FEE_BACK_SELF_FUNDING'
        | 'TUTOR_LESSON_EARN'
        | 'TUTOR_WITHDRAW'
        | 'SCHOOL_TOPUP_CARD'
        | 'SCHOOL_TOPUP_BANK_TRANSFER'
        | 'SCHOOL_TOPUP_BY_ADMIN'
        | 'SCHOOL_ALLOCATE_TO_COHORT'
        | 'SCHOOL_TOPUP_BY_COHORT'
        | 'SCHOOL_COHORT_TOPUP'
        | 'SCHOOL_COHORT_DECREASE'
        | 'SCHOOL_COHORT_PAY_LESSON'
        | 'SCHOOL_COHORT_LESSON_FEE_BACK'
        | 'SYSTEM_LESSON_SHARE';
      /** Format: date-time */
      createdAt: string;
    };
    StudentTopupHistoryPaginationOutputDto: {
      items: components['schemas']['StudentTopupHistoryOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    DeleteACardDto: {
      paymentMethodId: string;
    };
    SchoolBalanceDto: {
      balance: number;
    };
    SchoolBankTransferCSDto: {
      clientSecret: string;
    };
    AdminAddCreditToSchoolDto: {
      schoolId: number;
      amount: number;
    };
    ConnectWithStripeLinkDto: {
      link: string;
    };
    TutorWalletTotalOutputDto: {
      totalPaid: number;
      pendingAmount: number;
    };
    TutorPaymentPaidOutputDto: {
      id: number;
      /** Format: date-time */
      dateIssued: string;
      noOfTransactions: number;
      amount: number;
    };
    TutorPaymentPaidDetailOutputDto: {
      id: number;
      /** Format: date-time */
      dateTime: string;
      fullName: string;
      subjectTitle: string;
      keyStageLevelId: number;
      lessonType: string;
      price: number;
      duration: number;
      payment: number;
    };
    OrganizationTypeDto: {
      id: number;
      title: string;
    };
    CountryCodesDto: {
      title: string;
      dialCode: string;
      code: string;
    };
    PersonTitlesDto: {
      id: number;
      title: string;
    };
    StudentOutputDto: {
      id: number;
      user: components['schemas']['UserDto'];
      school: components['schemas']['GetSchoolDetailsOutputDto'];
      keyStageLevel: components['schemas']['KeyStageLevelDto'];
      additionalNeeds: components['schemas']['AdditionalNeedDto'][];
      /** Format: date-time */
      createdAt: string;
      isReceiveFreeSchoolMeals: boolean;
    };
    UpdateStudentInputDto: {
      additionalNeedIds?: number[];
      /** Format: binary */
      profilePicture?: string;
      firstName: string;
      lastName: string;
      /** Format: date-time */
      birthedAt: string;
      isReceiveFreeSchoolMeals: boolean;
      keyStageLevelId: number;
      schoolId: number;
    };
    StudentListOutputDto: {
      id: number;
      user: components['schemas']['UserDto'];
      keyStageLevel: components['schemas']['KeyStageLevelDto'];
      additionalNeeds: components['schemas']['AdditionalNeedDto'][];
      /** Format: date-time */
      createdAt: string;
      isReceiveFreeSchoolMeals: boolean;
    };
    SearchStudentOutputPaginationDto: {
      items: components['schemas']['StudentListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    DiariesTutorsGetOutputDto: {
      id: number;
      /** @enum {string} */
      type: 'AVAILABILITY' | 'SMALL_GROUP' | 'LARGE_GROUP';
      /** @enum {string} */
      groupType: 'SINGLE' | 'SERIES';
      title: string;
      description: string;
      /** @enum {string} */
      status: 'Active' | 'Paused';
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      startTime: string;
      endTime: string;
      /** @enum {string} */
      repeatType: 'CUSTOM' | 'DAILY' | 'WEEKLY';
      durations: number;
      lessonCount: number;
      tutorUserId: number;
      keyStageLevelId: number;
      subjectId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      diaryDetails: components['schemas']['DiaryDetailsDto'][];
    };
    DiariesTutorsGetListPaginationDto: {
      items: components['schemas']['DiariesTutorsGetOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    DiaryDetailsGroupSingleInputDto: {
      /** Format: date-time */
      date: string;
      startTime: string;
      endTime: string;
      durations: number;
    };
    DiariesTutorsCreateGroupSingleInputDto: {
      /** @enum {string} */
      type?: 'AVAILABILITY' | 'SMALL_GROUP' | 'LARGE_GROUP';
      /** @enum {string} */
      groupType?: 'SINGLE' | 'SERIES';
      /** @enum {string} */
      repeatType?: 'CUSTOM' | 'DAILY' | 'WEEKLY';
      diaryDetails: components['schemas']['DiaryDetailsGroupSingleInputDto'][];
      /** Format: date-time */
      startDate: string;
      startTime?: string;
      endTime?: string;
      /** @enum {string} */
      status: 'Active' | 'Paused';
      lessonTitle: string;
      lessonDescription: string;
      durations: number;
      keyStageLevelId: number;
      subjectId: number;
      /** Format: date-time */
      endDate?: string;
      activeAvailableNowMode: boolean;
    };
    DiaryDetailsGroupSeriesInputDto: {
      /** Format: date-time */
      date: string;
      startTime: string;
      endTime: string;
      durations: number;
      lessonTitle: string;
      lessonDescription: string;
    };
    DiariesTutorsCreateGroupSeriesInputDto: {
      /** @enum {string} */
      type?: 'AVAILABILITY' | 'SMALL_GROUP' | 'LARGE_GROUP';
      /** @enum {string} */
      groupType?: 'SINGLE' | 'SERIES';
      /** @enum {string} */
      repeatType?: 'CUSTOM' | 'DAILY' | 'WEEKLY';
      diaryDetails: components['schemas']['DiaryDetailsGroupSeriesInputDto'][];
      /** Format: date-time */
      startDate: string;
      startTime?: string;
      endTime?: string;
      /** @enum {string} */
      status: 'Active' | 'Paused';
      lessonTitle: string;
      lessonDescription: string;
      durations: number;
      keyStageLevelId: number;
      subjectId: number;
      /** Format: date-time */
      endDate?: string;
      activeAvailableNowMode: boolean;
    };
    TutorHomeRegistrationDto: {
      studentUser?: components['schemas']['UserFullNameOutputDto'];
    };
    TeacherLessonOutputDto: {
      id: number;
      tutorUser: components['schemas']['UserProfileOutputDto'];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectTitleDto'];
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      scheduleStartedAt: string;
      cohort: components['schemas']['CohortNameOutputDto'];
      registrations: components['schemas']['TutorHomeRegistrationDto'][];
      duration: number;
      price: number;
      lessonChatCount?: number;
    };
    TeacherUserDto: {
      id: number;
      fullName?: string;
      email: string;
      phone: string;
      mainSubject: components['schemas']['SubjectTitleDto'];
      userKeyStageLevelTutorTeacher: components['schemas']['UserKeyStageLevelOutputDto'][];
      roles: components['schemas']['UserRoleOutputDto'][];
      cohorts: components['schemas']['CohortNameOutputDto'][];
    };
    TeacherStatisticsOutputDto: {
      pupilCount: number;
      cohortCount: number;
      lessonCompletedCount: number;
      lessonMissedCount: number;
    };
    TeacherLessonChats: {
      id: number;
      message: string;
      /** @enum {string} */
      whoSentMsg: 'Tutor' | 'Cohort-lead' | 'School' | 'Pupil';
      attachments: components['schemas']['AttachmentsChatOutputDto'][];
      seen: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      msgSeenAt: string;
      sendUser: components['schemas']['UserFullNameOutputDto'];
      recvUser: components['schemas']['UserFullNameOutputDto'];
    };
    TeacherReasonDeclinedDto: {
      reason?: string;
    };
    CohortDetailsDto: {
      id: number;
      name: string;
      pupils: components['schemas']['UserDto'][];
      subjects: components['schemas']['SubjectTitleDto'][];
      keyStageLevels: components['schemas']['KeyStageLevelOutputDto'][];
      lead: components['schemas']['UserFullNameOutputDto'];
    };
    CohortPupilInfoDto: {
      id: number;
      fullName: string;
      email: string;
      /** @default 0 */
      amountUsed: number;
      /** Format: date-time */
      createdAt: string;
      /** @default 0 */
      lessonRequested: number;
      /** @default 0 */
      lessonScheduled: number;
      /** @default 0 */
      lessonCompleted: number;
      /** @default 0 */
      lessonMissed: number;
    };
    PupilsListPaginationDto: {
      items: components['schemas']['CohortPupilInfoDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    CohortFuncdingOutputDto: {
      fundingDetails: components['schemas']['CohortFundingOutputDto'][];
      fundingTotal: components['schemas']['CohortFundingTotalOutputDto'];
      lead: components['schemas']['CohortLeadDto'];
    };
    SchoolDto: {
      id: number;
      title: string;
    };
    TutorsOutputDto: {
      id: number;
      fullName: string;
      /** @enum {string} */
      tutorAdminStatus: 'APPROVED' | 'REJECTED' | 'SUSPENDED' | 'PENDING';
      documents: components['schemas']['UserDocumentOutputDto'][];
      agreements: components['schemas']['AgreementOutputDto'][];
      summary: components['schemas']['ReviewSummaryOutputDto'];
      userKeyStageLevelTutorTeacher: components['schemas']['UserKeyStageLevelOutputDto'][];
      additionalSubjects: components['schemas']['SubjectDto'][];
      mainSubject: components['schemas']['SubjectDto'];
      priceRate: components['schemas']['PriceRateDto'];
      school: components['schemas']['SchoolDto'];
    };
    TutorOutputPaginationDto: {
      items: components['schemas']['TutorsOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    CohortLessonDto: {
      id: number;
      name: string;
    };
    CohortLessonListOutputDto: {
      id: number;
      /** Format: date-time */
      scheduleStartedAt: string;
      cohort: components['schemas']['CohortLessonDto'];
      registrations: components['schemas']['StudentRegistrationOutputDto'][];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectDto'];
      duration: number;
      tutorUser: components['schemas']['UserDto'];
      price: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
    };
    SearchCohortLessonOutputPaginationDto: {
      items: components['schemas']['CohortLessonListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    CohortBalanceTotalOutputDto: {
      cohortBalanceTotal: number;
    };
    TeacherCohortsOutputDto: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      name: string;
      lead: components['schemas']['UserFullNameOutputDto'];
      pupilsCount?: number;
      subjects: components['schemas']['SubjectTitleDto'][];
      keyStageLevels: components['schemas']['KeyStageLevelOutputDto'][];
      funding: components['schemas']['CohortBalanceTotalOutputDto'];
    };
    SearchTeacherCohortOutputPaginationDto: {
      items: components['schemas']['TeacherCohortsOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    LegalSummeryOutputDto: {
      title: string;
      text: string;
      /** Format: date-time */
      updatedAt: string;
    };
    LoginInputDto: {
      /** @description windows, mac, ios, android or ... */
      deviceType: string;
      /** @description only for mobile */
      deviceId?: string;
      /** @description only for web */
      browser?: string;
      /** @description web: browser version & mobile: os version */
      deviceVersion: string;
      email: string;
      password: string;
      appVersion: string;
    };
    LoginOutputDto: {
      accessToken: string;
      refreshToken: string;
      id: number;
      guid: string;
      roles: components['schemas']['RoleDto'][];
      email: string;
      firstName: string;
      lastName: string;
      fullName: string;
      phone: string;
      /** Format: date-time */
      emailVerifiedAt: string;
      isEmailVerified: boolean;
      /** Format: date-time */
      lastLoginAt: string;
      /** Format: date-time */
      lastFailureLoginAt: string;
      /** Format: date-time */
      birthedAt: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      documents: components['schemas']['UserDocumentOutputDto'][];
      /** @enum {string} */
      tutorAdminStatus: 'APPROVED' | 'REJECTED' | 'SUSPENDED' | 'PENDING';
      /** @enum {string} */
      processStatus: 'Incomplete' | 'Awaiting_review' | 'Rejected' | 'Approved';
      /** Format: date-time */
      viewTutorAdminStatusAt: string;
      schoolSetup: boolean;
    };
    SignUpStudentInputDto: {
      additionalNeedIds?: number[];
      isReceiveFreeSchoolMeals: boolean;
      keyStageLevelId: number;
      schoolId: number;
      email: string;
      password: string;
      firstName: string;
      lastName: string;
      /** Format: date-time */
      birthedAt: string;
    };
    SignUpStudentOutputDto: {
      id: number;
      email: string;
      fullName: string;
    };
    SignUpTutorInputDto: {
      schoolId?: number;
      additionalSubjectIds?: number[];
      /** Format: date-time */
      birthedAt: string;
      teachingStatusId: number;
      mainSubjectId: number;
      keyStageLevelIds: number[];
      email: string;
      password: string;
      firstName: string;
      lastName: string;
    };
    ResendVerificationEmailInputDto: {
      email: string;
    };
    UpdateEmailInputDto: {
      guid: string;
      email: string;
    };
    IsEmailVerifiedInputDto: {
      email: string;
    };
    IsEmailVerifiedOutputDto: {
      isVerified: boolean;
    };
    ForgetPasswordInputDto: {
      email: string;
    };
    CompleteInvitationInputDto: {
      password: string;
    };
    SignUpSchoolInputDto: {
      schoolId?: number;
      schoolName?: string;
      schoolUniqueReferenceNumber?: string;
      userTitle?: string;
      userFirstName?: string;
      userLastName?: string;
      userEmail?: string;
      userTel?: string;
      /** @enum {string} */
      organizationType: 'SCHOOL' | 'CHARITY' | 'OTHER';
      isManually: boolean;
      schoolEmail: string;
      schoolWebsite: string;
      schoolTel: string;
      userHaveAuthorityInSchool: boolean;
      userAuthorityTitle: string;
      userAuthorityFirstName: string;
      userAuthorityLastName: string;
      userAuthorityEmail: string;
      userAuthorityTel: string;
      password: string;
    };
    SignUpSchoolOutputDto: {
      id: number;
      title: string;
    };
    NewPasswordInputDto: {
      currentPassword: string;
      newPassword: string;
      confirmNewPassword: string;
    };
    LogoutOneDeviceInputDto: {
      /** @description windows, mac, ios, android or ... */
      deviceType: string;
      /** @description only for mobile */
      deviceId?: string;
      /** @description only for web */
      browser?: string;
      /** @description web: browser version & mobile: os version */
      deviceVersion: string;
      appVersion: string;
    };
    RegisteredStudentSimpleOutputDto: {
      studentUser: components['schemas']['UserFullNameOutputDto'];
    };
    TutorFullNameDto: {
      id: number;
      fullName: string;
    };
    CohortLessonRoomDto: {
      id: number;
      name: string;
      lead: components['schemas']['UserFullNameOutputDto'];
      school: components['schemas']['GetSchoolOutputDto'];
    };
    PupilLessonDetailOutputDto: {
      id: number;
      tutorLessonId: number;
      /** Format: date-time */
      scheduleStartedAt: string;
      /** Format: date-time */
      realStartedAt: string;
      channelGUID: string;
      registrations: components['schemas']['RegisteredStudentSimpleOutputDto'][];
      tutorUser: components['schemas']['TutorFullNameDto'];
      cohort: components['schemas']['CohortLessonRoomDto'];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectDto'];
      keyStageLevel: components['schemas']['PupilKeyStageLevelDto'];
      /** Format: date-time */
      createdAt: string;
      duration: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      agreement?: components['schemas']['LessonAgreementOutputDto'];
      attachmentManagers: components['schemas']['AttachmentManagerOutputDto'][];
    };
    PupilRtmTokenOutputDto: {
      rtmToken: string;
      userUId: string;
    };
    LeaveLessonRoomOutputDto: {
      onlineSeconds: number;
    };
    LessonChatMessageHistoryOutputDto: {
      id: number;
      message: string;
      /** @enum {string} */
      whoSentMsg: 'Tutor' | 'Cohort-lead' | 'School' | 'Pupil';
      seen: boolean;
      attachments: components['schemas']['AttachmentsChatOutputDto'][];
      sendUser: components['schemas']['UserProfileOutputDto'];
      recvUser: components['schemas']['UserProfileOutputDto'];
      /** Format: date-time */
      msgSeenAt: string;
      /** Format: date-time */
      createdAt: string;
    };
    LessonRegistrationPupilProfileOutputDto: {
      studentUser: components['schemas']['UserProfileOutputDto'];
    };
    LessonParticipantsOutputDto: {
      tutorUser: components['schemas']['UserProfileOutputDto'];
      registrations: components['schemas']['LessonRegistrationPupilProfileOutputDto'][];
    };
    RegisteredStudentOutputDto: {
      studentUser: components['schemas']['UserFullNameAdditionalNeedOutputDto'];
    };
    TutorLessonDetailOutputDto: {
      id: number;
      tutorLessonId: number;
      /** Format: date-time */
      scheduleStartedAt: string;
      /** Format: date-time */
      realStartedAt: string;
      channelGUID: string;
      price: number;
      registrations: components['schemas']['RegisteredStudentOutputDto'][];
      tutorUser: components['schemas']['TutorFullNameDto'];
      cohort: components['schemas']['CohortLessonRoomDto'];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectDto'];
      keyStageLevel: components['schemas']['PupilKeyStageLevelDto'];
      /** Format: date-time */
      createdAt: string;
      duration: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      agreement?: components['schemas']['LessonAgreementOutputDto'];
      attachmentManagers: components['schemas']['AttachmentManagerOutputDto'][];
    };
    TutorLessonBreakdown: {
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      /** Format: date-time */
      scheduledStartTime: string;
      /** Format: date-time */
      actualStartTime: string;
      scheduledDuration: number;
      actualDuration: number;
      lessonCost: number;
      knektuCharge: number;
      totalEarning: number;
    };
    LessonBreakdown: {
      qualityStars: number;
    };
    CohortOutputDto: {
      name: string;
      lead: components['schemas']['UserDto'];
      subjects: components['schemas']['SubjectDto'][];
    };
    TutorUserDto: {
      id: number;
      fullName: string;
      /** Format: date-time */
      lastLoginAt: string;
    };
    LessonDto: {
      id: number;
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      tutorUser: components['schemas']['TutorUserDto'];
      subject: components['schemas']['SubjectDto'];
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      scheduleStartedAt: string;
      cohort: components['schemas']['CohortDto'];
      duration: number;
      studentCount: number;
    };
    PupilProfileHomeOutputDto: {
      cohorts: components['schemas']['CohortOutputDto'][];
      lessonRequested: components['schemas']['LessonDto'][];
      lessonScheduled: components['schemas']['LessonDto'][];
    };
    PupilLessonListOutputDto: {
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      scheduleStartedAt: string;
      cohort: components['schemas']['CohortLeadOutputDto'];
      registrations: components['schemas']['StudentRegistrationOutputDto'][];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectDto'];
      duration: number;
      tutorUser: components['schemas']['UserDto'];
      price: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
    };
    SearchPupilLessonOutputPaginationDto: {
      items: components['schemas']['PupilLessonListOutputDto'][];
      meta: components['schemas']['PaginationMeta'];
    };
    PupilDetailsOutputDto: {
      email: string;
      status: string;
      documents: components['schemas']['UserDocumentOutputDto'][];
      /** Format: date-time */
      birthedAt?: string;
      school: components['schemas']['SchoolOutputDto'];
      userKeyStageLevelStudentPupil: components['schemas']['UserKeyStageLevelOutputDto'][];
      userAdditionalNeedStudentPupil: components['schemas']['UserAdditionalNeedStudentPupil'][];
      metaData: components['schemas']['MetaDataPupilOutputDto'][];
      id: number;
      fullName: string;
    };
    PupilProfileOutputDto: {
      pupil: components['schemas']['PupilDetailsOutputDto'];
    };
    LessonDetailsOutputDto: {
      id: number;
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      /** Format: date-time */
      realStartedAt: string;
      duration: number;
    };
    PupilLessonReviewInputDto: {
      comment: string;
      tutorStars: number;
      qualityStars: number;
    };
    UserCreatedOutputDto: {
      id: number;
      fullName: string;
      roles: components['schemas']['UserRoleOutputDto'][];
    };
    PupLessonDetailsOutputDto: {
      id: number;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      tutorUser: components['schemas']['UserOutputDto'];
      cohort: components['schemas']['CohortNameOutputDto'];
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      subject: components['schemas']['SubjectDto'];
      keyStageLevel?: components['schemas']['KeyStageLevelDto'];
      tutorLessonId: number;
      /** Format: date-time */
      scheduleStartedAt: string;
      duration: number;
      registrations: components['schemas']['RegistrationDto'][];
      /** Format: date-time */
      createdAt: string;
      user: components['schemas']['UserCreatedOutputDto'];
    };
    LessonAttachmentOutputDto: {
      id: number;
      uid?: string;
      title?: string;
      link?: string;
      fileName?: string;
      /** @enum {string} */
      attachmentCategory?: 'CurriculumContents' | 'KnowledgeGapRequirements' | 'SetHomework' | 'SetTest';
      /** @enum {string} */
      attachmentType?: 'File' | 'Link';
    };
    LessonRoomChatOutputDto: {
      id: number;
      message: string;
      /** Format: date-time */
      createdAt: string;
      sendUser: components['schemas']['UserProfileOutputDto'];
    };
    LessonRoomReviewsOutputDto: {
      id: number;
      comment: string;
      tutorStars: number;
      qualityStars: number;
      studentUser: components['schemas']['UserProfileOutputDto'];
      tutorUser: components['schemas']['UserProfileOutputDto'];
    };
    PupLessonChatFilesOutputDto: {
      id: number;
      mimetype: string;
      format: string;
      fileName: string;
      lessonChat: components['schemas']['LessonChatOutputDto'];
    };
    PupilReasonCancel: {
      reason: string;
    };
    CreateNewAssociationDto: {
      title: string;
    };
    AssociationOutputDto: {
      id: number;
      title: string;
    };
    PupilParentInputDto: {
      /** @description Parent user Id */
      parent: number;
      /** @description Pupil user Id */
      pupil: number;
      /** @enum {string} */
      association: 'Primary' | 'Secondary';
    };
    UserKeyStageLevel: {
      id: number;
      keyStageLevel: components['schemas']['KeyStageLevel'];
      keyStageLevelId: number;
      tutorTeacherUser: components['schemas']['User'];
      tutorTeacherUserId: number;
      studentPupilUser: components['schemas']['User'];
      studentPupilUserId: number;
    };
    Cohort: {
      id: number;
      name: string;
      createdByUserId: number;
      school: components['schemas']['School'];
      schoolId: number;
      lead: components['schemas']['User'];
      leadId: number;
      keyStageLevels: components['schemas']['KeyStageLevel'][];
      subjects: components['schemas']['Subject'][];
      lessons: components['schemas']['Lesson'][];
      pupils: components['schemas']['User'][];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Subject: {
      id: number;
      title: string;
      users: components['schemas']['User'][];
      additionalSubjectUser: components['schemas']['User'][];
      lessons: components['schemas']['Lesson'][];
      diaries: components['schemas']['Diary'][];
      cohorts: components['schemas']['Cohort'][];
    };
    DiaryDetail: {
      id: number;
      diary: components['schemas']['Diary'];
      diaryId: number;
      lessons: components['schemas']['Lesson'];
      blackDiaryDetails: components['schemas']['BlackDiaryDetail'][];
      lesson: components['schemas']['Lesson'];
      lessonId: number;
      /** Format: date-time */
      date: string;
      startTime: string;
      endTime: string;
      durations: number;
      weekDay: number;
      lessonTitle: string;
      lessonDescription: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Diary: {
      id: number;
      /** @enum {string} */
      type: 'AVAILABILITY' | 'SMALL_GROUP' | 'LARGE_GROUP';
      /** @enum {string} */
      groupType: 'SINGLE' | 'SERIES';
      /** @enum {string} */
      repeatType: 'CUSTOM' | 'DAILY' | 'WEEKLY';
      durations: number;
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
      activeAvailableNowMode: boolean;
      /** @enum {string} */
      status: 'Active' | 'Paused';
      tutorUser: components['schemas']['User'];
      tutorUserId: number;
      keyStageLevel: components['schemas']['KeyStageLevel'];
      keyStageLevelId: number;
      subject: components['schemas']['Subject'];
      subjectId: number;
      lessonTitle: string;
      lessonDescription: string;
      startTime: string;
      endTime: string;
      diaryDetails: components['schemas']['DiaryDetail'][];
    };
    KeyStageLevel: {
      id: number;
      title: string;
      userKeyStageLevel: components['schemas']['UserKeyStageLevel'][];
      students: components['schemas']['Student'][];
      lessons: components['schemas']['Lesson'][];
      diaris: components['schemas']['Diary'][];
      cohorts: components['schemas']['Cohort'][];
    };
    UserAdditionalNeed: {
      id: number;
      additionalNeed: components['schemas']['AdditionalNeed'];
      additionalNeedId: number;
      tutorTeacherUser: components['schemas']['User'];
      tutorTeacherUserId: number;
      studentPupilUser: components['schemas']['User'];
      studentPupilUserId: number;
    };
    AdditionalNeed: {
      id: number;
      title: string;
      acrohnym: string;
      students: components['schemas']['Student'][];
      userAdditionalNeed: components['schemas']['UserAdditionalNeed'][];
    };
    StudentInSchool: {
      id: number;
      student: components['schemas']['Student'];
      studentId: number;
      school: components['schemas']['School'];
      schoolId: number;
    };
    Registration: {
      id: number;
      /** @enum {string} */
      status: 'Registered' | 'Live' | 'Completed' | 'Cancelled' | 'Missed';
      student: components['schemas']['Student'];
      studentId: number;
      lesson: components['schemas']['Lesson'];
      lessonId: number;
      studentUser: components['schemas']['User'];
      studentUserId: number;
      agoraToken: string;
      isMute: boolean;
      /** Format: date-time */
      joinedAt: string;
      /** Format: date-time */
      leftAt: string;
      isBlocked: boolean;
      prepaidCost: number;
      realCost: number;
      /** @enum {string} */
      PupilDeclinedStatus: 'Pending' | 'Accepted' | 'Rejected' | 'Canceled';
      /** Format: date-time */
      pupilDeclinedAt: string;
      reasonDeclined: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Student: {
      id: number;
      isReceiveFreeSchoolMeals: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      user: components['schemas']['User'];
      userId: number;
      keyStageLevel: components['schemas']['KeyStageLevel'];
      keyStageLevelId: number;
      additionalNeeds: components['schemas']['AdditionalNeed'][];
      studentsInSchool: components['schemas']['StudentInSchool'][];
      registration: components['schemas']['Registration'][];
      school: components['schemas']['School'];
      schoolId: number;
    };
    TempData: {
      id: number;
      /** @enum {string} */
      key: 'NEW_EMAIL';
      value: string;
      /** @enum {string} */
      status: 'PENDING' | 'VERIFIED';
      /** @enum {string} */
      type: 'STRING' | 'JSON';
      user: components['schemas']['User'];
      userId: number;
      school: components['schemas']['School'];
      schoolId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      expiredAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    SchoolParent: {
      id: number;
      parent: components['schemas']['User'];
      school: components['schemas']['School'];
      /** Format: date-time */
      createAt: string;
      /** Format: date-time */
      updateAt: string;
    };
    ChatAttachments: {
      id: number;
      mimetype: string;
      filePath: string;
      fileName: string;
      format: string;
      lessonChat: components['schemas']['LessonChat'];
    };
    LessonChat: {
      id: number;
      message: string;
      /** @enum {string} */
      whoSentMsg: 'Tutor' | 'Cohort-lead' | 'School' | 'Pupil';
      seen: boolean;
      /** @enum {string} */
      chatType: 'REQUEST_LESSON' | 'AGREEMENT' | 'IN_LESSON';
      attachments: components['schemas']['ChatAttachments'][];
      sendUser: components['schemas']['User'];
      recvUser: components['schemas']['User'];
      recvUserId: number;
      school: components['schemas']['School'];
      schoolId: number;
      lesson: components['schemas']['Lesson'];
      lessonId: number;
      tutorAgreement: components['schemas']['TutorAgreement'];
      tutorAgreementId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      msgSeenAt: string;
      /** Format: date-time */
      removedAt: string;
    };
    TutorAgreement: {
      id: number;
      pricing30Min: number;
      pricing60Min: number;
      curriculumContentAgreed: boolean;
      curriculumContentText: string;
      knowledgeGapRequirementsAgreed: boolean;
      knowledgeGapRequirementsText: string;
      setTestAgreed: boolean;
      setTestText: string;
      setHomeWorksAgreed: boolean;
      setHomeWorksText: string;
      additionalCommentsAgreed: boolean;
      additionalCommentsText: string;
      /** @enum {string} */
      status: 'In Process' | 'Reviewed' | 'Approved' | 'Delisted';
      /** @enum {string} */
      requestStatus: 'Created' | 'Pending' | 'Declined' | 'Canceled' | 'Completed' | 'Accepted';
      completedLessons: number;
      requesterUser: components['schemas']['User'];
      requesterUserId: number;
      school: components['schemas']['School'];
      schoolId: number;
      tutorUser: components['schemas']['User'];
      tutorUserId: number;
      lessonChats: components['schemas']['LessonChat'][];
      /** Format: date-time */
      requestAt: string;
      /** Format: date-time */
      reviewedAt: string;
      /** Format: date-time */
      approvedAt: string;
      /** Format: date-time */
      canceledAt: string;
      /** Format: date-time */
      declinedAt: string;
      /** Format: date-time */
      removedAt: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @enum {string} */
      tutorSideStatus:
        | 'Awaiting'
        | 'Approve Requirement'
        | 'Declined requirements'
        | 'Canceled'
        | 'Completed'
        | 'Accepted';
    };
    ProfileSetup: {
      id: number;
      school: components['schemas']['School'];
      schoolId: number;
      TutorUser: components['schemas']['User'];
      tutorUserId: number;
      key: string;
      value: string;
    };
    School: {
      id: number;
      title: string;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE';
      /** @enum {string} */
      organizationType: 'SCHOOL' | 'CHARITY' | 'OTHER';
      /** @enum {string} */
      requestStatus: 'PENDING' | 'REJECTED' | 'APPROVED';
      isManually: boolean;
      headTeacherName: string;
      email: string;
      picture: string;
      telephone: string;
      website: string;
      county: string;
      town: string;
      street: string;
      locality: string;
      address: string;
      postalCode: string;
      specialEducationNumber: string;
      isAuthorityApproved: boolean;
      isApproved: boolean;
      isOrganization: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      users: components['schemas']['User'][];
      blackDiaryDetails: components['schemas']['BlackDiaryDetail'][];
      students: components['schemas']['Student'][];
      tempData: components['schemas']['TempData'][];
      cohorts: components['schemas']['Cohort'][];
      parentsInSchool: components['schemas']['SchoolParent'][];
      studentsInSchool: components['schemas']['StudentInSchool'][];
      agreements: components['schemas']['TutorAgreement'][];
      userDetail: components['schemas']['User'];
      userDetailId: number;
      userAuthorityDetail: components['schemas']['User'];
      userAuthorityDetailId: number;
      userConfirmationAuthority: components['schemas']['User'];
      userConfirmationAuthorityId: number;
      /** Format: date-time */
      userConfirmationAuthorityAt: string;
      userConfirmationDetail: components['schemas']['User'];
      userConfirmationDetailId: number;
      /** Format: date-time */
      userConfirmationDetailAt: string;
      userConfirmationWebsite: components['schemas']['User'];
      userConfirmationWebsiteId: number;
      /** Format: date-time */
      userConfirmationWebsiteAt: string;
      userConfirmationSenNumber: components['schemas']['User'];
      userConfirmationSenNumberId: number;
      /** Format: date-time */
      userConfirmationSenNumberAt: string;
      schoolSetup: components['schemas']['ProfileSetup'][];
      /** @default 0 */
      numberOfStudents: { [key: string]: unknown };
    };
    BlackDiaryDetail: {
      id: number;
      school: components['schemas']['School'];
      schoolId: number;
      lesson: components['schemas']['Lesson'];
      lessonId: number;
      tutorUser: components['schemas']['User'];
      tutorUserId: number;
      diaryDetail: components['schemas']['DiaryDetail'];
      diaryDetailId: number;
      cancelByUser: components['schemas']['User'];
      cancelByUserId: number;
    };
    LessonAgreement: {
      id: number;
      curriculumContentAgreed?: boolean;
      curriculumContentText?: string;
      knowledgeGapRequirementsAgreed?: boolean;
      knowledgeGapRequirementsText?: string;
      setTestAgreed?: boolean;
      setTestText?: string;
      setHomeWorksAgreed?: boolean;
      setHomeWorksText?: string;
      additionalCommentsAgreed?: boolean;
      additionalCommentsText?: string;
      lesson: components['schemas']['Lesson'];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    StatusLog: {
      id: number;
      userId: number;
      lesson: components['schemas']['Lesson'];
      lessonId: number;
      fromState: { [key: string]: unknown };
      toState: { [key: string]: unknown };
      /** Format: date-time */
      createdAt: string;
    };
    ReviewSummary: {
      id: number;
      averageStars: number;
      reviewersCount: number;
      hoursTaught: number;
      repeatedStudents: number;
      replyInHours: number;
      schoolsApproved: number;
      schoolsReviewed: number;
      completedLessons: number;
      user: components['schemas']['User'];
      userId: number;
      reviews: components['schemas']['Review'][];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Review: {
      id: number;
      comment: string;
      tutorStars: number;
      qualityStars: number;
      isRemoved: boolean;
      studentUser: components['schemas']['User'];
      studentUserId: number;
      tutorUser: components['schemas']['User'];
      tutorUserId: number;
      lesson: components['schemas']['Lesson'];
      lessonId: number;
      summary: components['schemas']['ReviewSummary'];
      summaryId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    FundingType: {
      id: number;
      name: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      lessons: components['schemas']['Lesson'][];
    };
    AttachedData: {
      id: number;
      uid: string;
      title: string;
      link: string;
      filePath: string;
      mimeType?: string;
      fileName?: string;
      /** @enum {string} */
      attachmentType: 'File' | 'Link';
      /** @enum {string} */
      attachmentCategory: 'CurriculumContents' | 'KnowledgeGapRequirements' | 'SetHomework' | 'SetTest';
      attachmentManagers: components['schemas']['AttachmentManager'][];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    AttachmentManager: {
      id: number;
      uid: string;
      cohort: components['schemas']['Cohort'];
      cohortId: number;
      school?: components['schemas']['School'];
      lesson: components['schemas']['Lesson'];
      lessonId: number;
      createdBy: components['schemas']['User'];
      attachedData: components['schemas']['AttachedData'];
      attachedDataId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Whiteboard: {
      id: number;
      title: string;
      description?: string;
      filePath: string;
      mimeType: string;
      fileName: string;
      lesson: components['schemas']['Lesson'];
      user: components['schemas']['User'];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    LessonFlag: {
      id: number;
      /** @enum {string} */
      label: 'show' | 'hide';
      user: components['schemas']['User'];
      lesson: components['schemas']['Lesson'];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Lesson: {
      id: number;
      /** @enum {string} */
      lessonType: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
      /** @enum {string} */
      lessonState: 'REQUESTED' | 'SCHEDULED' | 'COMPLETED';
      duration: number;
      description: string;
      capacity: number;
      availability: number;
      channelGUID: string;
      /** Format: date-time */
      tutorLastOnline: string;
      tutorAgoraToken: string;
      /** @enum {string} */
      status:
        | 'Pending'
        | 'Live'
        | 'In-Chat'
        | 'Cancelled'
        | 'Declined'
        | 'Confirmed'
        | 'Missed'
        | 'Completed'
        | 'Expired'
        | 'Online-Tutor';
      /** @enum {string} */
      checkoutStatus: 'Pending' | 'Paid';
      canceledReason: string;
      price: number;
      blackDiaryDetails: components['schemas']['BlackDiaryDetail'][];
      agreement: components['schemas']['LessonAgreement'];
      user: components['schemas']['User'];
      userId: number;
      registrations: components['schemas']['Registration'][];
      diaryDetails: components['schemas']['DiaryDetail'][];
      diaryDetail: components['schemas']['DiaryDetail'][];
      cohort: components['schemas']['Cohort'];
      cohortId: number;
      tutorId: number;
      tutorLessonId: number;
      tutorUser: components['schemas']['User'];
      tutorUserId: number;
      statusLogs: components['schemas']['StatusLog'][];
      reviews: components['schemas']['Review'][];
      subject: components['schemas']['Subject'];
      subjectId: number;
      keyStageLevel: components['schemas']['KeyStageLevel'];
      keyStageLevelId: number;
      fundingType: components['schemas']['FundingType'];
      fundingTypeId: number;
      lessonChats: components['schemas']['LessonChat'][];
      attachmentManagers: components['schemas']['AttachmentManager'][];
      canceledBy: components['schemas']['User'] | null;
      whiteboard: components['schemas']['Whiteboard'][];
      flags: components['schemas']['LessonFlag'][];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      realStartedAt: string;
      /** Format: date-time */
      realFinishedAt: string;
      /** Format: date-time */
      scheduleStartedAt: string;
      /** Format: date-time */
      scheduleFinishedAt: string;
      /** Format: date-time */
      canceledAt: string;
    };
    Documents: {
      id: number;
      description: string;
      /** @enum {string} */
      documentType: 'DFE' | 'DBS' | 'PROOFOFID' | 'BIO' | 'PROFILE_PICTURE';
      extraData: string;
      filePaths: string;
      /** @enum {string} */
      status: 'Waiting' | 'Approved' | 'Expired' | 'Consider' | 'Rejected' | 'Replaced';
      rejectedDescription: string;
      /** Format: date-time */
      reviewedAt: string;
      /** @enum {string} */
      rejectedReason: 'WRONG' | 'UNCLEAR' | 'FAKE' | 'ETC';
      isRemoved: boolean;
      reviewedBy: components['schemas']['User'];
      reviewedById: number;
      user: components['schemas']['User'];
      userId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      expiredAt: string;
    };
    PupilParent: {
      id: number;
      parent: components['schemas']['User'];
      parentId: number;
      pupil: components['schemas']['User'];
      pupilId: number;
      /** @enum {string} */
      association: 'Primary' | 'Secondary';
      /** Format: date-time */
      createAt: string;
      /** Format: date-time */
      updateAt: string;
    };
    TutorPriceRate: {
      id: number;
      availableNow: number;
      oneToOne30min: number;
      oneToOne60min: number;
      smallGroup30min: number;
      smallGroup60min: number;
      largeGroup30min: number;
      largeGroup60min: number;
      school30min: number;
      school60min: number;
      tutorUser: components['schemas']['User'];
      tutorUserId: number;
    };
    Token: {
      id: number;
      token: string;
      /** @enum {string} */
      type:
        | 'REFRESH'
        | 'RESET_PASSWORD'
        | 'ACCESS'
        | 'EMAIL_VERIFICATION'
        | 'COMPLETE_INVITATION'
        | 'COMPLETE_INVITATION_CSV'
        | 'CHANGE_EMAIL';
      isActive: boolean;
      fromRefresh: boolean;
      deviceType: string;
      deviceId: string;
      appVersion: string;
      /** Format: date-time */
      expiredAt: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      user: components['schemas']['User'];
      userId: number;
    };
    Permission: {
      id: number;
      title: string;
      PermissionPart: string;
      sequence: number;
      userRolePermissions: components['schemas']['UserRolePermission'][];
      /** Format: date-time */
      updatedAt: string;
    };
    UserRolePermission: {
      id: number;
      role: components['schemas']['Role'];
      roleId: number;
      permission: components['schemas']['Permission'];
      permissionId: number;
      hasPermission: boolean;
      /** Format: date-time */
      updatedAt: string;
    };
    Role: {
      id: number;
      title: string;
      default: boolean;
      PermissionStatus: string;
      adminPart: boolean;
      school: components['schemas']['School'];
      schoolId: number;
      users: components['schemas']['User'][];
      userRolePermissions: components['schemas']['UserRolePermission'][];
      /** Format: date-time */
      updatedAt: string;
    };
    TutorQualification: {
      id: number;
      institution: string;
      qualification: string;
      level: string;
      order: number;
      /** @enum {string} */
      state: 'Waiting' | 'Approved' | 'Expired' | 'Consider' | 'Rejected' | 'Replaced';
      comment: string;
      /** Format: date-time */
      commentDate: string;
      /** Format: date-time */
      approvedDate: string;
      user: components['schemas']['User'];
      userId: number;
      reference: components['schemas']['Documents'];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    Legal: {
      id: number;
      title: string;
      /** @enum {string} */
      type: 'ABOUT_US' | 'TERMS_AND_CONDITIONS' | 'TERM_OF_SERVICES' | 'PRIVACY_POLICY' | 'GDPR' | 'FAQ';
      text: string;
      version: string;
      /** @enum {string} */
      status: 'Draft' | 'Published' | 'Expired';
      createdAdmin: components['schemas']['User'];
      createdAdminId: number;
      updatedAdmin: components['schemas']['User'];
      updatedAdminId: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    MetaData: {
      id: number;
      /** @enum {string} */
      key: 'FreeSchoolMeal';
      /** @enum {string} */
      value: 'true' | 'false';
      user: components['schemas']['User'];
      userId: number;
      /** @enum {string} */
      role:
        | 'ADMIN'
        | 'TUTOR'
        | 'STUDENT'
        | 'SCHOOL'
        | 'PARENT'
        | 'PUPIL'
        | 'TEACHER'
        | 'SCHOOL_STAFF'
        | 'ADMIN_ASSISTANT';
      /** @enum {string} */
      group:
        | 'ADMIN'
        | 'TUTOR'
        | 'STUDENT'
        | 'SCHOOL'
        | 'PARENT'
        | 'PUPIL'
        | 'TEACHER'
        | 'SCHOOL_STAFF'
        | 'ADMIN_ASSISTANT';
      /** Format: date-time */
      createdAt: string;
    };
    TeachingStatus: {
      id: number;
      title: string;
      isSchoolRequired: boolean;
      users: components['schemas']['User'][];
    };
    Notification: {
      id: number;
      /** @enum {string} */
      eventType:
        | 'User_Registered'
        | 'USER_CHANGE_EMAIL'
        | 'User_Reset_password'
        | 'New_Chat_Message'
        | 'Pupil_Invited_Knektu'
        | 'Pupil_Lesson_Requested'
        | 'Pupil_Lesson_Scheduled'
        | 'Pupil_Lesson_Cancelled'
        | 'Pupil_Lesson_Edited'
        | 'Pupil_Added_Parent'
        | 'Pupil_Invited_Cohort'
        | 'Teacher_Lesson_Requested'
        | 'Teacher_Lesson_Booked'
        | 'Teacher_Lesson_Cancelled'
        | 'Teacher_Lesson_Completed'
        | 'Teacher_Lesson_Edited'
        | 'Teacher_Messages_Required'
        | 'Teacher_Messages_Scheduled'
        | 'Teacher_Cohort_Pupil_Added'
        | 'Admin_Tutor_Registration'
        | 'Admin_School_Registration'
        | 'Admin_Tutor_Document_Uploaded'
        | 'Admin_Tutor_Document_Approved'
        | 'Admin_Tutor_Rejected'
        | 'Admin_User_Invited'
        | 'School_Lesson_Requested'
        | 'School_Lesson_Booked'
        | 'School_Lesson_Cancelled'
        | 'School_Lesson_Completed'
        | 'School_Lesson_Edited'
        | 'School_Messages_Required'
        | 'School_Messages_scheduled'
        | 'School_Messages_Agreement'
        | 'School_User_Uploaded'
        | 'School_User_Removed'
        | 'School_User_Invited'
        | 'School_Cohort_Pupil_Added'
        | 'Tutor_Documents_Uploaded'
        | 'Tutor_Documents_Rejected'
        | 'Tutor_Documents_Approved'
        | 'Tutor_Documents_Expired'
        | 'Tutor_Lesson_Requested'
        | 'Tutor_Lesson_Scheduled'
        | 'Tutor_Lesson_Cancelled'
        | 'Tutor_Lesson_Edited'
        | 'Tutor_Lesson_Reminder'
        | 'Tutor_Message_Requested'
        | 'Tutor_Message_Scheduled'
        | 'Tutor_Message_Agreement';
      /** @enum {string} */
      userType: 'Admin' | 'Pupil' | 'Student' | 'Tutor' | 'Teacher' | 'Staff' | 'School';
      title: string;
      summary: string;
      link: string;
      extraData: string;
      user: components['schemas']['User'];
      userId: number;
      /** Format: date-time */
      readAt: string;
      /** Format: date-time */
      createdAt: string;
    };
    Audit: {
      id: number;
      description: string;
      /** @enum {string} */
      format: 'JSON' | 'STRING';
      /** @enum {string} */
      level: 'INFO' | 'WARNING' | 'ERROR';
      /** @enum {string} */
      type: 'ADMIN' | 'SCHOOL';
      user: components['schemas']['User'];
      /** Format: date-time */
      createdAt: string;
    };
    TutorOnline: {
      id: number;
      /** Format: date-time */
      expiredAt: string;
      user: components['schemas']['User'];
      onlineTimeInSeconds: number;
    };
    Jobs: {
      id: number;
      createdBy: components['schemas']['User'];
      createdById: number;
      title: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      users: components['schemas']['User'][];
    };
    User: {
      id: number;
      /** @enum {string} */
      status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      /** @enum {string} */
      tutorAdminStatus: 'APPROVED' | 'REJECTED' | 'SUSPENDED' | 'PENDING';
      /** Format: date-time */
      viewTutorAdminStatusAt: string;
      /** Format: date-time */
      tutorAdminApprovedAt: string;
      tutorAdminRejectedDescription: string;
      /** @enum {string} */
      tutorAdminRejectedReason: 'FAKE_DOCUMENT' | 'INCORRECT_INFORMATION' | 'ETC';
      tutorAdminChangeStatusBy: components['schemas']['User'];
      tutorAdminChangeStatusById: number;
      email: string;
      tempEmail: string;
      phone: string;
      title: string;
      firstName: string;
      lastName: string;
      fullName: string;
      /** Format: date-time */
      birthedAt: string;
      profilePicture: string;
      parentAddressLine1: string;
      parentAddressLine2: string;
      parentContactCity: string;
      parentContactPostcode: string;
      /** @enum {string} */
      processStatus: 'Incomplete' | 'Awaiting_review' | 'Rejected' | 'Approved';
      /** Format: date-time */
      processStatusAt: string;
      guid: string;
      password: string;
      lesson: components['schemas']['Lesson'][];
      userAdditionalNeedTutorTeacher: components['schemas']['UserAdditionalNeed'][];
      userAdditionalNeedStudentPupil: components['schemas']['UserAdditionalNeed'][];
      userKeyStageLevelTutorTeacher: components['schemas']['UserKeyStageLevel'][];
      userKeyStageLevelStudentPupil: components['schemas']['UserKeyStageLevel'][];
      lessonCreated: components['schemas']['Lesson'][];
      stripeCustomerId: string;
      stripeAccountId: string;
      isConnectedToStripe: boolean;
      isReceivedMarketingEmail: boolean;
      /** Format: date-time */
      emailVerifiedAt: string;
      isEmailVerified: boolean;
      /** Format: date-time */
      phoneVerifiedAt: string;
      isPhoneVerified: boolean;
      /** Format: date-time */
      lastLoginAt: string;
      /** Format: date-time */
      lastFailureLoginAt: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      cohorts: components['schemas']['Cohort'][];
      reviewsStudent: components['schemas']['Review'][];
      reviewsTutor: components['schemas']['Review'][];
      documentReviewed: components['schemas']['Documents'][];
      blackDiaryDetails: components['schemas']['BlackDiaryDetail'][];
      blackDiaryDetailsCancel: components['schemas']['BlackDiaryDetail'][];
      tutorChangedStatus: components['schemas']['User'][];
      cohortsPupil: components['schemas']['Cohort'][];
      SchoolsForParent: components['schemas']['SchoolParent'][];
      myPupils: components['schemas']['PupilParent'][];
      myParents: components['schemas']['PupilParent'][];
      accountLinkingUid: string;
      priceRate: components['schemas']['TutorPriceRate'];
      documents: components['schemas']['Documents'][];
      deviceText: string;
      deviceArray: components['schemas']['UserDeviceDto'][];
      tokens: components['schemas']['Token'][];
      roles: components['schemas']['Role'][];
      tutorQualifications: components['schemas']['TutorQualification'][];
      summary: components['schemas']['ReviewSummary'];
      student: components['schemas']['Student'];
      studentId: number;
      updatedLegals: components['schemas']['Legal'][];
      createdLegals: components['schemas']['Legal'][];
      invitedByUser: components['schemas']['User'];
      invitedByUserId: number;
      invites: components['schemas']['User'][];
      registration: components['schemas']['Registration'][];
      school: components['schemas']['School'];
      schoolId: number;
      schoolUserDetail: components['schemas']['School'];
      schoolUserAuthorityDetail: components['schemas']['School'];
      metaData: components['schemas']['MetaData'][];
      tempData: components['schemas']['TempData'][];
      agreements: components['schemas']['TutorAgreement'][];
      schoolUserConfirmationAuthority: components['schemas']['School'][];
      teachingStatus: components['schemas']['TeachingStatus'];
      teachingStatusId: number;
      mainSubject: components['schemas']['Subject'];
      mainSubjectId: number;
      additionalSubjects: components['schemas']['Subject'][];
      notifications: components['schemas']['Notification'][];
      diaries: components['schemas']['Diary'][];
      audits: components['schemas']['Audit'][];
      tutorOnline: components['schemas']['TutorOnline'];
      job: components['schemas']['Jobs'];
      jobId: number;
      jobCreated: components['schemas']['Jobs'][];
      whiteboard: components['schemas']['Whiteboard'][];
      lessonFlags: components['schemas']['LessonFlag'][];
    };
    AuditOutputDto: {
      id: number;
      description: string;
      /** @enum {string} */
      format: 'JSON' | 'STRING';
      /** @enum {string} */
      level: 'INFO' | 'WARNING' | 'ERROR';
      user?: components['schemas']['UserFullNameOutputDto'];
      /** Format: date-time */
      createdAt: string;
    };
    AuditPaginationOutputDto: {
      data: components['schemas']['AuditOutputDto'][];
      count: number;
      currentPage: number;
      nextPage: number;
      prevPage: number;
      lastPage: number;
    };
  };
}

export interface operations {
  AppController_getHello: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  AppController_getTimeZone: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  NotificationsController_getNotifications: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        userType?: 'Admin' | 'Pupil' | 'Student' | 'Tutor' | 'Teacher' | 'Staff' | 'School';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginateNotificationOutputDto'];
        };
      };
    };
  };
  NotificationsController_markAllNotificationsRead: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  NotificationsController_markNotificationRead: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: unknown;
    };
  };
  UsersController_getInfo: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['UserWithProfilePictureDto'];
        };
      };
    };
  };
  UsersController_updatePassword: {
    parameters: {};
    responses: {
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePasswordInputDto'];
      };
    };
  };
  UsersController_requestDeleteAccount: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['RequestDeleteAccountOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestDeleteAccountInputDto'];
      };
    };
  };
  UsersController_verifyDeleteAccount: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  UsersController_updateIsReceivedMarketingEmail: {
    parameters: {};
    responses: {
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateReceivedMarketingEmailInputDto'];
      };
    };
  };
  UsersController_getDevices: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['UserDeviceDto'][];
        };
      };
    };
  };
  UsersController_postDevice: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AddDeviceInputDto'];
      };
    };
  };
  UsersController_getDocument: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        state?: 'view' | 'download';
      };
    };
    responses: {
      200: unknown;
    };
  };
  UsersController_getUserProfilePicture: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        state?: 'view' | 'download';
      };
    };
    responses: {
      200: unknown;
    };
  };
  UsersController_getSelfProfilePicture: {
    parameters: {
      query: {
        state?: 'view' | 'download';
      };
    };
    responses: {
      200: unknown;
    };
  };
  UserAccountLinkingController_getLinkedAccount: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LinkedAccountsOutputDto'][];
        };
      };
    };
  };
  UserAccountLinkingController_linkTwoAccounts: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LinkAccountInputDto'];
      };
    };
  };
  UserAccountLinkingController_removeLinkOfAccount: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LinkAccountInputDto'];
      };
    };
  };
  TutorsController_updateProfilePicture: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          profilePicture?: string;
        };
      };
    };
  };
  TutorsController_updateTutor: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTutorDto'];
      };
    };
  };
  TutorsController_getStatus: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorBioOutputDto'];
        };
      };
    };
  };
  TutorsController_setStatus: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BioTutorInputDto'];
      };
    };
  };
  TutorsController_getTutorDetail: {
    parameters: {
      path: {
        tutorId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorDetailOutputDto'];
        };
      };
    };
  };
  TutorsController_getTutorDetails: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorDetailOutputDto'];
        };
      };
    };
  };
  TutorsController_fetchHome: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorHomeOutputDto'];
        };
      };
    };
  };
  TutorsController_saveNewEmail: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NewEmailInputDto'];
      };
    };
  };
  TutorsDiaryController_getLessonDiaryPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** Used for searching by lesson type */
        type?: 'AVAILABILITY' | 'SMALL_GROUP' | 'LARGE_GROUP';
        /** Used for searching by repeat type */
        repeatType?: 'CUSTOM' | 'DAILY' | 'WEEKLY';
        /** Used for searching by status */
        status?: 'Active' | 'Paused';
        /** Used for searching by state */
        state: 'During' | 'Expired';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchTutorLessonDiaryOutputPaginationDto'];
        };
      };
    };
  };
  TutorsDiaryController_getTutorLessonDiaryPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchLessonDiaryOutputPaginationDto'];
        };
      };
    };
  };
  TutorsDiaryController_getTutorExpiredDiaryPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchLessonDiaryOutputPaginationDto'];
        };
      };
    };
  };
  TutorsDiaryController_getLessonDiaryDetail: {
    parameters: {
      path: {
        did: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['DiaryDetailLessonOutputDto'];
        };
      };
    };
  };
  TutorsDiaryController_updateTutorDiaryStatus: {
    parameters: {
      path: {
        did: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorDiarySuccessMessageDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TutorDiaryUpdateStatusDto'];
      };
    };
  };
  TutorsDiaryController_getTutorDiaryAvailability: {
    parameters: {
      path: {
        did: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorDiaryDetailOutputDto'][];
        };
      };
    };
  };
  TutorsDiaryController_updateTutorDiaryDetail: {
    parameters: {
      path: {
        did: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorDiarySuccessMessageDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TutorUpdateDiaryAvailabilityInputDto'];
      };
    };
  };
  TutorsDiaryController_pauseTutorDiary: {
    parameters: {
      path: {
        diaryId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  TutorsDiaryController_activeTutorDiary: {
    parameters: {
      path: {
        diaryId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  TutorsDiaryController_deleteTutorDiary: {
    parameters: {
      path: {
        diaryId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  TutorsDiaryController_getDiaryForEdit: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorDiaryForEdit'];
        };
      };
    };
  };
  TutorsDiaryController_editTutorDiary: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DiariesTutorsCreateAvailabilityInputDto'];
      };
    };
  };
  TutorLessonController_acceptLesson: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['LessonResponseOutputDto'];
        };
      };
    };
  };
  TutorLessonController_cancelLesson: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonResponseOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LessonReasonDeclinedDto'];
      };
    };
  };
  TutorLessonController_declineLesson: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonResponseOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LessonReasonDeclinedDto'];
      };
    };
  };
  TutorLessonController_getLessonDetailCompleted: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorCompletedLessonDetailOutputDto'];
        };
      };
    };
  };
  TutorLessonController_getLessonPriceSummary: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorLessonPriceSummary'];
        };
      };
    };
  };
  TutorLessonController_getLessonChatMessages: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatMessageOutputDto'][];
        };
      };
    };
  };
  TutorLessonController_getLessonChatFiles: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatFilesOutputDto'][];
        };
      };
    };
  };
  TutorLessonController_getTutorLessonReviews: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonReviewsOutputDto'];
        };
      };
    };
  };
  TutorSchoolController_getTutorAgreement: {
    parameters: {
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorSchoolAgreementOutputDto'];
        };
      };
    };
  };
  TutorSchoolController_declineTutorAgreement: {
    parameters: {
      path: {
        schoolId: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  TutorSchoolController_acceptTutorAgreement: {
    parameters: {
      path: {
        schoolId: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  TutorSchoolController_cancelTutorAgreement: {
    parameters: {
      path: {
        schoolId: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  TutorSchoolController_getApprovedProfileInfo: {
    parameters: {
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorSchoolAgreementInfoOutputDto'];
        };
      };
    };
  };
  TutorsOnlineController_getStatus: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GetStatusOutputResponseDto'];
        };
      };
    };
  };
  TutorsOnlineController_setStatusOnline: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['TutorOnlineOutputStatusDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TutorsOnlineDto'];
      };
    };
  };
  TutorsOnlineController_updateStatusOnline: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['TutorOnlineOutputStatusDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TutorsOnlineDto'];
      };
    };
  };
  TutorsOnlineController_setStatusOffline: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['TutorOnlineOutputStatusDto'];
        };
      };
    };
  };
  TutorsPricesController_getPrices: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PriceRatesDto'];
        };
      };
    };
  };
  TutorsPricesController_setPrices: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PriceRatesDto'];
      };
    };
  };
  TutorAgreementController_getApprovalAgreements: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search in school name,	requester Name,Location */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchTutorApprovalOutputPaginationDto'];
        };
      };
    };
  };
  TutorAgreementController_getReviewedAgreements: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search in school name,	requester Name,Location */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchTutorReviewedOutputPaginationDto'];
        };
      };
    };
  };
  TutorAgreementController_getApprovedAgreements: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search in school name,	requester Name,Location */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchTutorApprovedOutputPaginationDto'];
        };
      };
    };
  };
  TutorsDocumentsController_getDocument: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorDocumentsOutputDto'][];
        };
      };
    };
  };
  TutorsDocumentsController_getDocumentStatus: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['DocumentStatusOutputDto'];
        };
      };
    };
  };
  TutorsDocumentsController_viewApproved: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  TutorsDocumentsController_uploadDfe: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          dfeFile?: string;
          dfeNumber?: number;
        };
      };
    };
  };
  TutorsDocumentsController_uploadDfePut: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorDocumentOutputStatus'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TutorDocumentDfePutDto'];
      };
    };
  };
  TutorsDocumentsController_uploadDbs: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          dbsFile?: string;
          dbsReferenceNumber?: number;
          dbsExpiredAt?: string;
        };
      };
    };
  };
  TutorsDocumentsController_uploadDbsPut: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TutorDocumentDbsPutDto'];
      };
    };
  };
  TutorsDocumentsController_uploadProofOfId: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          proofOfId?: string;
        };
      };
    };
  };
  TutorsQualificationsController_get: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorQualificationOutputDto'][];
        };
      };
    };
  };
  TutorsQualificationsController_add: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['TutorQualificationOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TutorQualificationInputDto'];
      };
    };
  };
  TutorsQualificationsController_update: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TutorQualificationBulkUpdateDto'];
      };
    };
  };
  TutorsQualificationsController_addBulk: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['TutorQualificationBulkOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TutorQualificationBulkInputDto'];
      };
    };
  };
  TutorsQualificationsController_delete: {
    parameters: {
      path: {
        qualificationId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  AdminsController_getHomeMetaData: {
    parameters: {
      query: {
        startedAt: string;
        endedAt: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdminsHomeMetaDataOutputDto'];
        };
      };
    };
  };
  AdminsController_upload: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['AdminsUploadedFileOutputDto'];
        };
      };
    };
  };
  AdminsController_getUserProfilePicture: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        state?: 'view' | 'download';
      };
    };
    responses: {
      200: unknown;
    };
  };
  AdminsUsersController_getUserList: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** user Lname Fname */
        search?: string;
        /** school name */
        schoolName?: string;
        /** user email address */
        email?: string;
        /** user role */
        userType?: 'Admin' | 'Pupil' | 'Student' | 'Tutor' | 'Teacher' | 'Staff' | 'School';
        /** user status */
        status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchAdminUserOutputPaginationDto'];
        };
      };
    };
  };
  AdminsUsersController_addJob: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AddJobInputDto'];
      };
    };
  };
  AdminsUsersController_getJob: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['JobOutputDto'][];
        };
      };
    };
  };
  AdminsUsersController_getUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdminUserOutputDto'];
        };
      };
    };
  };
  AdminsUsersController_editUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserInputDto'];
      };
    };
  };
  AdminsUsersController_resendInviteUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: unknown;
    };
  };
  AdminsUsersController_disableUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: unknown;
    };
  };
  AdminsUsersController_activeUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  AdminsUsersController_removeUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  AdminsUsersController_getUserSearchMeta: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdminUserSearchMeta'];
        };
      };
    };
  };
  AdminsUsersController_getUserAddMeta: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdminUserAddMeta'];
        };
      };
    };
  };
  AdminsUsersController_getUsersByStatus: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['UserSummaryOutputPaginationDto'];
        };
      };
    };
  };
  AdminsUsersController_verifyNewAdmin: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['VerifyNewUserDto'];
      };
    };
  };
  AdminsUsersController_updateStatus: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateStatusDto'];
      };
    };
  };
  AdminsUsersController_addParent: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AddParentInputDto'];
      };
    };
  };
  AdminsUsersController_verifyNewParent: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['VerifyNewUserDto'];
      };
    };
  };
  AdminsUsersController_getKnektuUserDetail: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdminUserDetailOutputDto'];
        };
      };
    };
  };
  AdminsUsersController_getPendingKnektuUser: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchKnektuUserOutputPaginationDto'];
        };
      };
    };
  };
  AdminsUsersController_getActiveKnektuUser: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchKnektuUserOutputPaginationDto'];
        };
      };
    };
  };
  AdminsUsersController_getRemovedKnektuUser: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchKnektuUserOutputPaginationDto'];
        };
      };
    };
  };
  AdminsUsersController_addUser: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AddUserInputDto'];
      };
    };
  };
  AdminsRolesController_getAllAdminRoles: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RoleOutputDto'][];
        };
      };
    };
  };
  AdminsRolesController_getAllRoles: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RoleOutputDto'][];
        };
      };
    };
  };
  AdminsRolesController_getAllAdminPermissions: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PermissionDto'][];
        };
      };
    };
  };
  AdminsRolesController_getAllRoleById: {
    parameters: {
      path: {
        roleId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RoleOutputDto'];
        };
      };
    };
  };
  AdminsRolesController_deleteRoleById: {
    parameters: {
      path: {
        roleId: number;
      };
    };
    responses: {
      200: unknown;
    };
  };
  AdminsRolesController_updateRoleById: {
    parameters: {
      path: {
        roleId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRoleDto'];
      };
    };
  };
  AdminsRolesController_addRole: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRoleDto'];
      };
    };
  };
  AdminTutorLessonController_searchLessonPagination: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** Used for searching by LessonTypes */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** subject title */
        subject?: string;
        /** student name */
        student?: string;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchTutorLessonOutputPaginationDto'];
        };
      };
    };
  };
  AdminTutorSchoolController_getSchoolsApprovals: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        schoolName?: string;
        requesterName?: string;
        location?: string;
        /** For '<u>approval requests</u>' set to <b>In Process</b> */
        status: 'In Process' | 'Reviewed' | 'Approved' | 'Delisted';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchTutorSchoolsApprovalsOutputPaginationDto'];
        };
      };
    };
  };
  AdminTeacherController_getTeachersPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** teacher Fname */
        firstName?: string;
        /** teacher Lname */
        lastName?: string;
        /** school name */
        school?: string;
        /** teacher emailAddress */
        email?: string;
        /** teacher cohort name */
        cohort?: string;
        /** teacher subject name */
        subject?: string;
        status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchAdminTeachersListOutputPaginationDto'];
        };
      };
    };
  };
  AdminTeacherController_getTeacher: {
    parameters: {
      path: {
        teacherUserId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdminTeacherInfoOutputDto'];
        };
      };
    };
  };
  AdminPupilController_getPupilDetails: {
    parameters: {
      path: {
        pupilUserId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdminPupilInfoOutputDto'];
        };
      };
    };
  };
  AdminPupilController_getParentsOfPupil: {
    parameters: {
      path: {
        pupilUserId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilParentDetailsDto'][];
        };
      };
    };
  };
  AdminTutorController_getPendingTutors: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** tutor fullName */
        tutor?: string;
        /** subject title */
        subject?: string;
        /** process status */
        processStatus?: 'Incomplete' | 'Awaiting_review' | 'Rejected' | 'Approved';
        /** Used for searching by state */
        tutorAdminStatusEnum: 'APPROVED' | 'REJECTED' | 'SUSPENDED' | 'PENDING';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdminTutorOutputPaginationDto'];
        };
      };
    };
  };
  AdminTutorController_getProfileInfo: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['UserTutorProfileInfoOutputDto'];
        };
      };
    };
  };
  AdminTutorController_getQualification: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorQualificationOutputDto'][];
        };
      };
    };
  };
  AdminTutorController_documentList: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorDocumentsOutputDto'][];
        };
      };
    };
  };
  AdminTutorController_acceptDocumentOfTutor: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorDocumentsOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TutorAcceptDocumentDto'];
      };
    };
  };
  AdminTutorController_rejectDocumentOfTutors: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorDocumentsOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TutorRejectDocumentDto'];
      };
    };
  };
  AdminTutorController_acceptProfileImageOfTutors: {
    parameters: {
      path: {
        tId: number;
        pId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  AdminTutorController_rejectProfileImageOfTutors: {
    parameters: {
      path: {
        tId: number;
        pId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserDocumentRejectDto'];
      };
    };
  };
  AdminTutorController_rejectTeacher: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TutorRejectDto'];
      };
    };
  };
  AdminTutorController_suspendTeacher: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TutorRejectDto'];
      };
    };
  };
  AdminTutorController_approveTeacher: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  AdminSchoolController_getSchoolStaffPagination: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** staff firstName */
        firstName?: string;
        /** staff lastName */
        lastName?: string;
        /** staff emailAddress */
        emailAddress?: string;
        /** staff status */
        staffStatus: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolStaffOutputPaginationDto'];
        };
      };
    };
  };
  AdminSchoolController_getActiveSchoolPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolsOutputPaginationDto'];
        };
      };
    };
  };
  AdminSchoolController_getDisableSchoolPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolsOutputPaginationDto'];
        };
      };
    };
  };
  AdminSchoolController_getSchoolStatus: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolStatusOutputDto'];
        };
      };
    };
  };
  AdminSchoolController_disableStatusSchool: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  AdminSchoolController_activeStatusSchool: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  AdminSchoolController_getSchoolFund: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': number;
        };
      };
    };
  };
  AdminSchoolController_getSchoolName: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': string;
        };
      };
    };
  };
  AdminSchoolController_getAllSchoolAllocations: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolTopupHistoryPaginationOutputDto'];
        };
      };
    };
  };
  AdminSchoolController_getSchoolCohortsAllocations: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginateSchoolCohortAllocationsOutputDto'];
        };
      };
    };
  };
  AdminSchoolController_getTutorApprovals: {
    parameters: {
      path: {
        schoolId: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** tutor name */
        tutor?: string;
        /** subject title */
        subject?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolTutorAgreementOutputPaginationDto'];
        };
      };
    };
  };
  AdminSchoolController_getTutorAgreementPagination: {
    parameters: {
      path: {
        schoolId: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** tutor name */
        tutor?: string;
        /** subject title */
        subject?: string;
        /** Used for searching by status */
        status?: 'In Process' | 'Reviewed' | 'Approved' | 'Delisted';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolTutorAgreementOutputPaginationDto'];
        };
      };
    };
  };
  AdminSchoolController_getAllTutors: {
    parameters: {
      query: {
        /** Tutor keyStage level Ids */
        keyStageLevelId: number;
        /** Tutor subject Id */
        mainSubjectId: number;
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FindTutorsOutputDto'][];
        };
      };
    };
  };
  AdminSchoolController_getFullProfileDetails: {
    parameters: {
      path: {
        id: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorProfileFullOutputDto'];
        };
      };
    };
  };
  AdminSchoolController_getAgreementStatus: {
    parameters: {
      path: {
        id: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  AdminSchoolController_getTutorReview: {
    parameters: {
      path: {
        tutorUserId: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorReviewOutputDto'];
        };
      };
    };
  };
  AdminSchoolController_getTutorReviewSummary: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ReviewSummaryOutputDto'];
        };
      };
    };
  };
  AdminSchoolController_getAllAgreements: {
    parameters: {
      path: {
        id: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AgreementOutputDto'];
        };
      };
    };
  };
  AdminSchoolController_priceSummary: {
    parameters: {
      path: {
        tutorUserId: number;
        schoolId: number;
      };
      query: {
        pupils: number;
        duration: 30 | 60;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PriceSummaryOutputDto'];
        };
      };
    };
  };
  AdminSchoolController_getLessons: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** cohort title */
        cohort?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** subject title */
        subject?: string;
        /** pupil name */
        pupil?: string;
        /** tutor name */
        tutor?: string;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonsCohortOutputPaginationDto'];
        };
      };
    };
  };
  AdminSchoolController_getSchoolStatistic: {
    parameters: {
      query: {
        fromDate: string;
        toDate: string;
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StatisticOutputDto'];
        };
      };
    };
  };
  AdminLessonController_getAdminLessonPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search in cohort, teacher, school, subject, pupils, lessonType */
        search?: string;
        /** used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdminLessonOutputPaginationDto'];
        };
      };
    };
  };
  AdminLessonController_getLessonDetail: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdminLessonDetailOutputDto'];
        };
      };
    };
  };
  AdminLessonController_getLessonDetailCompleted: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdminCompletedLessonDetailOutputDto'];
        };
      };
    };
  };
  AdminLessonController_getLessonPriceSummary: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdminLessonPriceSummary'];
        };
      };
    };
  };
  AdminLessonController_getLessonChatMessages: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatMessageOutputDto'][];
        };
      };
    };
  };
  AdminLessonController_getLessonChatFiles: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatFilesOutputDto'][];
        };
      };
    };
  };
  AdminLessonController_getTutorLessonReviews: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonReviewsOutputDto'];
        };
      };
    };
  };
  AdminCohortController_getCohortPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** cohort, teacher, school, subject */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchAdminCohortOutputPaginationDto'];
        };
      };
    };
  };
  AdminCohortController_getCohortById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortSingleOutputDto'];
        };
      };
    };
  };
  AdminCohortController_getCohortLesson: {
    parameters: {
      path: {
        cid: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search in subject, pupil, tutor */
        search?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonsCohortOutputPaginationDto'];
        };
      };
    };
  };
  AdminCohortController_getCohortPupilsPagination: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchCohortPupilsOutputPaginationDto'];
        };
      };
    };
  };
  AdminSchoolCohortController_getCohorts: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search in cohort, teacher, subject */
        search?: string;
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolCohortOutputPaginationDto'];
        };
      };
    };
  };
  AdminSchoolCohortController_getCohortById: {
    parameters: {
      path: {
        cohortId: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortSingleOutputDto'];
        };
      };
    };
  };
  AdminSchoolCohortController_getCohortLesson: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search in subject, pupil, tutor */
        search?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
      path: {
        cohortId: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonsCohortOutputPaginationDto'];
        };
      };
    };
  };
  AdminSchoolCohortController_getCohortLessonDetail: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortLessonDetailDto'];
        };
      };
    };
  };
  AdminSchoolCohortController_getCohortPupilsPagination: {
    parameters: {
      path: {
        cohortId: number;
        schoolId: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchCohortPupilsOutputPaginationDto'];
        };
      };
    };
  };
  AdminSchoolCohortController_getPupilsName: {
    parameters: {
      path: {
        cohortId: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RegisteredPupilsInCohortDto'][];
        };
      };
    };
  };
  AdminSchoolPupilController_getUploadedPupil: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsPaginationOutputDto'];
        };
      };
    };
  };
  AdminSchoolPupilController_getPendingPupil: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsPaginationOutputDto'];
        };
      };
    };
  };
  AdminSchoolPupilController_getActivePupil: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsPaginationOutputDto'];
        };
      };
    };
  };
  AdminSchoolPupilController_getDisabledPupil: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsPaginationOutputDto'];
        };
      };
    };
  };
  AdminSchoolPupilController_getSchoolPupilStatus: {
    parameters: {
      path: {
        pupilId: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolPupilStatusDto'];
        };
      };
    };
  };
  AdminSchoolPupilController_getPupilForEdit: {
    parameters: {
      path: {
        pupilId: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsOutputForEditDto'];
        };
      };
    };
  };
  AdminSchoolTutorController_getDiaries: {
    parameters: {
      path: {
        tutorUserId: number;
        schoolId: number;
      };
      query: {
        /** Date and time from YYYY-MM-DD HH:mm:ss */
        startDate: string;
        /** Date and time to YYYY-MM-DD HH:mm:ss */
        endDate: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorProfileFullDiaryDto'][];
        };
      };
    };
  };
  AdminSchoolTeacherController_getTeacher: {
    parameters: {
      path: {
        teacherUserId: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolTeacherInfoOutputDto'];
        };
      };
    };
  };
  AdminSchoolTeacherController_getTeacherDetail: {
    parameters: {
      path: {
        teacherUserId: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TeacherDetailOutputDto'];
        };
      };
    };
  };
  AdminSchoolTeacherController_getTeacherPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** teacher firstName */
        firstName?: string;
        /** teacher lastName */
        lastName?: string;
        /** teacher emailAddress */
        emailAddress?: string;
        /** teacher role */
        role?: string;
        /** teacher cohort */
        cohort?: string;
        /** teacher subject */
        subject?: string;
        /** teacher keyStage */
        keyStage?: number;
        /** teacher status */
        teacherStatus: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolTeacherOutputPaginationDto'];
        };
      };
    };
  };
  AdminSchoolRoleController_getAllRolesInSchool: {
    parameters: {
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolRolesOutputDto'][];
        };
      };
    };
  };
  AdminSchoolRoleController_allCohortLeads: {
    parameters: {
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AssignedRolesOutputDto'][];
        };
      };
    };
  };
  AdminSchoolStaffController_getSchoolStaffPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** staff firstName */
        firstName?: string;
        /** staff lastName */
        lastName?: string;
        /** staff emailAddress */
        emailAddress?: string;
        /** staff status */
        staffStatus: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolStaffOutputPaginationDto'];
        };
      };
    };
  };
  AdminSchoolStaffController_getCohortById: {
    parameters: {
      path: {
        staffUserId: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolStaffInfoDto'];
        };
      };
    };
  };
  AdminSchoolParentController_getUploadedParents: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginateParentOutputDto'];
        };
      };
    };
  };
  AdminSchoolParentController_getPendingParents: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginateParentOutputDto'];
        };
      };
    };
  };
  AdminSchoolParentController_getActiveParents: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginateParentOutputDto'];
        };
      };
    };
  };
  AdminSchoolParentController_getDisabledParents: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginateParentOutputDto'];
        };
      };
    };
  };
  AdminSchoolParentController_getDetails: {
    parameters: {
      path: {
        parentId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ParentDetailOutputDto'];
        };
      };
    };
  };
  AdminSchoolCohortPupilController_getRegisteredPupilParents: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilParentDetailsDto'][];
        };
      };
    };
  };
  AdminSchoolCohortPupilController_getPupilLesson: {
    parameters: {
      path: {
        pid: number;
        schoolId: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** cohort title */
        cohort?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** subject title */
        subject?: string;
        /** pupil name */
        pupil?: string;
        /** tutor name */
        tutor?: string;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonOutputPaginationDto'];
        };
      };
    };
  };
  AdminSchoolCohortPupilController_getPupilForEdit: {
    parameters: {
      path: {
        pid: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsOutputForEditDto'];
        };
      };
    };
  };
  AdminSchoolLessonController_getLessonDetailCompleted: {
    parameters: {
      path: {
        lessonId: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolCompletedLessonDetailOutputDto'];
        };
      };
    };
  };
  AdminSchoolLessonController_getLessonPriceSummary: {
    parameters: {
      path: {
        lessonId: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolLessonPriceSummary'];
        };
      };
    };
  };
  AdminSchoolLessonController_getLessonChatMessages: {
    parameters: {
      path: {
        lessonId: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatMessageOutputDto'][];
        };
      };
    };
  };
  AdminSchoolLessonController_getLessonChatFiles: {
    parameters: {
      path: {
        lessonId: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatFilesOutputDto'][];
        };
      };
    };
  };
  AdminSchoolLessonController_getTutorLessonReviews: {
    parameters: {
      path: {
        lessonId: number;
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolsLessonReviewsOutputDto'];
        };
      };
    };
  };
  AdminCohortPupilController_getPupilForEdit: {
    parameters: {
      path: {
        pid: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsOutputForEditDto'];
        };
      };
    };
  };
  AdminCohortPupilController_getPupilLesson: {
    parameters: {
      path: {
        pid: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** cohort title */
        cohort?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** subject title */
        subject?: string;
        /** pupil name */
        pupil?: string;
        /** tutor name */
        tutor?: string;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonOutputPaginationDto'];
        };
      };
    };
  };
  AdminCohortPupilController_getRegisteredPupilParents: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilParentDetailsDto'][];
        };
      };
    };
  };
  AdminUserTeacherController_getTeacherDetail: {
    parameters: {
      path: {
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TeacherDetailOutputDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getParentsOfTeacher: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginataionParentOutputDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getDetails: {
    parameters: {
      path: {
        parentId: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ParentDetailOutputDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getCohortsOfTeacher: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** cohort, teacher, school, subject */
        search?: string;
      };
      path: {
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchAdminCohortOutputPaginationDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getLessonsOfTeacher: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** cohort title */
        cohort?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** subject title */
        subject?: string;
        /** pupil name */
        pupil?: string;
        /** tutor name */
        tutor?: string;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
      path: {
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonsCohortOutputPaginationDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getTeacherLessonDetail: {
    parameters: {
      path: {
        lessonId: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortLessonDetailDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getLessonDetailCompleted: {
    parameters: {
      path: {
        lessonId: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolCompletedLessonDetailOutputDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getLessonPriceSummary: {
    parameters: {
      path: {
        lessonId: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolLessonPriceSummary'];
        };
      };
    };
  };
  AdminUserTeacherController_getLessonChatMessages: {
    parameters: {
      path: {
        lessonId: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatMessageOutputDto'][];
        };
      };
    };
  };
  AdminUserTeacherController_getLessonChatFiles: {
    parameters: {
      path: {
        lessonId: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatFilesOutputDto'][];
        };
      };
    };
  };
  AdminUserTeacherController_getTutorLessonReviews: {
    parameters: {
      path: {
        lessonId: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolsLessonReviewsOutputDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getLessonWhiteboards: {
    parameters: {
      path: {
        lessonId: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonWhiteboardOutputDto'][];
        };
      };
    };
  };
  AdminUserTeacherController_getUploadedPupil: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsPaginationOutputDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getPendingPupil: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsPaginationOutputDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getActivePupil: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsPaginationOutputDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getDisabledPupil: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsPaginationOutputDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getPupilForEdit: {
    parameters: {
      path: {
        pid: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsOutputForEditDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getSchoolPupilStatus: {
    parameters: {
      path: {
        pupilId: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolPupilStatusDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getPupilLesson: {
    parameters: {
      path: {
        pid: number;
        userId: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** cohort title */
        cohort?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** subject title */
        subject?: string;
        /** pupil name */
        pupil?: string;
        /** tutor name */
        tutor?: string;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonOutputPaginationDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getLessonDetail: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortLessonDetailDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getCohortById: {
    parameters: {
      path: {
        cohortId: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortSingleOutputDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getCohortLesson: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search in subject, pupil, tutor */
        search?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
      path: {
        cohortId: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonsCohortOutputPaginationDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getCohortLessonDetail: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortLessonDetailDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getCohortPupilsPagination: {
    parameters: {
      path: {
        cohortId: number;
        userId: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchCohortPupilsOutputPaginationDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getPupilDetails: {
    parameters: {
      path: {
        pid: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsOutputForEditDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getPupilsLesson: {
    parameters: {
      path: {
        pid: number;
        userId: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** cohort title */
        cohort?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** subject title */
        subject?: string;
        /** pupil name */
        pupil?: string;
        /** tutor name */
        tutor?: string;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonOutputPaginationDto'];
        };
      };
    };
  };
  AdminUserTeacherController_getRegisteredPupilParents: {
    parameters: {
      path: {
        pupil: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilParentDetailsDto'][];
        };
      };
    };
  };
  AdminUserPupilController_getLessonsOfPupil: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** subject title */
        subject?: string;
        /** pupil fullName */
        pupil?: string;
        /** tutor fullName */
        tutor?: string;
        /** keyStage id */
        keyStage?: number;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
      path: {
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchTeacherLessonsOutputPaginationDto'];
        };
      };
    };
  };
  AdminUserPupilController_getLessonRequestedDetail: {
    parameters: {
      path: {
        lessonId: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TeacherLessonRequestedDetailOutputDto'];
        };
      };
    };
  };
  AdminUserParentController_getDetails: {
    parameters: {
      path: {
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdminUserParentDetailOutputDto'];
        };
      };
    };
  };
  AdminLegalController_addLegal: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['LegalOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AddLegalInputDto'];
      };
    };
  };
  AdminLegalController_getPaginationTermOfServices: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
      path: {
        type: 'ABOUT_US' | 'TERMS_AND_CONDITIONS' | 'TERM_OF_SERVICES' | 'PRIVACY_POLICY' | 'GDPR' | 'FAQ';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LegalOutputPaginationDto'];
        };
      };
    };
  };
  AdminLegalController_getLegal: {
    parameters: {
      path: {
        legalId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LegalFullOutputDto'];
        };
      };
    };
  };
  AdminLegalController_updateLegalById: {
    parameters: {
      path: {
        legalId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LegalOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateLegalInputDto'];
      };
    };
  };
  AdminLegalController_makePublishedById: {
    parameters: {
      path: {
        legalId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LegalOutputDto'];
        };
      };
    };
  };
  AdminLegalController_getVersionForCreate: {
    parameters: {
      path: {
        type: 'ABOUT_US' | 'TERMS_AND_CONDITIONS' | 'TERM_OF_SERVICES' | 'PRIVACY_POLICY' | 'GDPR' | 'FAQ';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['VersionLegalOutputDto'];
        };
      };
    };
  };
  AdminLegalController_getVersionForUpdate: {
    parameters: {
      path: {
        type: 'ABOUT_US' | 'TERMS_AND_CONDITIONS' | 'TERM_OF_SERVICES' | 'PRIVACY_POLICY' | 'GDPR' | 'FAQ';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['VersionLegalOutputDto'];
        };
      };
    };
  };
  SchoolsController_getOrganizationType: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  SchoolsController_getSchools: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        title?: string;
        id?: number;
        register?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GetSchoolPaginationOutputDto'];
        };
      };
    };
  };
  SchoolsController_updateSchool: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolUpdateDto'];
      };
    };
  };
  SchoolsController_getSchoolDetails: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GetSchoolDetailsOutputDto'];
        };
      };
    };
  };
  SchoolsController_getSchoolInfo: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GetSchoolInfoAdminOutputDto'];
        };
      };
    };
  };
  SchoolsController_assignUserRoles: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['ResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolUserRoleInputDto'];
      };
    };
  };
  SchoolsController_getTeachingStaff: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StaffOutputDto'][];
        };
      };
    };
  };
  SchoolsController_getCohortLead: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StaffOutputDto'][];
        };
      };
    };
  };
  SchoolsController_assignRole: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AssignRoleDto'];
      };
    };
  };
  SchoolsController_getUsers: {
    parameters: {
      query: {
        active: boolean;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolUsersOutputDto'][];
        };
      };
    };
  };
  SchoolsController_getStaffs: {
    parameters: {
      query: {
        active: boolean;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolUsersOutputDto'][];
        };
      };
    };
  };
  SchoolsController_getTeacher: {
    parameters: {
      query: {
        active: boolean;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolUsersOutputDto'][];
        };
      };
    };
  };
  SchoolsController_assignUserRolesLater: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['ResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolSetupLaterDto'];
      };
    };
  };
  SchoolsController_getProfileSetup: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolProfileSetupOutputDto'][];
        };
      };
    };
  };
  SchoolsController_getTeacherDetail: {
    parameters: {
      path: {
        teacherUserId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TeacherDetailOutputDto'];
        };
      };
    };
  };
  SchoolsController_getSchoolPicture: {
    parameters: {
      query: {
        state?: 'view' | 'download';
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: unknown;
    };
  };
  SchoolsController_changeOwnerInfo: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeInfoOwnerInputDto'];
      };
    };
  };
  SchoolsController_updateProfilePicture: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          profilePicture?: string;
        };
      };
    };
  };
  AdmSchoolController_schoolPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** School status */
        status?: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'REJECTED';
        /** Used for searching schools by title, leave it empty in the query string if you don't want to search. */
        searchTitle?: string;
        /** Used for searching schools by email, leave it empty in the query string if you don't want to search. */
        searchEmail?: string;
        /** Used for searching schools by specialEducationNumber, leave it empty in the query string if you don't want to search. */
        searchSEN?: string;
        /** Used to check if authority is approved. Leave this empty if you want to get all schools. */
        isAuthorityApproved?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolOutputPaginationDto'];
        };
      };
    };
  };
  AdmSchoolController_schoolProfile: {
    parameters: {
      path: {
        schoolId: number;
      };
      query: {
        startedAt: string;
        endedAt: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolProfileDto'];
        };
      };
    };
  };
  AdmSchoolController_schoolConfirmationStatus: {
    parameters: {
      path: {
        schoolId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolConfirmationOutputDto'];
        };
      };
    };
  };
  SchoolTutorController_getTutorReviewSummary: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ReviewSummaryOutputDto'];
        };
      };
    };
  };
  SchoolTutorController_getFullProfileDetails: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorProfileFullOutputDto'];
        };
      };
    };
  };
  SchoolTutorController_getDiaries: {
    parameters: {
      path: {
        /** Tutor user Id */
        id: number;
      };
      query: {
        /** Date and time from YYYY-MM-DD HH:mm:ss */
        startDate: string;
        /** Date and time to YYYY-MM-DD HH:mm:ss */
        endDate: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorProfileFullDiaryDto'][];
        };
      };
    };
  };
  SchoolTutorController_getApprovedTutors: {
    parameters: {
      query: {
        /** Tutor keyStage level Ids */
        keyStageLevelId: number;
        /** Tutor subject Id */
        mainSubjectId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FindTutorsOutputDto'][];
        };
      };
    };
  };
  SchoolTutorController_getReviewedTutors: {
    parameters: {
      query: {
        /** Tutor keyStage level Ids */
        keyStageLevelId: number;
        /** Tutor subject Id */
        mainSubjectId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FindTutorsOutputDto'][];
        };
      };
    };
  };
  SchoolTutorController_getAgreementStatus: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolTutorController_getAllTutors: {
    parameters: {
      query: {
        /** Tutor keyStage level Ids */
        keyStageLevelId: number;
        /** Tutor subject Id */
        mainSubjectId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FindTutorsOutputDto'][];
        };
      };
    };
  };
  SchoolTutorController_getAllAgreements: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AgreementOutputDto'];
        };
      };
    };
  };
  SchoolTutorController_updateTutorAgreement: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchTutorApprovalUpdateDto'];
      };
    };
  };
  SchoolTutorController_getTutorReview: {
    parameters: {
      path: {
        tutorUserId: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorReviewOutputDto'];
        };
      };
    };
  };
  SchoolTutorController_approveTutorAgreement: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolTutorController_delistTutor: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolTutorController_relistTutor: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolTutorController_cancelTutorAgreement: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolTutorController_reviewTutorAgreement: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolTutorController_priceSummary: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        pupils: number;
        duration: 30 | 60;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PriceSummaryOutputDto'];
        };
      };
    };
  };
  CohortPupilController_getPupilDetails: {
    parameters: {
      path: {
        cid: number;
        pid: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilDetailsDto'];
        };
      };
    };
  };
  CohortPupilController_getRegisteredPupilParents: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilParentDetailsDto'][];
        };
      };
    };
  };
  CohortPupilController_getPupilLesson: {
    parameters: {
      path: {
        pid: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** cohort title */
        cohort?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** subject title */
        subject?: string;
        /** pupil name */
        pupil?: string;
        /** tutor name */
        tutor?: string;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonOutputPaginationDto'];
        };
      };
    };
  };
  CohortPupilController_disablePupil: {
    parameters: {
      path: {
        pid: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseOutputDto'];
        };
      };
    };
  };
  CohortPupilController_activePupil: {
    parameters: {
      path: {
        pid: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseOutputDto'];
        };
      };
    };
  };
  CohortPupilController_getPupilForEdit: {
    parameters: {
      path: {
        pid: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsOutputForEditDto'];
        };
      };
    };
  };
  CohortPupilController_editPupil: {
    parameters: {
      path: {
        pid: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PupilEditInputDto'];
      };
    };
  };
  SchoolPupilController_getPupilLessons: {
    parameters: {
      path: {
        pid: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** cohort name */
        cohort?: string;
        /** Used for searching by LessonTypes */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** subject title */
        subject?: string;
        /** tutor fullName */
        tutor?: string;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchPupilLessonsOutputPaginationDto'];
        };
      };
    };
  };
  SchoolPupilController_getSchoolPupilStatus: {
    parameters: {
      path: {
        pid: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolPupilStatusDto'];
        };
      };
    };
  };
  SchoolPupilController_disableStatusPupil: {
    parameters: {
      path: {
        pid: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolPupilController_reactiveStatusPupil: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolPupilController_getPupilLessonDetail: {
    parameters: {
      path: {
        pid: number;
        lid: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolPupilLessonDetailOutputDto'];
        };
      };
    };
  };
  SchoolPupilController_createIndividualPupil: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['IndividualPupilOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['IndividualPupilInputDto'];
      };
    };
  };
  SchoolPupilController_getUploadedPupil: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsPaginationOutputDto'];
        };
      };
    };
  };
  SchoolPupilController_getPendingPupil: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsPaginationOutputDto'];
        };
      };
    };
  };
  SchoolPupilController_getActivePupil: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsPaginationOutputDto'];
        };
      };
    };
  };
  SchoolPupilController_getDisabledPupil: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsPaginationOutputDto'];
        };
      };
    };
  };
  SchoolPupilController_getPupilsName: {
    parameters: {
      query: {
        status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsInSchoolOutputDto'][];
        };
      };
    };
  };
  SchoolPupilController_updatePupil: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolUpdatePupil'];
      };
    };
  };
  SchoolStaffController_getSchoolStaffPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** staff firstName */
        firstName?: string;
        /** staff lastName */
        lastName?: string;
        /** staff emailAddress */
        emailAddress?: string;
        /** staff status */
        staffStatus: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolStaffOutputPaginationDto'];
        };
      };
    };
  };
  SchoolStaffController_getCohortById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolStaffInfoDto'];
        };
      };
    };
  };
  SchoolStaffController_disableStatusSchool: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolStaffController_reactiveStatusSchool: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolStaffController_changeStaffInfo: {
    parameters: {
      path: {
        staffUserId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeInfoStaffInputDto'];
      };
    };
  };
  SchoolCohortController_getCohorts: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search in cohort, teacher, subject */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolCohortOutputPaginationDto'];
        };
      };
    };
  };
  SchoolCohortController_newCohort: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCohortDto'];
      };
    };
  };
  SchoolCohortController_getCohortById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortSingleOutputDto'];
        };
      };
    };
  };
  SchoolCohortController_updateCohort: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCohortDto'];
      };
    };
  };
  SchoolCohortController_deleteCohort: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolCohortController_getCohortPupilsPagination: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchCohortPupilsOutputPaginationDto'];
        };
      };
    };
  };
  SchoolCohortController_addPupilsToCohort: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PupilsDto'];
      };
    };
  };
  SchoolCohortController_allPupilsByCohortId: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilOutputDto'][];
        };
      };
    };
  };
  SchoolCohortController_getAllPupils: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsInSchoolAndCohortDto'];
        };
      };
    };
  };
  SchoolCohortController_getPupilsName: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RegisteredPupilsInCohortDto'][];
        };
      };
    };
  };
  SchoolCohortController_getLeadByCohortId: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LeadOutputDto'];
        };
      };
    };
  };
  SchoolCohortController_allocateFundToCohort: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AllocateFundToCohortDto'];
      };
    };
  };
  SchoolCohortController_deallocateFundToCohort: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeallocateFundFromCohortDto'];
      };
    };
  };
  SchoolCohortController_getCohortFundingSum: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortFundingSumDto'];
        };
      };
      default: {
        content: {
          'application/json': components['schemas']['CohortFundingSumDto'];
        };
      };
    };
  };
  SchoolParentController_getAllPupils: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolPupilOutputDto'][];
        };
      };
    };
  };
  SchoolParentController_getAllParents: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolParentOutputDto'][];
        };
      };
    };
  };
  SchoolParentController_getUploadedParents: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginateParentOutputDto'];
        };
      };
    };
  };
  SchoolParentController_getPendingParents: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginateParentOutputDto'];
        };
      };
    };
  };
  SchoolParentController_getActiveParents: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginateParentOutputDto'];
        };
      };
    };
  };
  SchoolParentController_getDisabledParents: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginateParentOutputDto'];
        };
      };
    };
  };
  SchoolParentController_addParent: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ParentInputDto'];
      };
    };
  };
  SchoolParentController_checkPrimaryParent: {
    parameters: {
      path: {
        pupilId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': boolean;
        };
      };
    };
  };
  SchoolParentController_getDetails: {
    parameters: {
      path: {
        parentId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ParentDetailOutputDto'];
        };
      };
    };
  };
  SchoolParentController_editParentInfo: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ParentInfoDto'];
      };
    };
  };
  SchoolParentController_getUploadedParent: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['UserFullNameOutputDto'][];
        };
      };
    };
  };
  SchoolParentController_schoolInviteParent: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolInviteParentsDto'];
      };
    };
  };
  TeacherPupilController_getPupilsName: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsInSchoolOutputDto'][];
        };
      };
    };
  };
  TeacherPupilController_getPupilPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** pupil firstName */
        firstName?: string;
        /** pupil lastName */
        lastName?: string;
        /** pupil emailAddress */
        email?: string;
        /** pupil keyStage */
        keyStage?: number;
        /** pupil additionalNeed */
        additionalNeed?: string;
        /** cohortName */
        cohortName?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchPupilOutputPaginationDto'];
        };
      };
    };
  };
  TeacherPupilController_getPupilLesson: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** cohort name */
        cohort?: string;
        /** Used for searching by LessonTypes */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** subject title */
        subject?: string;
        /** tutor fullName */
        tutor?: string;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchPupilLessonsOutputPaginationDto'];
        };
      };
    };
  };
  TeacherPupilController_getPupilStatus: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilStatusOutputDto'];
        };
      };
    };
  };
  SchoolWalletController_getAllCohorts: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortsLeadOutputDto'][];
        };
      };
    };
  };
  SchoolWalletController_getFundAvailable: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': number;
        };
      };
    };
  };
  SchoolWalletController_addFundToCohort: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CohortTopUpInputDto'];
      };
    };
  };
  SchoolWalletController_getAllSchoolAllocations: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolTopupHistoryPaginationOutputDto'];
        };
      };
    };
  };
  SchoolWalletController_cardPayRequest: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['StripePaymentRequestOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CardPayRequestDto'];
      };
    };
  };
  SchoolWalletController_getSchoolCohortsAllocations: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginateSchoolCohortAllocationsOutputDto'];
        };
      };
    };
  };
  SchoolWalletController_getCardList: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CardOutputDto'][];
        };
      };
    };
  };
  SchoolWalletController_cardSetup: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StripeGetCreateCardSetupOutputDto'];
        };
      };
    };
  };
  SchoolLessonController_getLessons: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** cohort title */
        cohort?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** subject title */
        subject?: string;
        /** pupil name */
        pupil?: string;
        /** tutor name */
        tutor?: string;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonsCohortOutputPaginationDto'];
        };
      };
    };
  };
  SchoolLessonController_getLesson: {
    parameters: {
      path: {
        lid: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolPupilLessonOutputDto'];
        };
      };
    };
  };
  SchoolLessonController_getLessonDetail: {
    parameters: {
      path: {
        lid: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolPupilLessonDetailsOutputDto'];
        };
      };
    };
  };
  SchoolLessonController_editLessonInfo: {
    parameters: {
      path: {
        lid: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EditLessonDto'];
      };
    };
  };
  SchoolLessonController_getLessonDetailCompleted: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolCompletedLessonDetailOutputDto'];
        };
      };
    };
  };
  SchoolLessonController_getLessonPriceSummary: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolLessonPriceSummary'];
        };
      };
    };
  };
  SchoolLessonController_getLessonChatMessages: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatMessageOutputDto'][];
        };
      };
    };
  };
  SchoolLessonController_getLessonChatFiles: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatFilesOutputDto'][];
        };
      };
    };
  };
  SchoolLessonController_getTutorLessonReviews: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolsLessonReviewsOutputDto'];
        };
      };
    };
  };
  SchoolLessonController_getAllTutorsByLessonId: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FindTutorsOutputDto'][];
        };
      };
    };
  };
  SchoolLessonController_declineRequestCancelLesson: {
    parameters: {
      path: {
        lId: number;
        pId: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolLessonController_approveRequestCancelLesson: {
    parameters: {
      path: {
        lId: number;
        pId: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolTeacherController_getTeacherPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** teacher firstName */
        firstName?: string;
        /** teacher lastName */
        lastName?: string;
        /** teacher emailAddress */
        emailAddress?: string;
        /** teacher role */
        role?: string;
        /** teacher cohort */
        cohort?: string;
        /** teacher subject */
        subject?: string;
        /** teacher keyStage */
        keyStage?: number;
        /** teacher status */
        teacherStatus: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolTeacherOutputPaginationDto'];
        };
      };
    };
  };
  SchoolTeacherController_getAllTeachers: {
    parameters: {
      query: {
        status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolTeacherOutputDto'][];
        };
      };
    };
  };
  SchoolTeacherController_disableTeacher: {
    parameters: {
      path: {
        tchId: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolTeacherController_activeTeacher: {
    parameters: {
      path: {
        tchId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolTeacherController_getTeacher: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolTeacherInfoOutputDto'];
        };
      };
    };
  };
  SchoolTeacherController_updateTeacher: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolUpdateTeacherDto'];
      };
    };
  };
  SchoolTeacherController_getCohortsOfTeacher: {
    parameters: {
      path: {
        teacherUserId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortsInSchoolAndTeacherDto'];
        };
      };
    };
  };
  SchoolTeacherController_updateLeadsOfCohorts: {
    parameters: {
      path: {
        teacherUserId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolLeadCohortUpdateDto'];
      };
    };
  };
  SchoolStatisticController_getSchoolStatistic: {
    parameters: {
      query: {
        fromDate: string;
        toDate: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StatisticOutputDto'];
        };
      };
    };
  };
  SchoolFundingTypeController_getFundingTypes: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FundingTypeOutputDto'][];
        };
      };
    };
  };
  SchoolFundingTypeController_newCohort: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateFundingTypeDto'];
      };
    };
  };
  SchoolStaffInviteController_uploadCSVStaffs: {
    parameters: {
      query: {
        invite: boolean;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['StaffUploadCSVOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          csv_file?: string;
        };
      };
    };
  };
  SchoolStaffInviteController_uploadIndividualStaff: {
    parameters: {};
    responses: {
      /** send <u>'dateOfBirth'</u> with <b>dd/mm/yyyy</b> format */
      200: unknown;
      201: {
        content: {
          'application/json': components['schemas']['StaffUploadCSVOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UploadIndividualStaffDto'];
      };
    };
  };
  SchoolStaffInviteController_getSchoolStaff: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolStaffOutputDto'][];
        };
      };
    };
  };
  SchoolStaffInviteController_schoolInviteStaffs: {
    parameters: {};
    responses: {
      /** If staffIds array is empty, server send invite email to all school staff. If send staffId in staffIds array, server just send invite email to specific school staff. */
      200: unknown;
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolInviteStaffsDto'];
      };
    };
  };
  SchoolStaffInviteController_getInvitedStaff: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolFullNameUserOutputDto'][];
        };
      };
    };
  };
  SchoolStaffInviteController_schoolReinviteStaff: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolReinviteStaffDto'];
      };
    };
  };
  SchoolStaffInviteController_completeInvitation: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CompleteInvitationTeacherOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CompleteInvitationStaffDto'];
      };
    };
  };
  SchoolCohortLessonController_getCohortLesson: {
    parameters: {
      path: {
        cid: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search in subject, pupil, tutor */
        search?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonsCohortOutputPaginationDto'];
        };
      };
    };
  };
  SchoolCohortLessonController_getCohortLessonDetail: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortLessonDetailDto'];
        };
      };
    };
  };
  SchoolCohortLessonController_createLesson: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CreateLessonOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLessonDto'];
      };
    };
  };
  SchoolCohortLessonController_createNewLessonFromOldLesson: {
    parameters: {
      path: {
        lessonId: number;
        tutorUserId: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CreateLessonOutputDto'];
        };
      };
    };
  };
  SchoolCohortLessonController_getCohortFund: {
    parameters: {
      path: {
        cohortId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortFundingDetailsDto'][];
        };
      };
    };
  };
  SchoolCohortLessonController_checkAvailability: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CheckAvailabilityOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CheckAvailabilityInputDto'];
      };
    };
  };
  SchoolCohortLessonController_cancelLesson: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolReasonDeclinedDto'];
      };
    };
  };
  TeacherCohortLessonController_getCohortLessons: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** subject title */
        subject?: string;
        /** pupil fullName */
        pupil?: string;
        /** tutor fullName */
        tutor?: string;
        /** keyStage id */
        keyStage?: number;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchTeacherLessonsCohortOutputPaginationDto'];
        };
      };
    };
  };
  SchoolTeacherInviteController_uploadCsvTeacher: {
    parameters: {
      query: {
        invite: boolean;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['TeacherUploadCSVOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          csv_file?: string;
        };
      };
    };
  };
  SchoolTeacherInviteController_uploadIndividualTeacher: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UploadIndividualTeacherDto'];
      };
    };
  };
  SchoolTeacherInviteController_getSchoolTeachersUploaded: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolTeacherOutputDto'][];
        };
      };
    };
  };
  SchoolTeacherInviteController_schoolInviteTeacher: {
    parameters: {};
    responses: {
      /** If teacherIds array is empty, server send invite email to all school teachers. If send teacherId in teacherIds array, server just send invite email to specific school teachers. */
      200: unknown;
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolInviteTeachersDto'];
      };
    };
  };
  SchoolTeacherInviteController_getSchoolTeachersPending: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolTeacherOutputDto'][];
        };
      };
    };
  };
  SchoolTeacherInviteController_getInvitedStaff: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolFullNameUserOutputDto'][];
        };
      };
    };
  };
  SchoolTeacherInviteController_schoolResendInviteTeacher: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolResendInvitesTeacher'];
      };
    };
  };
  SchoolTeacherInviteController_completeInvitation: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CompleteInvitationTeacherOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CompleteInvitationTeacherDto'];
      };
    };
  };
  SchoolTutorAgreementController_getTutorAgreementPagination: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** tutor name */
        tutor?: string;
        /** subject title */
        subject?: string;
        /** Used for searching by status */
        status?: 'In Process' | 'Reviewed' | 'Approved' | 'Delisted';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolTutorAgreementOutputPaginationDto'];
        };
      };
    };
  };
  SchoolTutorAgreementController_saveTutorReviewProcess: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolSaveTutorReviewProcessDto'];
      };
    };
  };
  SchoolTutorAgreementController_getAgreementDetail: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorAgreementDetailOutputDto'];
        };
      };
    };
  };
  SchoolTutorAgreementController_getTutorApprovals: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** tutor name */
        tutor?: string;
        /** subject title */
        subject?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolTutorAgreementOutputPaginationDto'];
        };
      };
    };
  };
  SchoolTutorAgreementController_createTutorApproval: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchTutorApprovalDto'];
      };
    };
  };
  SchoolTutorAgreementController_cancelAgreementTutor: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseOutputDto'];
        };
      };
      default: unknown;
    };
    /** If you have <u>agreement</u> just send <b>agreementId</b> else send <b>tutorUserId</b> */
    requestBody: {
      content: {
        'application/json': string;
      };
    };
  };
  SchoolPupilParentInviteController_uploadCSVPupils: {
    parameters: {
      query: {
        invitePupils: boolean;
        inviteParents: boolean;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['PupilParentUploadCSVOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          csv_file?: string;
        };
      };
    };
  };
  SchoolPupilParentInviteController_getSchoolPupils: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolUploadedOutputDto'][];
        };
      };
    };
  };
  SchoolPupilParentInviteController_schoolInvitePupils: {
    parameters: {};
    responses: {
      /** If pupilIds array is empty, server send invite email to all school pupils. If send pupilId in pupilIds array, server just send invite email to specific school pupils. */
      200: unknown;
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolInvitePupilsDto'];
      };
    };
  };
  SchoolPupilParentInviteController_getInvitedPupil: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolFullNameUserOutputDto'][];
        };
      };
    };
  };
  SchoolPupilParentInviteController_schoolReInvitePupil: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolReinvitePupilsDto'];
      };
    };
  };
  SchoolPupilParentInviteController_pupilCompleteInvitation: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CompleteInvitationPupilOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CompleteInvitationPupilParentDto'];
      };
    };
  };
  SchoolPupilParentInviteController_getSchoolParents: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolUploadedOutputDto'][];
        };
      };
    };
  };
  SchoolPupilParentInviteController_schoolInviteParent: {
    parameters: {};
    responses: {
      /** If parentIds array is empty, server send invite email to all school parents. If send parentId in parentIds array, server just send invite email to specific school parents. */
      200: unknown;
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolInviteParentsDto'];
      };
    };
  };
  SchoolPupilParentInviteController_getInvitedParent: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolFullNameUserOutputDto'][];
        };
      };
    };
  };
  SchoolPupilParentInviteController_schoolReinviteParents: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SchoolReinviteParentsDto'];
      };
    };
  };
  SchoolPupilParentInviteController_parentCompleteInvitation: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CompleteInvitationPupilOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CompleteInvitationPupilParentDto'];
      };
    };
  };
  ChatMessagesController_createNewMessageSchoolTutor: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['ChatCreatedOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['CreateTutorChatDto'];
      };
    };
  };
  ChatMessagesController_createNewMessageTutorSchool: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['CreateTutorSchoolChatDto'];
      };
    };
  };
  ChatMessagesController_createNewMessageTeacherTutor: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['ChatCreatedOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['CreateTutorChatDto'];
      };
    };
  };
  ChatMessagesController_createNewMessageTutorTeacher: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['CreateTutorTeacherChatDto'];
      };
    };
  };
  ChatMessagesController_getAllLessonChats: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatOutputDto'][];
        };
      };
    };
  };
  ChatMessagesController_getAllAgreementChats: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatOutputDto'][];
        };
      };
    };
  };
  ChatMessagesController_getAllUserBetweenChats: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatOutputDto'][];
        };
      };
    };
  };
  ChatMessagesController_getAttachmentFile: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: unknown;
    };
  };
  SchoolRolesController_getAllPermissions: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PermissionOutputDto'][];
        };
      };
    };
  };
  SchoolRolesController_getAllRolesInSchool: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolRolesOutputDto'][];
        };
      };
    };
  };
  SchoolRolesController_newRole: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NewSchoolRoleInputDto'];
      };
    };
  };
  SchoolRolesController_addUserToSchoolRole: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserAddToRoleInputDto'];
      };
    };
  };
  SchoolRolesController_allCohortLeads: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AssignedRolesOutputDto'][];
        };
      };
    };
  };
  SchoolRolesController_addTeacherAsCohortLead: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserAddToRoleInputDto'];
      };
    };
  };
  SchoolRolesController_getRoleById: {
    parameters: {
      path: {
        roleId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolRolesOutputDto'];
        };
      };
    };
  };
  SchoolRolesController_deleteRoleById: {
    parameters: {
      path: {
        roleId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  SchoolRolesController_updateRoleById: {
    parameters: {
      path: {
        roleId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRoleDto'];
      };
    };
  };
  SchoolRolesController_deleteUserToSchoolRole: {
    parameters: {
      path: {
        roleId: number;
        userId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  LessonController_flagLesson: {
    parameters: {
      path: {
        id: number;
        state: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  LessonController_getLessons: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** duration */
        duration?: number;
        pupilFullName?: string;
        tutorFullName?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchTutorLessonOutputPaginationDto'];
        };
      };
    };
  };
  LessonController_initializeLesson: {
    parameters: {
      path: {
        version: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  AdmLessonController_getLessonDetails: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilLessonDetailsOutputDto'];
        };
      };
    };
  };
  StdLessonController_getLessonDetails: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonDetailOutputDto'];
        };
      };
    };
  };
  StdLessonController_getAllLessons: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** {"id":3} */
        subject?: unknown;
        registrations?: unknown;
        keyStageLevel?: unknown;
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        skip?: number;
        take?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonDetailOutputDto'][];
        };
      };
    };
  };
  StdLessonController_getAgoraToken: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
    };
  };
  StdLessonController_refreshAgoraToken: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
    };
  };
  StdLessonController_startLesson: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
    };
  };
  StdLessonController_leaveLesson: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
    };
  };
  StdLessonController_addCommentForTutor: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
      default: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TutorReviewDto'];
      };
    };
  };
  TtrLessonController_getAllPaginationLesson: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** pupil, subject */
        search?: string;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchTutorLessonOutputPaginationDto'];
        };
      };
    };
  };
  TtrLessonController_getTutorLessonDetails: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorLessonDetailsOutputDto'];
        };
      };
    };
  };
  TtrLessonController_getAgoraToken: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
    };
  };
  TtrLessonController_refreshAgoraToken: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
    };
  };
  StdFindTutorController_getFindTutorAvailableNow: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        subjectId?: number;
        keyStageLevelId?: number;
        tutorName?: string;
        lessonLength?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FindTutorAvailableNowProcedureListPaginationDto'];
        };
      };
    };
  };
  RequestLessonChatController_getAllMessagesLeadTutor: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        whoGets: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ReqLessonChatOutputDto'][];
        };
      };
    };
  };
  LessonAttachmentController_getAllAttachments: {
    parameters: {
      query: {
        /** Lesson Id */
        lesson?: number;
        /** Cohort Id */
        cohort?: number;
        /** School Id */
        school?: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AttachedDataOutputDto'][];
        };
      };
    };
  };
  LessonAttachmentController_attachResourceAndLesson: {
    parameters: {};
    responses: {
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AttachmentReferencesDto'];
      };
    };
  };
  LessonAttachmentController_getAttachmentFile: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        state?: 'view' | 'download';
      };
    };
    responses: {
      200: unknown;
    };
  };
  LessonAttachmentController_addLink: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AddLinkAttachedDataDto'];
      };
    };
  };
  LessonAttachmentController_addFile: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          title?: string;
          cohort?: number;
          school?: number;
          attachmentCategory?: unknown;
          /** Format: binary */
          file?: string;
        };
      };
    };
  };
  LessonAttachmentController_reuseResource: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UploadedResourceDto'];
      };
    };
  };
  PaymentsStudentsController_getBalance: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StudentBalanceDto'];
        };
      };
    };
  };
  PaymentsStudentsController_get: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StudentTopupHistoryPaginationOutputDto'];
        };
      };
    };
  };
  PaymentsStudentsController_getCreateCardSetup: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StripeGetCreateCardSetupOutputDto'];
        };
      };
    };
  };
  PaymentsStudentsController_getCardList: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': { [key: string]: unknown }[];
        };
      };
    };
  };
  PaymentsStudentsController_deleteACard: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteACardDto'];
      };
    };
  };
  PaymentsStudentsController_cardPayRequest: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['StripePaymentRequestOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CardPayRequestDto'];
      };
    };
  };
  PaymentsSchoolController_getBalance: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolBalanceDto'];
        };
      };
    };
  };
  PaymentsSchoolController_get: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolTopupHistoryPaginationOutputDto'];
        };
      };
    };
  };
  PaymentsSchoolController_getBankTransferClientSecret: {
    parameters: {
      query: {
        amount: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolBankTransferCSDto'];
        };
      };
    };
  };
  PaymentsSchoolController_getCreateCardSetup: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StripeGetCreateCardSetupOutputDto'];
        };
      };
    };
  };
  PaymentsSchoolController_getCardList: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': { [key: string]: unknown }[];
        };
      };
    };
  };
  PaymentsSchoolController_deleteACard: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteACardDto'];
      };
    };
  };
  PaymentsSchoolController_cardPayRequest: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['StripePaymentRequestOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CardPayRequestDto'];
      };
    };
  };
  PaymentsAdminController_addCreditToSchool: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AdminAddCreditToSchoolDto'];
      };
    };
  };
  PaymentsAdminController_getSchoolBalance: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': number;
        };
      };
    };
  };
  PaymentTutorController_getTutorPaymentStatus: {
    parameters: {};
    responses: {
      200: unknown;
      default: {
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  PaymentTutorController_getStripeAccountInfo: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
    };
  };
  PaymentTutorController_getConnectWithStripeLink: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ConnectWithStripeLinkDto'];
        };
      };
    };
  };
  PaymentTutorController_getStripeLoginLink: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ConnectWithStripeLinkDto'];
        };
      };
    };
  };
  PaymentTutorController_getTutorWalletTotal: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorWalletTotalOutputDto'];
        };
      };
    };
  };
  PaymentTutorController_getTutorPaymentPaid: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorPaymentPaidOutputDto'][];
        };
      };
    };
  };
  PaymentTutorController_getTutorPaymentPaidDetail: {
    parameters: {
      path: {
        date: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorPaymentPaidDetailOutputDto'][];
        };
      };
    };
  };
  BankTransferHookController_acceptPayment: {
    parameters: {};
    responses: {
      201: unknown;
    };
  };
  AdditionalController_getKeyStageLevels: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['KeyStageLevelDto'][];
        };
      };
    };
  };
  AdditionalController_getApprovedTutorsKeyStageLevels: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['KeyStageLevelDto'][];
        };
      };
    };
  };
  AdditionalController_getSubjects: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SubjectDto'][];
        };
      };
    };
  };
  AdditionalController_getTeachingStatuses: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TeachingStatusDto'][];
        };
      };
    };
  };
  AdditionalController_getAdditionalNeeds: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AdditionalNeedDto'][];
        };
      };
    };
  };
  AdditionalController_getOrganizationTypes: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['OrganizationTypeDto'][];
        };
      };
    };
  };
  AdditionalController_getCountryCodes: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CountryCodesDto'][];
        };
      };
    };
  };
  AdditionalController_getPersonTitles: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PersonTitlesDto'][];
        };
      };
    };
  };
  StudentsController_getDetail: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StudentOutputDto'];
        };
      };
    };
  };
  StudentsController_updateStudent: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['UpdateStudentInputDto'];
      };
    };
  };
  StudentsAdminsController_listAdmin: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        schoolId?: number;
        keyStageLevelId?: number;
        additionalNeedIds?: number[];
        status: 'PENDING' | 'DISABLED' | 'ACTIVE' | 'UPLOADED' | 'REMOVED';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchStudentOutputPaginationDto'];
        };
      };
    };
  };
  StudentsAdminsController_getDetail: {
    parameters: {
      path: {
        studentId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StudentOutputDto'];
        };
      };
    };
  };
  StudentsAdminsController_resendInviteStudent: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: unknown;
    };
  };
  StudentsAdminsController_disableStudent: {
    parameters: {
      path: {
        studentId: number;
      };
    };
    responses: {
      200: unknown;
    };
  };
  StudentsAdminsController_activeStudent: {
    parameters: {
      path: {
        studentId: number;
      };
    };
    responses: {
      200: unknown;
    };
  };
  DiariesTutorsController_get: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['DiariesTutorsGetListPaginationDto'];
        };
      };
    };
  };
  DiariesTutorsController_createAvailability: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DiariesTutorsCreateAvailabilityInputDto'];
      };
    };
  };
  DiariesTutorsController_createGroupSingle: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DiariesTutorsCreateGroupSingleInputDto'];
      };
    };
  };
  DiariesTutorsController_createGroupSeries: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DiariesTutorsCreateGroupSeriesInputDto'];
      };
    };
  };
  TeacherController_getTeacherLessonRequested: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TeacherLessonOutputDto'][];
        };
      };
    };
  };
  TeacherController_getTeacherDetail: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TeacherUserDto'];
        };
      };
    };
  };
  TeacherController_getTeacherLessonScheduled: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TeacherLessonOutputDto'][];
        };
      };
    };
  };
  TeacherController_getStatistics: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TeacherStatisticsOutputDto'];
        };
      };
    };
  };
  TeacherTutorController_getTutorReviewSummary: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ReviewSummaryOutputDto'];
        };
      };
    };
  };
  TeacherTutorController_getTutorReviewSummaryTest: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': { [key: string]: unknown };
        };
      };
    };
  };
  TeacherTutorController_getTutorReview: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorReviewOutputDto'];
        };
      };
    };
  };
  TeacherTutorController_getFullProfileDetails: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorProfileFullOutputDto'];
        };
      };
    };
  };
  TeacherTutorController_getDiaries: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        /** Date and time from YYYY-MM-DD HH:mm:ss */
        startDate: string;
        /** Date and time to YYYY-MM-DD HH:mm:ss */
        endDate: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorProfileFullDiaryDto'][];
        };
      };
    };
  };
  TeacherTutorController_getAllAgreements: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AgreementOutputDto'];
        };
      };
    };
  };
  TeacherTutorController_getApprovedTutors: {
    parameters: {
      query: {
        /** Tutor keyStage level Ids */
        keyStageLevelId: number;
        /** Tutor subject Id */
        mainSubjectId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FindTutorsOutputDto'][];
        };
      };
    };
  };
  TeacherTutorController_getReviewedTutors: {
    parameters: {
      query: {
        /** Tutor keyStage level Ids */
        keyStageLevelId: number;
        /** Tutor subject Id */
        mainSubjectId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FindTutorsOutputDto'][];
        };
      };
    };
  };
  TeacherTutorController_getAllTutors: {
    parameters: {
      query: {
        /** Tutor keyStage level Ids */
        keyStageLevelId: number;
        /** Tutor subject Id */
        mainSubjectId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FindTutorsOutputDto'][];
        };
      };
    };
  };
  TeacherTutorController_priceSummary: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        pupils: number;
        duration: 30 | 60;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PriceSummaryOutputDto'];
        };
      };
    };
  };
  TeacherLessonController_getTeacherLessons: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** Used for searching by types */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** subject title */
        subject?: string;
        /** pupil fullName */
        pupil?: string;
        /** tutor fullName */
        tutor?: string;
        /** keyStage id */
        keyStage?: number;
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchTeacherLessonsOutputPaginationDto'];
        };
      };
    };
  };
  TeacherLessonController_getLessonRequestedDetail: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TeacherLessonRequestedDetailOutputDto'];
        };
      };
    };
  };
  TeacherLessonController_getLessonChats: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TeacherLessonChats'][];
        };
      };
    };
  };
  TeacherLessonController_cancelRequest: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TeacherReasonDeclinedDto'];
      };
    };
  };
  TeacherLessonController_editLessonInfo: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EditLessonDto'];
      };
    };
  };
  TeacherLessonController_createLesson: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CreateLessonOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLessonDto'];
      };
    };
  };
  TeacherLessonController_createNewLessonFromOldLesson: {
    parameters: {
      path: {
        lessonId: number;
        tutorUserId: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CreateLessonOutputDto'];
        };
      };
    };
  };
  TeacherLessonController_getCohortFund: {
    parameters: {
      path: {
        cohortId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortFundingDetailsDto'][];
        };
      };
    };
  };
  TeacherLessonController_checkAvailability: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['CheckAvailabilityOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CheckAvailabilityInputDto'];
      };
    };
  };
  TeacherLessonController_getLessonDetailCompleted: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolCompletedLessonDetailOutputDto'];
        };
      };
    };
  };
  TeacherLessonController_getLessonPriceSummary: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolLessonPriceSummary'];
        };
      };
    };
  };
  TeacherLessonController_getLessonChatMessages: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatMessageOutputDto'][];
        };
      };
    };
  };
  TeacherLessonController_getLessonChatFiles: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatFilesOutputDto'][];
        };
      };
    };
  };
  TeacherLessonController_getTutorLessonReviews: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SchoolsLessonReviewsOutputDto'];
        };
      };
    };
  };
  TeacherLessonController_getAllTutorsByLessonId: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['FindTutorsOutputDto'][];
        };
      };
    };
  };
  TeacherLessonController_declinedRequestCancelLesson: {
    parameters: {
      path: {
        lId: number;
        pId: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  TeacherLessonController_approveRequestCancelLesson: {
    parameters: {
      path: {
        lId: number;
        pId: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  TeacherCohortController_getCohortsDetails: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortDetailsDto'];
        };
      };
    };
  };
  TeacherCohortController_getPupilsOfCohort: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsListPaginationDto'];
        };
      };
    };
  };
  TeacherCohortController_addPupilsToCohort: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PupilsDto'];
      };
    };
  };
  TeacherCohortController_getFundingOfCohort: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CohortFuncdingOutputDto'];
        };
      };
    };
  };
  TeacherCohortController_getApprovedTutors: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorOutputPaginationDto'];
        };
      };
    };
  };
  TeacherCohortController_getReviewedTutors: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorOutputPaginationDto'];
        };
      };
    };
  };
  TeacherCohortController_getLesson: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        dateFrom?: string;
        dateTo?: string;
        subjectIds?: number[];
        keyStageLevelIds?: number[];
        lessonTypes?: string[];
        lessonStates?: number[];
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchCohortLessonOutputPaginationDto'];
        };
      };
    };
  };
  TeacherCohortController_getAllPupils: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilsInSchoolAndCohortDto'];
        };
      };
    };
  };
  TeacherCohortController_getPupilsName: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['RegisteredPupilsInCohortDto'][];
        };
      };
    };
  };
  TeacherCohortController_getTeacherCohorts: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
        /** cohort name */
        cohort?: string;
        /** cohort lead */
        cohortLead?: string;
        /** subject title */
        subject?: string;
        /** keyStage name */
        KeyStage?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchTeacherCohortOutputPaginationDto'];
        };
      };
    };
  };
  TeacherCohortController_getPupilDetails: {
    parameters: {
      path: {
        pid: number;
        cid: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilDetailsUserOutputDto'];
        };
      };
    };
  };
  TeacherCohortController_getPupilRequestedLessons: {
    parameters: {
      path: {
        pid: number;
        cid: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonsCohortOutputPaginationDto'];
        };
      };
    };
  };
  TeacherCohortController_getPupilCompletedLessons: {
    parameters: {
      path: {
        pid: number;
        cid: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonsCohortOutputPaginationDto'];
        };
      };
    };
  };
  TeacherCohortController_getPupilScheduledLessons: {
    parameters: {
      path: {
        pid: number;
        cid: number;
      };
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchSchoolLessonsCohortOutputPaginationDto'];
        };
      };
    };
  };
  TeacherCohortController_getRegisteredPupilParents: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilParentDetailsDto'][];
        };
      };
    };
  };
  TeacherCohortController_getRegisteredParents: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PaginataionParentOutputDto'];
        };
      };
    };
  };
  TeacherCohortController_getDetails: {
    parameters: {
      path: {
        parentId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ParentDetailOutputDto'];
        };
      };
    };
  };
  TeacherStatisticController_getSchoolStatistic: {
    parameters: {
      query: {
        fromDate: string;
        toDate: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['StatisticOutputDto'];
        };
      };
    };
  };
  LegalsController_getLegalByTypeSummery: {
    parameters: {
      query: {
        /** Used for Filter by Type */
        type: 'ABOUT_US' | 'TERMS_AND_CONDITIONS' | 'TERM_OF_SERVICES' | 'PRIVACY_POLICY' | 'GDPR' | 'FAQ';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LegalSummeryOutputDto'];
        };
      };
    };
  };
  AuthController_login: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['LoginOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginInputDto'];
      };
    };
  };
  AuthController_signUpStudent: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['SignUpStudentOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpStudentInputDto'];
      };
    };
  };
  AuthController_signUpTutor: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpTutorInputDto'];
      };
    };
  };
  AuthController_resendVerificationEmail: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ResendVerificationEmailInputDto'];
      };
    };
  };
  AuthController_verifyEmail: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  AuthController_verifyNewEmail: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  AuthController_updateEmail: {
    parameters: {};
    responses: {
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEmailInputDto'];
      };
    };
  };
  AuthController_isEmailVerified: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['IsEmailVerifiedOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['IsEmailVerifiedInputDto'];
      };
    };
  };
  AuthController_verifyChangePasswordToken: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': boolean;
        };
      };
    };
  };
  AuthController_changePassword: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ForgetPasswordInputDto'];
      };
    };
  };
  AuthController_updatePassword: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePasswordInputDto'];
      };
    };
  };
  AuthController_completeInvitation: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CompleteInvitationInputDto'];
      };
    };
  };
  AuthController_completeAdminInvitation: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CompleteInvitationInputDto'];
      };
    };
  };
  AuthController_signUpSchool: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['SignUpSchoolOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpSchoolInputDto'];
      };
    };
  };
  AuthController_newPassword: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['NewPasswordInputDto'];
      };
    };
  };
  AuthController_logoutOneDevice: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LogoutOneDeviceInputDto'];
      };
    };
  };
  AuthController_logoutAllDevices: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
  };
  LessonRoomPupilController_getLessonDetails: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilLessonDetailOutputDto'];
        };
      };
    };
  };
  LessonRoomPupilController_canAccessRoom: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': boolean;
        };
      };
    };
  };
  LessonRoomPupilController_joinClass: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilRtmTokenOutputDto'];
        };
      };
    };
  };
  LessonRoomPupilController_leaveClass: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LeaveLessonRoomOutputDto'];
        };
      };
    };
  };
  LessonRoomPupilController_getLessonChatsHistory: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatMessageHistoryOutputDto'][];
        };
      };
    };
  };
  LessonRoomPupilController_getLessonChatsFilesHistory: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatFilesOutputDto'][];
        };
      };
    };
  };
  LessonRoomPupilController_getLessonParticipants: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonParticipantsOutputDto'];
        };
      };
    };
  };
  LessonRoomPupilController_addFile: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          message?: string;
          /** Format: binary */
          files?: string;
        };
      };
    };
  };
  LessonRoomTutorController_getLessonDetails: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorLessonDetailOutputDto'];
        };
      };
    };
  };
  LessonRoomTutorController_canAccessRoom: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': boolean;
        };
      };
    };
  };
  LessonRoomTutorController_joinClass: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilRtmTokenOutputDto'];
        };
      };
    };
  };
  LessonRoomTutorController_leaveClass: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LeaveLessonRoomOutputDto'];
        };
      };
    };
  };
  LessonRoomTutorController_addFile: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          message?: string;
          /** Format: binary */
          files?: string;
        };
      };
    };
  };
  LessonRoomTutorController_getLessonChatsHistory: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatMessageHistoryOutputDto'][];
        };
      };
    };
  };
  LessonRoomTutorController_getLessonChatFiles: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonChatFilesOutputDto'][];
        };
      };
    };
  };
  LessonRoomTutorController_getLessonParticipants: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonParticipantsOutputDto'];
        };
      };
    };
  };
  LessonRoomTutorController_getLessonBreakdown: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['TutorLessonBreakdown'];
        };
      };
    };
  };
  LessonRoomTutorController_saveLessonBreakdown: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LessonBreakdown'];
      };
    };
  };
  LessonWhiteboardController_getLessonWhiteboards: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonWhiteboardOutputDto'][];
        };
      };
    };
  };
  LessonWhiteboardController_saveLessonWhiteboard: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          title?: string;
          description?: string;
          /** Format: binary */
          file?: string;
        };
      };
    };
  };
  LessonWhiteboardController_getWhiteboardPicture: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        state?: 'view' | 'download';
      };
    };
    responses: {
      200: unknown;
    };
  };
  SeedsController_getAllRoles: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  PupilsController_getHome: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilProfileHomeOutputDto'];
        };
      };
    };
  };
  PupilsController_getLesson: {
    parameters: {
      query: {
        limit: number;
        page: number;
        sort?: string;
        order?: 'ASC' | 'DESC';
        /** search in user, cohort, subject */
        search?: string;
        /** Used for searching by LessonTypes */
        lessonType?: 'AVAILABLE_NOW' | 'ONE_TO_ONE' | 'GROUP';
        /** Used for searching by status */
        status?:
          | 'Pending'
          | 'Live'
          | 'In-Chat'
          | 'Cancelled'
          | 'Declined'
          | 'Confirmed'
          | 'Missed'
          | 'Completed'
          | 'Expired'
          | 'Online-Tutor';
        /** Used for searching by state */
        lessonState?: 'Requested' | 'Scheduled' | 'Completed';
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SearchPupilLessonOutputPaginationDto'];
        };
      };
    };
  };
  PupilsController_getLessonDetail: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilLessonDetailsOutputDto'];
        };
      };
    };
  };
  PupilsController_getProfileDetails: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilProfileOutputDto'];
        };
      };
    };
  };
  PupilsController_getLessonInfoForReview: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonDetailsOutputDto'];
        };
      };
    };
  };
  PupilsController_savePupilReview: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseOutputDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PupilLessonReviewInputDto'];
      };
    };
  };
  PupilLessonController_getDetails: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupLessonDetailsOutputDto'];
        };
      };
    };
  };
  PupilLessonController_getAgreements: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonAgreementOutputDto'];
        };
      };
    };
  };
  PupilLessonController_getAttachments: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonAttachmentOutputDto'][];
        };
      };
    };
  };
  PupilLessonController_getRoomChats: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonRoomChatOutputDto'][];
        };
      };
    };
  };
  PupilLessonController_getLessonReview: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['LessonRoomReviewsOutputDto'][];
        };
      };
    };
  };
  PupilLessonController_getLessonChatFile: {
    parameters: {
      path: {
        lessonId: number;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupLessonChatFilesOutputDto'][];
        };
      };
    };
  };
  PupilLessonController_downloadChatAttachment: {
    parameters: {
      path: {
        chatAttachmentId: number;
      };
    };
    responses: {
      200: unknown;
    };
  };
  PupilLessonController_downloadAttachData: {
    parameters: {
      path: {
        attachmentManagerId: number;
      };
    };
    responses: {
      200: unknown;
    };
  };
  PupilLessonController_requestCancelLesson: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PupilReasonCancel'];
      };
    };
  };
  ParentalAssociationController_getAllAssociation: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AssociationOutputDto'][];
        };
      };
    };
  };
  ParentalAssociationController_createNewAssociation: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateNewAssociationDto'];
      };
    };
  };
  PupilParentController_linkPupilAndParent: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['HttpResponseDto'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PupilParentInputDto'];
      };
    };
  };
  PupilParentController_getAllParents: {
    parameters: {};
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['PupilParentDetailsDto'][];
        };
      };
    };
  };
  AdminAuditController_getAdminAudit: {
    parameters: {
      query: {
        limit: number;
        page: number;
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['AuditPaginationOutputDto'];
        };
      };
    };
  };
  AdminAuditController_saveAudit: {
    parameters: {};
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['Audit'];
        };
      };
    };
  };
}

export interface external {}

export enum ApiPaths {
  AppController_getHello = '',
  AppController_getTimeZone = '/timezone',
  NotificationsController_getNotifications = '/notifications',
  NotificationsController_markAllNotificationsRead = '/notifications/read/all',
  NotificationsController_markNotificationRead = '/notifications/read/:id',
  UsersController_getInfo = '/users/info',
  UsersController_updatePassword = '/users/password/update',
  UsersController_requestDeleteAccount = '/users/delete-account/request',
  UsersController_verifyDeleteAccount = '/users/delete-account/verify',
  UsersController_updateIsReceivedMarketingEmail = '/users/receive-marketing-email',
  UsersController_getDevices = '/users/devices',
  UsersController_postDevice = '/users/device',
  UsersController_getDocument = '/users/document/:id',
  UsersController_getUserProfilePicture = '/users/:id/profile-picture',
  UsersController_getSelfProfilePicture = '/users/profile-picture',
  UserAccountLinkingController_linkTwoAccounts = '/users/account/link',
  UserAccountLinkingController_getLinkedAccount = '/users/account/link',
  UserAccountLinkingController_removeLinkOfAccount = '/users/account/remove/link',
  TutorsController_updateProfilePicture = '/tutors/profile-picture',
  TutorsController_updateTutor = '/tutors',
  TutorsController_getStatus = '/tutors/bio',
  TutorsController_setStatus = '/tutors/bio',
  TutorsController_getTutorDetail = '/tutors/:tutorId/info',
  TutorsController_getTutorDetails = '/tutors/info',
  TutorsController_fetchHome = '/tutors/home',
  TutorsController_saveNewEmail = '/tutors/change-email',
  TutorsDiaryController_getLessonDiaryPagination = '/tutor/diary',
  TutorsDiaryController_getTutorLessonDiaryPagination = '/tutor/diary/lesson-diary',
  TutorsDiaryController_getTutorExpiredDiaryPagination = '/tutor/diary/expired-diary',
  TutorsDiaryController_getLessonDiaryDetail = '/tutor/diary/:did/details',
  TutorsDiaryController_updateTutorDiaryStatus = '/tutor/diary/:did/status',
  TutorsDiaryController_getTutorDiaryAvailability = '/tutor/diary/:did/availability',
  TutorsDiaryController_updateTutorDiaryDetail = '/tutor/diary/:did/availability',
  TutorsDiaryController_pauseTutorDiary = '/tutor/diary/:diaryId/pause',
  TutorsDiaryController_activeTutorDiary = '/tutor/diary/:diaryId/active',
  TutorsDiaryController_deleteTutorDiary = '/tutor/diary/:diaryId',
  TutorsDiaryController_getDiaryForEdit = '/tutor/diary/:id/diary',
  TutorsDiaryController_editTutorDiary = '/tutor/diary/:id/diary',
  TutorLessonController_acceptLesson = '/tutor/lesson/:id/accept',
  TutorLessonController_cancelLesson = '/tutor/lesson/:id/cancel',
  TutorLessonController_declineLesson = '/tutor/lesson/:id/decline',
  TutorLessonController_getLessonDetailCompleted = '/tutor/lesson/completed/:id/details',
  TutorLessonController_getLessonPriceSummary = '/tutor/lesson/completed/:id/price-summary',
  TutorLessonController_getLessonChatMessages = '/tutor/lesson/completed/:id/chats',
  TutorLessonController_getLessonChatFiles = '/tutor/lesson/completed/:id/files',
  TutorLessonController_getTutorLessonReviews = '/tutor/lesson/completed/:id/reviews',
  TutorSchoolController_getTutorAgreement = '/tutor/school/:schoolId/tutor-agreement',
  TutorSchoolController_declineTutorAgreement = '/tutor/school/:schoolId/decline',
  TutorSchoolController_acceptTutorAgreement = '/tutor/school/:schoolId/accept',
  TutorSchoolController_cancelTutorAgreement = '/tutor/school/:schoolId/cancel',
  TutorSchoolController_getApprovedProfileInfo = '/tutor/school/:schoolId/profile',
  TutorsOnlineController_getStatus = '/tutors/online',
  TutorsOnlineController_setStatusOnline = '/tutors/online/set-online',
  TutorsOnlineController_updateStatusOnline = '/tutors/online/update-online',
  TutorsOnlineController_setStatusOffline = '/tutors/online/set-offline',
  TutorsPricesController_getPrices = '/tutors/prices',
  TutorsPricesController_setPrices = '/tutors/prices',
  TutorAgreementController_getApprovalAgreements = '/tutor/agreement/approval',
  TutorAgreementController_getReviewedAgreements = '/tutor/agreement/reviewed',
  TutorAgreementController_getApprovedAgreements = '/tutor/agreement/approved',
  TutorsDocumentsController_getDocument = '/tutors/documents',
  TutorsDocumentsController_getDocumentStatus = '/tutors/documents/status',
  TutorsDocumentsController_viewApproved = '/tutors/documents/view-approved',
  TutorsDocumentsController_uploadDfe = '/tutors/documents/upload/dfe',
  TutorsDocumentsController_uploadDfePut = '/tutors/documents/dfe',
  TutorsDocumentsController_uploadDbs = '/tutors/documents/upload/dbs',
  TutorsDocumentsController_uploadDbsPut = '/tutors/documents/dbs',
  TutorsDocumentsController_uploadProofOfId = '/tutors/documents/upload/proof-of-id',
  TutorsQualificationsController_get = '/tutors/qualifications',
  TutorsQualificationsController_add = '/tutors/qualifications',
  TutorsQualificationsController_addBulk = '/tutors/qualifications/bulk',
  TutorsQualificationsController_update = '/tutors/qualifications/bulk',
  TutorsQualificationsController_delete = '/tutors/qualifications/:qualificationId',
  AdminsController_getHomeMetaData = '/admins/statistics',
  AdminsController_upload = '/admins/upload',
  AdminsController_getUserProfilePicture = '/admins/user/:id/profile-picture',
  AdminsUsersController_getUserList = '/admin/user',
  AdminsUsersController_addJob = '/admin/job/add',
  AdminsUsersController_getJob = '/admin/jobs',
  AdminsUsersController_getUser = '/admin/user/:id',
  AdminsUsersController_editUser = '/admin/user/:id',
  AdminsUsersController_resendInviteUser = '/admin/resend-invite-user/:id',
  AdminsUsersController_disableUser = '/admin/disable-user/:id',
  AdminsUsersController_activeUser = '/admin/activate-user/:id',
  AdminsUsersController_removeUser = '/admin/remove-user/:id',
  AdminsUsersController_getUserSearchMeta = '/admin/search-user-meta',
  AdminsUsersController_getUserAddMeta = '/admin/add-user-meta',
  AdminsUsersController_getUsersByStatus = '/admin',
  AdminsUsersController_verifyNewAdmin = '/admin/verify-new-admin',
  AdminsUsersController_updateStatus = '/admin/update-status/:id',
  AdminsUsersController_addParent = '/admin/add-parent',
  AdminsUsersController_verifyNewParent = '/admin/verify-new-parent',
  AdminsUsersController_getKnektuUserDetail = '/admin/knektu-user/:id',
  AdminsUsersController_getPendingKnektuUser = '/admin/knektu-users/pending',
  AdminsUsersController_getActiveKnektuUser = '/admin/knektu-users/active',
  AdminsUsersController_getRemovedKnektuUser = '/admin/knektu-users/disabled',
  AdminsUsersController_addUser = '/admin/add-user',
  AdminsRolesController_getAllAdminRoles = '/admins/roles/adminRoles',
  AdminsRolesController_getAllRoles = '/admins/roles',
  AdminsRolesController_getAllAdminPermissions = '/admins/roles/admin-permissions',
  AdminsRolesController_getAllRoleById = '/admins/roles/:roleId',
  AdminsRolesController_deleteRoleById = '/admins/roles/:roleId',
  AdminsRolesController_updateRoleById = '/admins/roles/:roleId',
  AdminsRolesController_addRole = '/admins/roles/add-admin-role',
  AdminTutorLessonController_searchLessonPagination = '/admin/tutor/:id/lesson',
  AdminTutorSchoolController_getSchoolsApprovals = '/admin/tutor/:id/schools-approvals',
  AdminTeacherController_getTeachersPagination = '/admin/teacher',
  AdminTeacherController_getTeacher = '/admin/teacher/:teacherUserId',
  AdminPupilController_getPupilDetails = '/admin/pupil/:pupilUserId',
  AdminPupilController_getParentsOfPupil = '/admin/pupil/:pupilUserId/parents',
  AdminTutorController_getPendingTutors = '/admin/tutor',
  AdminTutorController_getProfileInfo = '/admin/tutor/:id/profile',
  AdminTutorController_getQualification = '/admin/tutor/:id/qualifications',
  AdminTutorController_documentList = '/admin/tutor/:id/documents',
  AdminTutorController_acceptDocumentOfTutor = '/admin/tutor/documents/accept',
  AdminTutorController_rejectDocumentOfTutors = '/admin/tutor/documents/reject',
  AdminTutorController_acceptProfileImageOfTutors = '/admin/tutor/:tId/profile-image/:pId/accept',
  AdminTutorController_rejectProfileImageOfTutors = '/admin/tutor/:tId/profile-image/:pId/reject',
  AdminTutorController_rejectTeacher = '/admin/tutor/:id/rejected',
  AdminTutorController_suspendTeacher = '/admin/tutor/:id/suspend',
  AdminTutorController_approveTeacher = '/admin/tutor/:id/approved',
  AdminSchoolController_getSchoolStaffPagination = '/admin/school/:id/staff',
  AdminSchoolController_getActiveSchoolPagination = '/admin/school/active',
  AdminSchoolController_getDisableSchoolPagination = '/admin/school/disabled',
  AdminSchoolController_getSchoolStatus = '/admin/school/:id/status',
  AdminSchoolController_disableStatusSchool = '/admin/school/:id/disable',
  AdminSchoolController_activeStatusSchool = '/admin/school/:id/active',
  AdminSchoolController_getSchoolFund = '/admin/school/:id/fund',
  AdminSchoolController_getSchoolName = '/admin/school/:id',
  AdminSchoolController_getAllSchoolAllocations = '/admin/school/:schoolId/allocations',
  AdminSchoolController_getSchoolCohortsAllocations = '/admin/school/:schoolId/allocations/cohorts',
  AdminSchoolController_getTutorApprovals = '/admin/school/:schoolId/tutor/agreement/approval',
  AdminSchoolController_getTutorAgreementPagination = '/admin/school/:schoolId/tutor/agreement',
  AdminSchoolController_getAllTutors = '/admin/school/:schoolId/tutor/all',
  AdminSchoolController_getFullProfileDetails = '/admin/school/:schoolId/tutor/:id/full',
  AdminSchoolController_getAgreementStatus = '/admin/school/:schoolId/tutor/:id/agreement/status',
  AdminSchoolController_getTutorReview = '/admin/school/tutor/:tutorUserId/tutor-review',
  AdminSchoolController_getTutorReviewSummary = '/admin/school/tutor/:id/review',
  AdminSchoolController_getAllAgreements = '/admin/school/:schoolId/tutor/:id/agreement',
  AdminSchoolController_priceSummary = '/admin/school/:schoolId/tutor/:tutorUserId/price/summary',
  AdminSchoolController_getLessons = '/admin/school/:schoolId/lessons',
  AdminSchoolController_getSchoolStatistic = '/admin/school/:schoolId/statistics',
  AdminLessonController_getAdminLessonPagination = '/admin/lesson',
  AdminLessonController_getLessonDetail = '/admin/lesson/:id',
  AdminLessonController_getLessonDetailCompleted = '/admin/lesson/completed/:id/details',
  AdminLessonController_getLessonPriceSummary = '/admin/lesson/completed/:id/price-summary',
  AdminLessonController_getLessonChatMessages = '/admin/lesson/completed/:id/chats',
  AdminLessonController_getLessonChatFiles = '/admin/lesson/completed/:id/files',
  AdminLessonController_getTutorLessonReviews = '/admin/lesson/completed/:id/reviews',
  AdminCohortController_getCohortPagination = '/admin/cohort',
  AdminCohortController_getCohortById = '/admin/cohort/:id',
  AdminCohortController_getCohortLesson = '/admin/cohort/:cid/lessons',
  AdminCohortController_getCohortPupilsPagination = '/admin/cohort/:id/pupils',
  AdminSchoolCohortController_getCohorts = '/admin/school/:schoolId/cohort',
  AdminSchoolCohortController_getCohortById = '/admin/school/:schoolId/cohort/:cohortId',
  AdminSchoolCohortController_getCohortLesson = '/admin/school/:schoolId/cohort/:cohortId/lessons',
  AdminSchoolCohortController_getCohortLessonDetail = '/admin/school/cohort/lessons/:lessonId',
  AdminSchoolCohortController_getCohortPupilsPagination = '/admin/school/:schoolId/cohort/:cohortId/pupils',
  AdminSchoolCohortController_getPupilsName = '/admin/school/:schoolId/cohort/:cohortId/pupils/registered',
  AdminSchoolPupilController_getUploadedPupil = '/admin/school/:schoolId/pupil/uploaded',
  AdminSchoolPupilController_getPendingPupil = '/admin/school/:schoolId/pupil/pending',
  AdminSchoolPupilController_getActivePupil = '/admin/school/:schoolId/pupil/active',
  AdminSchoolPupilController_getDisabledPupil = '/admin/school/:schoolId/pupil/disabled',
  AdminSchoolPupilController_getSchoolPupilStatus = '/admin/school/:schoolId/pupil/:pupilId/status',
  AdminSchoolPupilController_getPupilForEdit = '/admin/school/:schoolId/pupil/:pupilId/details',
  AdminSchoolTutorController_getDiaries = '/admin/school/:schoolId/tutor/:tutorUserId/diary',
  AdminSchoolTeacherController_getTeacher = '/admin/school/:schoolId/teacher/:teacherUserId',
  AdminSchoolTeacherController_getTeacherDetail = '/admin/school/:schoolId/teacher/:teacherUserId/detail',
  AdminSchoolTeacherController_getTeacherPagination = '/admin/school/:schoolId/teacher',
  AdminSchoolRoleController_getAllRolesInSchool = '/admin/school/:schoolId/roles',
  AdminSchoolRoleController_allCohortLeads = '/admin/school/:schoolId/role/lead',
  AdminSchoolStaffController_getSchoolStaffPagination = '/admin/school/:schoolId/staff',
  AdminSchoolStaffController_getCohortById = '/admin/school/:schoolId/staff/:staffUserId/details',
  AdminSchoolParentController_getUploadedParents = '/admin/school/:schoolId/parent/uploaded',
  AdminSchoolParentController_getPendingParents = '/admin/school/:schoolId/parent/pending',
  AdminSchoolParentController_getActiveParents = '/admin/school/:schoolId/parent/active',
  AdminSchoolParentController_getDisabledParents = '/admin/school/:schoolId/parent/disabled',
  AdminSchoolParentController_getDetails = '/admin/school/parent/:parentId/details',
  AdminSchoolCohortPupilController_getRegisteredPupilParents = '/admin/school/cohort/pupil/:id/parents',
  AdminSchoolCohortPupilController_getPupilLesson = '/admin/school/:schoolId/cohort/pupil/:pid/lesson',
  AdminSchoolCohortPupilController_getPupilForEdit = '/admin/school/:schoolId/cohort/pupil/:pid/details',
  AdminSchoolLessonController_getLessonDetailCompleted = '/admin/school/:schoolId/lesson/completed/:lessonId/details',
  AdminSchoolLessonController_getLessonPriceSummary = '/admin/school/:schoolId/lesson/completed/:lessonId/price-summary',
  AdminSchoolLessonController_getLessonChatMessages = '/admin/school/:schoolId/lesson/completed/:lessonId/chats',
  AdminSchoolLessonController_getLessonChatFiles = '/admin/school/:schoolId/lesson/completed/:lessonId/files',
  AdminSchoolLessonController_getTutorLessonReviews = '/admin/school/:schoolId/lesson/completed/:lessonId/reviews',
  AdminCohortPupilController_getPupilForEdit = '/admin/cohort/pupil/:pid/details',
  AdminCohortPupilController_getPupilLesson = '/admin/cohort/pupil/:pid/lesson',
  AdminCohortPupilController_getRegisteredPupilParents = '/admin/cohort/pupil/:id/parents',
  AdminUserTeacherController_getTeacherDetail = '/admin/user/:userId/teacher/detail',
  AdminUserTeacherController_getParentsOfTeacher = '/admin/user/:userId/teacher/parents',
  AdminUserTeacherController_getDetails = '/admin/user/:userId/teacher/parent/:parentId/detail',
  AdminUserTeacherController_getCohortsOfTeacher = '/admin/user/:userId/teacher/cohorts',
  AdminUserTeacherController_getLessonsOfTeacher = '/admin/user/:userId/teacher/lessons',
  AdminUserTeacherController_getTeacherLessonDetail = '/admin/user/:userId/teacher/lessons/:lessonId',
  AdminUserTeacherController_getLessonDetailCompleted = '/admin/user/:userId/teacher/lesson/completed/:lessonId/details',
  AdminUserTeacherController_getLessonPriceSummary = '/admin/user/:userId/teacher/lesson/completed/:lessonId/price-summary',
  AdminUserTeacherController_getLessonChatMessages = '/admin/user/:userId/teacher/lesson/completed/:lessonId/chats',
  AdminUserTeacherController_getLessonChatFiles = '/admin/user/:userId/teacher/lesson/completed/:lessonId/files',
  AdminUserTeacherController_getTutorLessonReviews = '/admin/user/:userId/teacher/lesson/completed/:lessonId/reviews',
  AdminUserTeacherController_getLessonWhiteboards = '/admin/user/:userId/teacher/lesson/:lessonId/whiteboard',
  AdminUserTeacherController_getUploadedPupil = '/admin/user/:userId/teacher/pupil/uploaded',
  AdminUserTeacherController_getPendingPupil = '/admin/user/:userId/teacher/pupil/pending',
  AdminUserTeacherController_getActivePupil = '/admin/user/:userId/teacher/pupil/active',
  AdminUserTeacherController_getDisabledPupil = '/admin/user/:userId/teacher/pupil/disabled',
  AdminUserTeacherController_getPupilForEdit = '/admin/user/:userId/teacher/pupil/:pid/details',
  AdminUserTeacherController_getSchoolPupilStatus = '/admin/user/:userId/teacher/pupil/:pupilId/status',
  AdminUserTeacherController_getPupilLesson = '/admin/user/:userId/teacher/pupil/:pid/lesson',
  AdminUserTeacherController_getLessonDetail = '/admin/user/teacher/lessons/:lessonId',
  AdminUserTeacherController_getCohortById = '/admin/user/:userId/teacher/cohorts/:cohortId',
  AdminUserTeacherController_getCohortLesson = '/admin/user/:userId/teacher/cohort/:cohortId/lessons',
  AdminUserTeacherController_getCohortLessonDetail = '/admin/user/teacher/cohort/lessons/:lessonId',
  AdminUserTeacherController_getCohortPupilsPagination = '/admin/user/:userId/teacher/cohort/:cohortId/pupils',
  AdminUserTeacherController_getPupilDetails = '/admin/user/:userId/teacher/cohort/pupil/:pid/details',
  AdminUserTeacherController_getPupilsLesson = '/admin/user/:userId/teacher/cohort/pupil/:pid/lesson',
  AdminUserTeacherController_getRegisteredPupilParents = '/admin/user/cohort/pupil/:pupil/parents',
  AdminUserPupilController_getLessonsOfPupil = '/admin/user/:userId/pupil/lessons',
  AdminUserPupilController_getLessonRequestedDetail = '/admin/user/:userId/pupil/lessons/:lessonId',
  AdminUserParentController_getDetails = '/admin/user/:userId/parent/details',
  AdminLegalController_addLegal = '/admin/legals',
  AdminLegalController_getPaginationTermOfServices = '/admin/legals/:type',
  AdminLegalController_getLegal = '/admin/legals/:legalId/details',
  AdminLegalController_updateLegalById = '/admin/legals/:legalId/update',
  AdminLegalController_makePublishedById = '/admin/legals/:legalId/published',
  AdminLegalController_getVersionForCreate = '/admin/legals/:type/version',
  AdminLegalController_getVersionForUpdate = '/admin/legals/:type/update/version',
  SchoolsController_getOrganizationType = '/schools/organization/type',
  SchoolsController_getSchools = '/schools',
  SchoolsController_updateSchool = '/schools',
  SchoolsController_getSchoolDetails = '/schools/:id/details',
  SchoolsController_getSchoolInfo = '/schools/info',
  SchoolsController_assignUserRoles = '/schools/assignUserRoles',
  SchoolsController_getTeachingStaff = '/schools/staff/teaching',
  SchoolsController_getCohortLead = '/schools/staff/cohort-lead',
  SchoolsController_assignRole = '/schools/roles',
  SchoolsController_getUsers = '/schools/pupils',
  SchoolsController_getStaffs = '/schools/staffs',
  SchoolsController_getTeacher = '/schools/teachers',
  SchoolsController_assignUserRolesLater = '/schools/setup/later',
  SchoolsController_getProfileSetup = '/schools/setup',
  SchoolsController_getTeacherDetail = '/schools/teacher/:teacherUserId/detail',
  SchoolsController_getSchoolPicture = '/schools/:id/picture',
  SchoolsController_changeOwnerInfo = '/schools/change-info-owner',
  SchoolsController_updateProfilePicture = '/schools/picture',
  AdmSchoolController_schoolPagination = '/schools/admins',
  AdmSchoolController_schoolProfile = '/schools/admins/:schoolId',
  AdmSchoolController_schoolConfirmationStatus = '/schools/admins/confirmation/:schoolId',
  SchoolTutorController_getTutorReviewSummary = '/school/tutor/:id/review',
  SchoolTutorController_getFullProfileDetails = '/school/tutor/:id/full',
  SchoolTutorController_getDiaries = '/school/tutor/:id/diary',
  SchoolTutorController_getApprovedTutors = '/school/tutor/approved',
  SchoolTutorController_getReviewedTutors = '/school/tutor/reviewed',
  SchoolTutorController_getAgreementStatus = '/school/tutor/:id/agreement/status',
  SchoolTutorController_getAllTutors = '/school/tutor/all',
  SchoolTutorController_getAllAgreements = '/school/tutor/:id/agreement',
  SchoolTutorController_updateTutorAgreement = '/school/tutor/:id/agreement',
  SchoolTutorController_getTutorReview = '/school/tutor/:tutorUserId/tutor-review',
  SchoolTutorController_approveTutorAgreement = '/school/tutor/:id/agreement/approve',
  SchoolTutorController_delistTutor = '/school/tutor/:id/agreement/delist',
  SchoolTutorController_relistTutor = '/school/tutor/:id/agreement/relist',
  SchoolTutorController_cancelTutorAgreement = '/school/tutor/:id/agreement/cancel',
  SchoolTutorController_reviewTutorAgreement = '/school/tutor/:id/agreement/review',
  SchoolTutorController_priceSummary = '/school/tutor/:id/price/summary',
  CohortPupilController_getPupilDetails = '/schools/cohort/:cid/pupil/:pid/details',
  CohortPupilController_getRegisteredPupilParents = '/schools/cohort/pupil/:id/parents',
  CohortPupilController_getPupilLesson = '/schools/cohort/pupil/:pid/lesson',
  CohortPupilController_disablePupil = '/schools/cohort/pupil/:pid/disable',
  CohortPupilController_activePupil = '/schools/cohort/pupil/:pid/active',
  CohortPupilController_getPupilForEdit = '/schools/cohort/pupil/:pid/details',
  CohortPupilController_editPupil = '/schools/cohort/pupil/:pid/update',
  SchoolPupilController_getPupilLessons = '/school/pupil/:pid/lesson',
  SchoolPupilController_getSchoolPupilStatus = '/school/pupil/:pid/status',
  SchoolPupilController_disableStatusPupil = '/school/pupil/:pid/disable',
  SchoolPupilController_reactiveStatusPupil = '/school/pupil/:id/reactive',
  SchoolPupilController_getPupilLessonDetail = '/school/pupil/:pid/lesson/:lid',
  SchoolPupilController_createIndividualPupil = '/school/pupil/individual-pupil',
  SchoolPupilController_getUploadedPupil = '/school/pupil/uploaded',
  SchoolPupilController_getPendingPupil = '/school/pupil/pending',
  SchoolPupilController_getActivePupil = '/school/pupil/active',
  SchoolPupilController_getDisabledPupil = '/school/pupil/disabled',
  SchoolPupilController_getPupilsName = '/school/pupil/pupils',
  SchoolPupilController_updatePupil = '/school/pupil/:id',
  SchoolStaffController_getSchoolStaffPagination = '/school/staff',
  SchoolStaffController_getCohortById = '/school/staff/:id/details',
  SchoolStaffController_disableStatusSchool = '/school/staff/:id/disable',
  SchoolStaffController_reactiveStatusSchool = '/school/staff/:id/active',
  SchoolStaffController_changeStaffInfo = '/school/staff/:staffUserId/change-info',
  SchoolCohortController_getCohorts = '/schools/cohort',
  SchoolCohortController_newCohort = '/schools/cohort',
  SchoolCohortController_getCohortById = '/schools/cohort/:id',
  SchoolCohortController_updateCohort = '/schools/cohort/:id',
  SchoolCohortController_deleteCohort = '/schools/cohort/:id',
  SchoolCohortController_addPupilsToCohort = '/schools/cohort/:id/pupils',
  SchoolCohortController_getCohortPupilsPagination = '/schools/cohort/:id/pupils',
  SchoolCohortController_allPupilsByCohortId = '/schools/cohort/:id/add-pupils',
  SchoolCohortController_getAllPupils = '/schools/cohort/:id/pupils/all',
  SchoolCohortController_getPupilsName = '/schools/cohort/:id/pupils/registered',
  SchoolCohortController_getLeadByCohortId = '/schools/cohort/:id/lead',
  SchoolCohortController_allocateFundToCohort = '/schools/cohort/allocate-fund/:id',
  SchoolCohortController_deallocateFundToCohort = '/schools/cohort/deallocate-fund/:id',
  SchoolCohortController_getCohortFundingSum = '/schools/cohort/:id/funding',
  SchoolParentController_getAllPupils = '/schools/parent/pupils',
  SchoolParentController_getAllParents = '/schools/parent',
  SchoolParentController_getUploadedParents = '/schools/parent/uploaded',
  SchoolParentController_getPendingParents = '/schools/parent/pending',
  SchoolParentController_getActiveParents = '/schools/parent/active',
  SchoolParentController_getDisabledParents = '/schools/parent/disabled',
  SchoolParentController_addParent = '/schools/parent/add',
  SchoolParentController_checkPrimaryParent = '/schools/parent/:pupilId/primary-parent',
  SchoolParentController_getDetails = '/schools/parent/:parentId/details',
  SchoolParentController_editParentInfo = '/schools/parent/:id',
  SchoolParentController_getUploadedParent = '/schools/parent/uploaded-parent',
  SchoolParentController_schoolInviteParent = '/schools/parent/invites',
  TeacherPupilController_getPupilsName = '/teacher/pupil/pupils',
  TeacherPupilController_getPupilPagination = '/teacher/pupil',
  TeacherPupilController_getPupilLesson = '/teacher/pupil/:id/lesson',
  TeacherPupilController_getPupilStatus = '/teacher/pupil/:id/status',
  SchoolWalletController_getAllCohorts = '/school/wallet/cohorts',
  SchoolWalletController_getFundAvailable = '/school/wallet/fund/available',
  SchoolWalletController_addFundToCohort = '/school/wallet/cohort/:id/fund/add',
  SchoolWalletController_getAllSchoolAllocations = '/school/wallet/allocations',
  SchoolWalletController_cardPayRequest = '/school/wallet/card/pay',
  SchoolWalletController_getSchoolCohortsAllocations = '/school/wallet/allocations/cohorts',
  SchoolWalletController_getCardList = '/school/wallet/card/list',
  SchoolWalletController_cardSetup = '/school/wallet/card/setup',
  SchoolLessonController_getLessons = '/schools/lesson',
  SchoolLessonController_getLesson = '/schools/lesson/:lid',
  SchoolLessonController_getLessonDetail = '/schools/lesson/:lid/detail',
  SchoolLessonController_editLessonInfo = '/schools/lesson/:lid/edit',
  SchoolLessonController_getLessonDetailCompleted = '/schools/lesson/completed/:id/details',
  SchoolLessonController_getLessonPriceSummary = '/schools/lesson/completed/:id/price-summary',
  SchoolLessonController_getLessonChatMessages = '/schools/lesson/completed/:id/chats',
  SchoolLessonController_getLessonChatFiles = '/schools/lesson/completed/:id/files',
  SchoolLessonController_getTutorLessonReviews = '/schools/lesson/completed/:id/reviews',
  SchoolLessonController_getAllTutorsByLessonId = '/schools/lesson/:lessonId/tutor/all',
  SchoolLessonController_declineRequestCancelLesson = '/schools/lesson/:lId/cancel/pupil/:pId/decline',
  SchoolLessonController_approveRequestCancelLesson = '/schools/lesson/:lId/cancel/pupil/:pId/approve',
  SchoolTeacherController_getTeacherPagination = '/school/teacher',
  SchoolTeacherController_getAllTeachers = '/school/teacher/teachers',
  SchoolTeacherController_disableTeacher = '/school/teacher/:tchId/disable',
  SchoolTeacherController_activeTeacher = '/school/teacher/:tchId/active',
  SchoolTeacherController_getTeacher = '/school/teacher/:id',
  SchoolTeacherController_updateTeacher = '/school/teacher/:id',
  SchoolTeacherController_getCohortsOfTeacher = '/school/teacher/:teacherUserId/cohorts',
  SchoolTeacherController_updateLeadsOfCohorts = '/school/teacher/:teacherUserId/cohorts',
  SchoolStatisticController_getSchoolStatistic = '/school/statistic',
  SchoolFundingTypeController_getFundingTypes = '/schools/cohort/funding-type/get-all',
  SchoolFundingTypeController_newCohort = '/schools/cohort/funding-type',
  SchoolStaffInviteController_uploadCSVStaffs = '/school/staff/upload-csv',
  SchoolStaffInviteController_uploadIndividualStaff = '/school/staff/individual',
  SchoolStaffInviteController_getSchoolStaff = '/school/staff/invites',
  SchoolStaffInviteController_schoolInviteStaffs = '/school/staff/invites',
  SchoolStaffInviteController_getInvitedStaff = '/school/staff/reinvites',
  SchoolStaffInviteController_schoolReinviteStaff = '/school/staff/reinvites',
  SchoolStaffInviteController_completeInvitation = '/school/staff/complete-register',
  SchoolCohortLessonController_getCohortLesson = '/schools/cohort/:cid/lessons',
  SchoolCohortLessonController_getCohortLessonDetail = '/schools/cohort/lesson/:id',
  SchoolCohortLessonController_createLesson = '/schools/cohort/create-lesson',
  SchoolCohortLessonController_createNewLessonFromOldLesson = '/schools/cohort/:lessonId/:tutorUserId/create-lesson',
  SchoolCohortLessonController_getCohortFund = '/schools/cohort/cohort-fund/:cohortId',
  SchoolCohortLessonController_checkAvailability = '/schools/cohort/check-availability',
  SchoolCohortLessonController_cancelLesson = '/schools/cohort/cancel-lesson/:lessonId',
  TeacherCohortLessonController_getCohortLessons = '/teacher/cohort/:id/lesson',
  SchoolTeacherInviteController_uploadCsvTeacher = '/school/teacher/upload-csv',
  SchoolTeacherInviteController_uploadIndividualTeacher = '/school/teacher/individual',
  SchoolTeacherInviteController_getSchoolTeachersUploaded = '/school/teacher/invites/uploaded',
  SchoolTeacherInviteController_schoolInviteTeacher = '/school/teacher/invites',
  SchoolTeacherInviteController_getSchoolTeachersPending = '/school/teacher/invites/pending',
  SchoolTeacherInviteController_getInvitedStaff = '/school/teacher/reinvites',
  SchoolTeacherInviteController_schoolResendInviteTeacher = '/school/teacher/reinvites',
  SchoolTeacherInviteController_completeInvitation = '/school/teacher/complete-register',
  SchoolTutorAgreementController_getTutorAgreementPagination = '/school/tutor/agreement',
  SchoolTutorAgreementController_saveTutorReviewProcess = '/school/tutor/agreement/review',
  SchoolTutorAgreementController_getAgreementDetail = '/school/tutor/agreement/:id/detail',
  SchoolTutorAgreementController_getTutorApprovals = '/school/tutor/agreement/approval',
  SchoolTutorAgreementController_createTutorApproval = '/school/tutor/agreement/approval',
  SchoolTutorAgreementController_cancelAgreementTutor = '/school/tutor/agreement/cancel-request',
  SchoolPupilParentInviteController_uploadCSVPupils = '/school/pupil/upload-csv',
  SchoolPupilParentInviteController_getSchoolPupils = '/school/pupil/invites',
  SchoolPupilParentInviteController_schoolInvitePupils = '/school/pupil/invites',
  SchoolPupilParentInviteController_getInvitedPupil = '/school/pupil/reinvites',
  SchoolPupilParentInviteController_schoolReInvitePupil = '/school/pupil/reinvites',
  SchoolPupilParentInviteController_pupilCompleteInvitation = '/school/pupil/complete-register',
  SchoolPupilParentInviteController_getSchoolParents = '/school/parent/invite',
  SchoolPupilParentInviteController_schoolInviteParent = '/school/parent/invites',
  SchoolPupilParentInviteController_getInvitedParent = '/school/parent/reinvites',
  SchoolPupilParentInviteController_schoolReinviteParents = '/school/parent/reinvites',
  SchoolPupilParentInviteController_parentCompleteInvitation = '/school/parent/complete-register',
  ChatMessagesController_createNewMessageSchoolTutor = '/chat/school-tutor',
  ChatMessagesController_createNewMessageTutorSchool = '/chat/tutor-school',
  ChatMessagesController_createNewMessageTeacherTutor = '/chat/teacher-tutor',
  ChatMessagesController_createNewMessageTutorTeacher = '/chat/tutor-teacher',
  ChatMessagesController_getAllLessonChats = '/chat/lesson/:id',
  ChatMessagesController_getAllAgreementChats = '/chat/agreement/:id',
  ChatMessagesController_getAllUserBetweenChats = '/chat/school/:id',
  ChatMessagesController_getAttachmentFile = '/chat/attachment/:id',
  SchoolRolesController_getAllPermissions = '/school/role/permissions',
  SchoolRolesController_newRole = '/school/role',
  SchoolRolesController_getAllRolesInSchool = '/school/role',
  SchoolRolesController_addUserToSchoolRole = '/school/role/:id/user/add',
  SchoolRolesController_allCohortLeads = '/school/role/lead',
  SchoolRolesController_addTeacherAsCohortLead = '/school/role/lead/add',
  SchoolRolesController_updateRoleById = '/school/role/:roleId',
  SchoolRolesController_deleteRoleById = '/school/role/:roleId',
  SchoolRolesController_getRoleById = '/school/role/:roleId',
  SchoolRolesController_deleteUserToSchoolRole = '/school/role/:roleId/user/:userId',
  LessonController_flagLesson = '/lesson/:id/flag/:state',
  LessonController_getLessons = '/lesson',
  LessonController_initializeLesson = '/lesson/initialize/:version',
  AdmLessonController_getLessonDetails = '/admin/lesson/:id/details',
  StdLessonController_getLessonDetails = '/student/lesson/:id/details',
  StdLessonController_getAllLessons = '/student/lesson',
  StdLessonController_getAgoraToken = '/student/lesson/:id/token',
  StdLessonController_refreshAgoraToken = '/student/lesson/:id/token/refresh',
  StdLessonController_startLesson = '/student/lesson/:id/start',
  StdLessonController_leaveLesson = '/student/lesson/:id/leave',
  StdLessonController_addCommentForTutor = '/student/lesson/:id/tutor/review',
  TtrLessonController_getAllPaginationLesson = '/tutor/lesson/list',
  TtrLessonController_getTutorLessonDetails = '/tutor/lesson/:id',
  TtrLessonController_getAgoraToken = '/tutor/lesson/:id/token',
  TtrLessonController_refreshAgoraToken = '/tutor/lesson/:id/token/refresh',
  StdFindTutorController_getFindTutorAvailableNow = '/student/find-tutor/available-now',
  RequestLessonChatController_getAllMessagesLeadTutor = '/lesson/request/chat/:id/lead-tutor',
  LessonAttachmentController_getAllAttachments = '/lesson/attachment',
  LessonAttachmentController_attachResourceAndLesson = '/lesson/attachment',
  LessonAttachmentController_getAttachmentFile = '/lesson/attachment/:id',
  LessonAttachmentController_addLink = '/lesson/attachment/link/add',
  LessonAttachmentController_addFile = '/lesson/attachment/file/add',
  LessonAttachmentController_reuseResource = '/lesson/attachment/resource/reuse',
  PaymentsStudentsController_getBalance = '/finances/payments/students/get-balance',
  PaymentsStudentsController_get = '/finances/payments/students/get-topup-history',
  PaymentsStudentsController_getCreateCardSetup = '/finances/payments/students/get-create-card-setup',
  PaymentsStudentsController_getCardList = '/finances/payments/students/get-card-list',
  PaymentsStudentsController_deleteACard = '/finances/payments/students/delete-a-card',
  PaymentsStudentsController_cardPayRequest = '/finances/payments/students/card-pay-request',
  PaymentsSchoolController_getBalance = '/finances/payments/school/get-balance',
  PaymentsSchoolController_get = '/finances/payments/school/get-topup-history',
  PaymentsSchoolController_getBankTransferClientSecret = '/finances/payments/school/get-bank-transfer-client-secret',
  PaymentsSchoolController_getCreateCardSetup = '/finances/payments/school/get-create-card-setup',
  PaymentsSchoolController_getCardList = '/finances/payments/school/get-card-list',
  PaymentsSchoolController_deleteACard = '/finances/payments/school/delete-a-card',
  PaymentsSchoolController_cardPayRequest = '/finances/payments/school/card-pay-request',
  PaymentsAdminController_addCreditToSchool = '/finances/payments/admin/add-credit-to-school',
  PaymentsAdminController_getSchoolBalance = '/finances/payments/admin/balance/school/:id',
  PaymentTutorController_getTutorPaymentStatus = '/finances/payments/tutor/status',
  PaymentTutorController_getStripeAccountInfo = '/finances/payments/tutor/get-stripe-account-info',
  PaymentTutorController_getConnectWithStripeLink = '/finances/payments/tutor/connect-with-stripe',
  PaymentTutorController_getStripeLoginLink = '/finances/payments/tutor/get-stripe-login-link',
  PaymentTutorController_getTutorWalletTotal = '/finances/payments/tutor/wallet-total',
  PaymentTutorController_getTutorPaymentPaid = '/finances/payments/tutor/paid',
  PaymentTutorController_getTutorPaymentPaidDetail = '/finances/payments/tutor/paid/:date',
  BankTransferHookController_acceptPayment = '/finances/bank-transfer/hook/accept-payment',
  AdditionalController_getKeyStageLevels = '/additional/key-stage-levels',
  AdditionalController_getApprovedTutorsKeyStageLevels = '/additional/key-stage-levels/filled',
  AdditionalController_getSubjects = '/additional/subjects',
  AdditionalController_getTeachingStatuses = '/additional/teaching-statuses',
  AdditionalController_getAdditionalNeeds = '/additional/additional-needs',
  AdditionalController_getOrganizationTypes = '/additional/organization-types',
  AdditionalController_getCountryCodes = '/additional/country-codes',
  AdditionalController_getPersonTitles = '/additional/person-titles',
  StudentsController_getDetail = '/students/details',
  StudentsController_updateStudent = '/students/update-student',
  StudentsAdminsController_listAdmin = '/students/admins',
  StudentsAdminsController_getDetail = '/students/admins/details/:studentId',
  StudentsAdminsController_resendInviteStudent = '/students/admins/resend-invite-student/:id',
  StudentsAdminsController_disableStudent = '/students/admins/disable-student/:studentId',
  StudentsAdminsController_activeStudent = '/students/admins/activate-student/:studentId',
  DiariesTutorsController_get = '/diaries/tutors',
  DiariesTutorsController_createAvailability = '/diaries/tutors/availability',
  DiariesTutorsController_createGroupSingle = '/diaries/tutors/group/single',
  DiariesTutorsController_createGroupSeries = '/diaries/tutors/group/series',
  TeacherController_getTeacherLessonRequested = '/teacher/home/lesson-requested',
  TeacherController_getTeacherDetail = '/teacher/home/detail',
  TeacherController_getTeacherLessonScheduled = '/teacher/home/lesson-scheduled',
  TeacherController_getStatistics = '/teacher/home/statistics',
  TeacherTutorController_getTutorReviewSummary = '/teacher/tutor/:id/review',
  TeacherTutorController_getTutorReviewSummaryTest = '/teacher/tutor/:id/review/test',
  TeacherTutorController_getTutorReview = '/teacher/tutor/:id/tutor-review',
  TeacherTutorController_getFullProfileDetails = '/teacher/tutor/:id/full',
  TeacherTutorController_getDiaries = '/teacher/tutor/:id/diary',
  TeacherTutorController_getAllAgreements = '/teacher/tutor/:id/agreement',
  TeacherTutorController_getApprovedTutors = '/teacher/tutor/approved',
  TeacherTutorController_getReviewedTutors = '/teacher/tutor/reviewed',
  TeacherTutorController_getAllTutors = '/teacher/tutor/all',
  TeacherTutorController_priceSummary = '/teacher/tutor/:id/price/summary',
  TeacherLessonController_getTeacherLessons = '/teacher/lesson',
  TeacherLessonController_getLessonRequestedDetail = '/teacher/lesson/:id',
  TeacherLessonController_getLessonChats = '/teacher/lesson/:id/chats',
  TeacherLessonController_cancelRequest = '/teacher/lesson/:id/cancel',
  TeacherLessonController_editLessonInfo = '/teacher/lesson/:id/edit',
  TeacherLessonController_createLesson = '/teacher/lesson/create-lesson',
  TeacherLessonController_createNewLessonFromOldLesson = '/teacher/lesson/:lessonId/:tutorUserId/create-lesson',
  TeacherLessonController_getCohortFund = '/teacher/lesson/cohort-fund/:cohortId',
  TeacherLessonController_checkAvailability = '/teacher/lesson/check-availability',
  TeacherLessonController_getLessonDetailCompleted = '/teacher/lesson/completed/:id/details',
  TeacherLessonController_getLessonPriceSummary = '/teacher/lesson/completed/:id/price-summary',
  TeacherLessonController_getLessonChatMessages = '/teacher/lesson/completed/:id/chats',
  TeacherLessonController_getLessonChatFiles = '/teacher/lesson/completed/:id/files',
  TeacherLessonController_getTutorLessonReviews = '/teacher/lesson/completed/:id/reviews',
  TeacherLessonController_getAllTutorsByLessonId = '/teacher/lesson/:lessonId/tutor/all',
  TeacherLessonController_declinedRequestCancelLesson = '/teacher/lesson/:lId/cancel/pupil/:pId/decline',
  TeacherLessonController_approveRequestCancelLesson = '/teacher/lesson/:lId/cancel/pupil/:pId/approve',
  TeacherCohortController_getCohortsDetails = '/teacher/cohort/:id/details',
  TeacherCohortController_getPupilsOfCohort = '/teacher/cohort/:id/pupils',
  TeacherCohortController_addPupilsToCohort = '/teacher/cohort/:id/pupils',
  TeacherCohortController_getFundingOfCohort = '/teacher/cohort/:id/funding',
  TeacherCohortController_getApprovedTutors = '/teacher/cohort/approved',
  TeacherCohortController_getReviewedTutors = '/teacher/cohort/reviewed',
  TeacherCohortController_getLesson = '/teacher/cohort/:id/lesson/completed',
  TeacherCohortController_getAllPupils = '/teacher/cohort/:id/pupils/all',
  TeacherCohortController_getPupilsName = '/teacher/cohort/:id/pupils/registered',
  TeacherCohortController_getTeacherCohorts = '/teacher/cohort',
  TeacherCohortController_getPupilDetails = '/teacher/cohort/:cid/pupil/:pid/details',
  TeacherCohortController_getPupilRequestedLessons = '/teacher/cohort/:cid/pupil/:pid/lesson-requested',
  TeacherCohortController_getPupilCompletedLessons = '/teacher/cohort/:cid/pupil/:pid/lesson-completed',
  TeacherCohortController_getPupilScheduledLessons = '/teacher/cohort/:cid/pupil/:pid/lesson-scheduled',
  TeacherCohortController_getRegisteredPupilParents = '/teacher/cohort/pupil/:id/parents',
  TeacherCohortController_getRegisteredParents = '/teacher/cohort/parents',
  TeacherCohortController_getDetails = '/teacher/cohort/parent/:parentId/details',
  TeacherStatisticController_getSchoolStatistic = '/teacher/statistic',
  LegalsController_getLegalByTypeSummery = '/legals/published',
  AuthController_login = '/auth/login',
  AuthController_signUpStudent = '/auth/signup/student',
  AuthController_signUpTutor = '/auth/signup/tutor',
  AuthController_resendVerificationEmail = '/auth/verification-email/resend',
  AuthController_verifyEmail = '/auth/verification-email/verify',
  AuthController_verifyNewEmail = '/auth/verification-new-email/verify',
  AuthController_updateEmail = '/auth/verification-email/update',
  AuthController_isEmailVerified = '/auth/check-email-verified',
  AuthController_changePassword = '/auth/password/forget',
  AuthController_verifyChangePasswordToken = '/auth/password/forget',
  AuthController_updatePassword = '/auth/password/update',
  AuthController_completeInvitation = '/auth/complete-invitation',
  AuthController_completeAdminInvitation = '/auth/admin/complete-invitation',
  AuthController_signUpSchool = '/auth/signup/school',
  AuthController_newPassword = '/auth/new/password',
  AuthController_logoutOneDevice = '/auth/logout/device',
  AuthController_logoutAllDevices = '/auth/logout/device/all',
  LessonRoomPupilController_getLessonDetails = '/lesson-room/pupil/lesson/:id',
  LessonRoomPupilController_canAccessRoom = '/lesson-room/pupil/lesson/:id/access',
  LessonRoomPupilController_joinClass = '/lesson-room/pupil/lesson/:id/join',
  LessonRoomPupilController_leaveClass = '/lesson-room/pupil/lesson/:id/leave',
  LessonRoomPupilController_getLessonChatsHistory = '/lesson-room/pupil/lesson/:id/chats',
  LessonRoomPupilController_getLessonChatsFilesHistory = '/lesson-room/pupil/lesson/:id/files',
  LessonRoomPupilController_getLessonParticipants = '/lesson-room/pupil/lesson/:id/participants',
  LessonRoomPupilController_addFile = '/lesson-room/pupil/lesson/:id/file/add',
  LessonRoomTutorController_getLessonDetails = '/lesson-room/tutor/lesson/:id',
  LessonRoomTutorController_canAccessRoom = '/lesson-room/tutor/lesson/:id/access',
  LessonRoomTutorController_joinClass = '/lesson-room/tutor/lesson/:id/join',
  LessonRoomTutorController_leaveClass = '/lesson-room/tutor/lesson/:id/leave',
  LessonRoomTutorController_addFile = '/lesson-room/tutor/lesson/:id/file/add',
  LessonRoomTutorController_getLessonChatsHistory = '/lesson-room/tutor/lesson/:id/chats',
  LessonRoomTutorController_getLessonChatFiles = '/lesson-room/tutor/lesson/:id/files',
  LessonRoomTutorController_getLessonParticipants = '/lesson-room/tutor/lesson/:id/participants',
  LessonRoomTutorController_getLessonBreakdown = '/lesson-room/tutor/lesson/:id/breakdown',
  LessonRoomTutorController_saveLessonBreakdown = '/lesson-room/tutor/lesson/:id/rate',
  LessonWhiteboardController_saveLessonWhiteboard = '/lesson/:id/whiteboard',
  LessonWhiteboardController_getLessonWhiteboards = '/lesson/:id/whiteboard',
  LessonWhiteboardController_getWhiteboardPicture = '/lesson/whiteboard/:id',
  SeedsController_getAllRoles = '/seeds/run-94da39e2-7814-47c8-9534-a2800b2874a6',
  PupilsController_getHome = '/pupils/home',
  PupilsController_getLesson = '/pupils/lesson',
  PupilsController_getLessonDetail = '/pupils/lesson/:lessonId',
  PupilsController_getProfileDetails = '/pupils/profile',
  PupilsController_getLessonInfoForReview = '/pupils/lesson/:lessonId/review',
  PupilsController_savePupilReview = '/pupils/review/:lessonId',
  PupilLessonController_getDetails = '/pupils/lesson/:id/details',
  PupilLessonController_getAgreements = '/pupils/lesson/:id/agreements',
  PupilLessonController_getAttachments = '/pupils/lesson/:id/attachments',
  PupilLessonController_getRoomChats = '/pupils/lesson/:id/room/chats',
  PupilLessonController_getLessonReview = '/pupils/lesson/:id/room/reviews',
  PupilLessonController_getLessonChatFile = '/pupils/lesson/:lessonId/files',
  PupilLessonController_downloadChatAttachment = '/pupils/lesson/:chatAttachmentId/downloadChatAttachment',
  PupilLessonController_downloadAttachData = '/pupils/lesson/:attachmentManagerId/downloadAttachmentManager',
  PupilLessonController_requestCancelLesson = '/pupils/lesson/:id/cancel',
  ParentalAssociationController_createNewAssociation = '/parent/association',
  ParentalAssociationController_getAllAssociation = '/parent/association',
  PupilParentController_linkPupilAndParent = '/parent/pupil/link',
  PupilParentController_getAllParents = '/parent/pupil',
  AdminAuditController_saveAudit = '/admin/audit',
  AdminAuditController_getAdminAudit = '/admin/audit',
}
